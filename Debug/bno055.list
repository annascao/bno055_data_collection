
bno055.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  080084b8  080084b8  000184b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b14  08008b14  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  08008b14  08008b14  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b14  08008b14  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b14  08008b14  00018b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b18  08008b18  00018b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08008b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  200001fc  08008d18  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08008d18  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4c7  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ad  00000000  00000000  0002e6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00030ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  000319a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196a3  00000000  00000000  000326c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a87  00000000  00000000  0004bd63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a21c  00000000  00000000  0005c7ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6a06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c60  00000000  00000000  000e6a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800849c 	.word	0x0800849c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	0800849c 	.word	0x0800849c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4619      	mov	r1, r3
 8000a96:	2007      	movs	r0, #7
 8000a98:	f001 f838 	bl	8001b0c <bno055_writeData>
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	203d      	movs	r0, #61	; 0x3d
 8000ab4:	f001 f82a 	bl	8001b0c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d103      	bne.n	8000ac6 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000abe:	2013      	movs	r0, #19
 8000ac0:	f001 f818 	bl	8001af4 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000ac4:	e002      	b.n	8000acc <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000ac6:	2007      	movs	r0, #7
 8000ac8:	f001 f814 	bl	8001af4 <bno055_delay>
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff ffe3 	bl	8000aa4 <bno055_setOperationMode>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000ae6:	200c      	movs	r0, #12
 8000ae8:	f7ff ffdc 	bl	8000aa4 <bno055_setOperationMode>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000af4:	2120      	movs	r1, #32
 8000af6:	203f      	movs	r0, #63	; 0x3f
 8000af8:	f001 f808 	bl	8001b0c <bno055_writeData>
  bno055_delay(700);
 8000afc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000b00:	f000 fff8 	bl	8001af4 <bno055_delay>
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  bno055_reset();
 8000b0e:	f7ff ffef 	bl	8000af0 <bno055_reset>

  uint8_t id = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f001 f8e1 	bl	8001ce4 <bno055_readData>
  if (id != BNO055_ID) {
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2ba0      	cmp	r3, #160	; 0xa0
 8000b26:	d004      	beq.n	8000b32 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <bno055_setup+0x4c>)
 8000b2e:	f005 f8e9 	bl	8005d04 <iprintf>
  }
  bno055_setPage(0);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff ffa8 	bl	8000a88 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	203f      	movs	r0, #63	; 0x3f
 8000b3c:	f000 ffe6 	bl	8001b0c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000b40:	f7ff ffc8 	bl	8000ad4 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000b44:	200a      	movs	r0, #10
 8000b46:	f000 ffd5 	bl	8001af4 <bno055_delay>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	080084b8 	.word	0x080084b8

08000b58 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000b58:	b5b0      	push	{r4, r5, r7, lr}
 8000b5a:	b08e      	sub	sp, #56	; 0x38
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
  bno055_setPage(0);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f7ff ff8f 	bl	8000a88 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	2b20      	cmp	r3, #32
 8000b6e:	d107      	bne.n	8000b80 <bno055_getVector+0x28>
    bno055_readData(vec, buffer, 8);
 8000b70:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b74:	78fb      	ldrb	r3, [r7, #3]
 8000b76:	2208      	movs	r2, #8
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 f8b3 	bl	8001ce4 <bno055_readData>
 8000b7e:	e006      	b.n	8000b8e <bno055_getVector+0x36>
  else
    bno055_readData(vec, buffer, 6);
 8000b80:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	2206      	movs	r2, #6
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 f8ab 	bl	8001ce4 <bno055_readData>

  double scale = 1;
 8000b8e:	f04f 0200 	mov.w	r2, #0
 8000b92:	4b77      	ldr	r3, [pc, #476]	; (8000d70 <bno055_getVector+0x218>)
 8000b94:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000b98:	78fb      	ldrb	r3, [r7, #3]
 8000b9a:	2b0e      	cmp	r3, #14
 8000b9c:	d109      	bne.n	8000bb2 <bno055_getVector+0x5a>
    scale = magScale;
 8000b9e:	4b75      	ldr	r3, [pc, #468]	; (8000d74 <bno055_getVector+0x21c>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fc1e 	bl	80003e4 <__aeabi_ui2d>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8000bb0:	e038      	b.n	8000c24 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000bb2:	78fb      	ldrb	r3, [r7, #3]
 8000bb4:	2b08      	cmp	r3, #8
 8000bb6:	d005      	beq.n	8000bc4 <bno055_getVector+0x6c>
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	2b28      	cmp	r3, #40	; 0x28
 8000bbc:	d002      	beq.n	8000bc4 <bno055_getVector+0x6c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	2b2e      	cmp	r3, #46	; 0x2e
 8000bc2:	d109      	bne.n	8000bd8 <bno055_getVector+0x80>
    scale = accelScale;
 8000bc4:	4b6c      	ldr	r3, [pc, #432]	; (8000d78 <bno055_getVector+0x220>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fc0b 	bl	80003e4 <__aeabi_ui2d>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8000bd6:	e025      	b.n	8000c24 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	2b14      	cmp	r3, #20
 8000bdc:	d109      	bne.n	8000bf2 <bno055_getVector+0x9a>
    scale = angularRateScale;
 8000bde:	4b67      	ldr	r3, [pc, #412]	; (8000d7c <bno055_getVector+0x224>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fbfe 	bl	80003e4 <__aeabi_ui2d>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8000bf0:	e018      	b.n	8000c24 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000bf2:	78fb      	ldrb	r3, [r7, #3]
 8000bf4:	2b1a      	cmp	r3, #26
 8000bf6:	d109      	bne.n	8000c0c <bno055_getVector+0xb4>
    scale = eulerScale;
 8000bf8:	4b61      	ldr	r3, [pc, #388]	; (8000d80 <bno055_getVector+0x228>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fbf1 	bl	80003e4 <__aeabi_ui2d>
 8000c02:	4602      	mov	r2, r0
 8000c04:	460b      	mov	r3, r1
 8000c06:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8000c0a:	e00b      	b.n	8000c24 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000c0c:	78fb      	ldrb	r3, [r7, #3]
 8000c0e:	2b20      	cmp	r3, #32
 8000c10:	d108      	bne.n	8000c24 <bno055_getVector+0xcc>
    scale = quaScale;
 8000c12:	4b5c      	ldr	r3, [pc, #368]	; (8000d84 <bno055_getVector+0x22c>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fbe4 	bl	80003e4 <__aeabi_ui2d>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	2220      	movs	r2, #32
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f004 fc01 	bl	8005434 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	2b20      	cmp	r3, #32
 8000c36:	d150      	bne.n	8000cda <bno055_getVector+0x182>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000c38:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fbda 	bl	8000404 <__aeabi_i2d>
 8000c50:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000c54:	f7ff fd6a 	bl	800072c <__aeabi_ddiv>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000c60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c64:	021b      	lsls	r3, r3, #8
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000c6c:	b21b      	sxth	r3, r3
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b21b      	sxth	r3, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fbc6 	bl	8000404 <__aeabi_i2d>
 8000c78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000c7c:	f7ff fd56 	bl	800072c <__aeabi_ddiv>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000c88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b21b      	sxth	r3, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fbb2 	bl	8000404 <__aeabi_i2d>
 8000ca0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ca4:	f7ff fd42 	bl	800072c <__aeabi_ddiv>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cb4:	021b      	lsls	r3, r3, #8
 8000cb6:	b21a      	sxth	r2, r3
 8000cb8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000cbc:	b21b      	sxth	r3, r3
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fb9e 	bl	8000404 <__aeabi_i2d>
 8000cc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ccc:	f7ff fd2e 	bl	800072c <__aeabi_ddiv>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000cd8:	e03b      	b.n	8000d52 <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000cda:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fb89 	bl	8000404 <__aeabi_i2d>
 8000cf2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000cf6:	f7ff fd19 	bl	800072c <__aeabi_ddiv>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000d02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	4313      	orrs	r3, r2
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fb75 	bl	8000404 <__aeabi_i2d>
 8000d1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000d1e:	f7ff fd05 	bl	800072c <__aeabi_ddiv>
 8000d22:	4602      	mov	r2, r0
 8000d24:	460b      	mov	r3, r1
 8000d26:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000d2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b21b      	sxth	r3, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fb61 	bl	8000404 <__aeabi_i2d>
 8000d42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000d46:	f7ff fcf1 	bl	800072c <__aeabi_ddiv>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  return xyz;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	461d      	mov	r5, r3
 8000d56:	f107 0408 	add.w	r4, r7, #8
 8000d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d62:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	3738      	adds	r7, #56	; 0x38
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	3ff00000 	.word	0x3ff00000
 8000d74:	20000006 	.word	0x20000006
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000002 	.word	0x20000002
 8000d80:	20000004 	.word	0x20000004
 8000d84:	20000008 	.word	0x20000008

08000d88 <bno055_getVectorQuaternion>:
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL); //get linear acceleration
}
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2120      	movs	r1, #32
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fedf 	bl	8000b58 <bno055_getVector>
}
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <quaternion_norm>:
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}

// Function to calculate the norm (magnitude) of a quaternion
double quaternion_norm(bno055_vector_t q) {
 8000da2:	b084      	sub	sp, #16
 8000da4:	b5b0      	push	{r4, r5, r7, lr}
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	f107 0410 	add.w	r4, r7, #16
 8000dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return sqrt((q.w * q.w) + (q.x * q.x) + (q.y * q.y) + (q.z * q.z));
 8000db0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000db4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000db8:	f7ff fb8e 	bl	80004d8 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4614      	mov	r4, r2
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000dcc:	f7ff fb84 	bl	80004d8 <__aeabi_dmul>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	4629      	mov	r1, r5
 8000dd8:	f7ff f9c8 	bl	800016c <__adddf3>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4614      	mov	r4, r2
 8000de2:	461d      	mov	r5, r3
 8000de4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000de8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000dec:	f7ff fb74 	bl	80004d8 <__aeabi_dmul>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4620      	mov	r0, r4
 8000df6:	4629      	mov	r1, r5
 8000df8:	f7ff f9b8 	bl	800016c <__adddf3>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4614      	mov	r4, r2
 8000e02:	461d      	mov	r5, r3
 8000e04:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000e08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000e0c:	f7ff fb64 	bl	80004d8 <__aeabi_dmul>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4620      	mov	r0, r4
 8000e16:	4629      	mov	r1, r5
 8000e18:	f7ff f9a8 	bl	800016c <__adddf3>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f007 fa66 	bl	80082f4 <sqrt>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
}
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000e36:	b004      	add	sp, #16
 8000e38:	4770      	bx	lr

08000e3a <quaternion_conjugate>:

// Function to calculate the conjugate of a quaternion
bno055_vector_t quaternion_conjugate(bno055_vector_t q) {
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000e40:	b08b      	sub	sp, #44	; 0x2c
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000e4a:	e881 000c 	stmia.w	r1, {r2, r3}
    bno055_vector_t result = {q.w, -q.x, -q.y, -q.z};
 8000e4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000e52:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000e56:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000e5a:	4692      	mov	sl, r2
 8000e5c:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8000e60:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8000e64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000e68:	4690      	mov	r8, r2
 8000e6a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8000e6e:	e9c7 8906 	strd	r8, r9, [r7, #24]
 8000e72:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000e76:	4614      	mov	r4, r2
 8000e78:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000e7c:	e9c7 4508 	strd	r4, r5, [r7, #32]
    return result;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	461d      	mov	r5, r3
 8000e84:	f107 0408 	add.w	r4, r7, #8
 8000e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	372c      	adds	r7, #44	; 0x2c
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000e9e:	b002      	add	sp, #8
 8000ea0:	4770      	bx	lr

08000ea2 <quaternion_normalize>:

// Function to normalize a quaternion
bno055_vector_t quaternion_normalize(bno055_vector_t q) {
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	b5b0      	push	{r4, r5, r7, lr}
 8000ea6:	b090      	sub	sp, #64	; 0x40
 8000ea8:	af04      	add	r7, sp, #16
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000eb0:	e881 000c 	stmia.w	r1, {r2, r3}
    double norm = quaternion_norm(q);
 8000eb4:	466c      	mov	r4, sp
 8000eb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ebc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ec0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ec4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec6:	f7ff ff6c 	bl	8000da2 <quaternion_norm>
 8000eca:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    bno055_vector_t result = {q.w / norm, q.x / norm, q.y / norm, q.z / norm};
 8000ece:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000ed2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000ed6:	f7ff fc29 	bl	800072c <__aeabi_ddiv>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000ee2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000ee6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000eea:	f7ff fc1f 	bl	800072c <__aeabi_ddiv>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000ef6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000efa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000efe:	f7ff fc15 	bl	800072c <__aeabi_ddiv>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000f0a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000f0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f12:	f7ff fc0b 	bl	800072c <__aeabi_ddiv>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    return result;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	461d      	mov	r5, r3
 8000f22:	f107 0408 	add.w	r4, r7, #8
 8000f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f2e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	3730      	adds	r7, #48	; 0x30
 8000f36:	46bd      	mov	sp, r7
 8000f38:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000f3c:	b002      	add	sp, #8
 8000f3e:	4770      	bx	lr

08000f40 <quaternion_multiply>:

// Function to multiply two quaternions
bno055_vector_t quaternion_multiply(bno055_vector_t q1, bno055_vector_t q2) {
 8000f40:	b082      	sub	sp, #8
 8000f42:	b5b0      	push	{r4, r5, r7, lr}
 8000f44:	b08a      	sub	sp, #40	; 0x28
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000f4e:	e881 000c 	stmia.w	r1, {r2, r3}
    bno055_vector_t result;
    result.w = (q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z);
 8000f52:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000f56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000f5a:	f7ff fabd 	bl	80004d8 <__aeabi_dmul>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4614      	mov	r4, r2
 8000f64:	461d      	mov	r5, r3
 8000f66:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000f6a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000f6e:	f7ff fab3 	bl	80004d8 <__aeabi_dmul>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4620      	mov	r0, r4
 8000f78:	4629      	mov	r1, r5
 8000f7a:	f7ff f8f5 	bl	8000168 <__aeabi_dsub>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4614      	mov	r4, r2
 8000f84:	461d      	mov	r5, r3
 8000f86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000f8a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000f8e:	f7ff faa3 	bl	80004d8 <__aeabi_dmul>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4620      	mov	r0, r4
 8000f98:	4629      	mov	r1, r5
 8000f9a:	f7ff f8e5 	bl	8000168 <__aeabi_dsub>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4614      	mov	r4, r2
 8000fa4:	461d      	mov	r5, r3
 8000fa6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000faa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000fae:	f7ff fa93 	bl	80004d8 <__aeabi_dmul>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	4629      	mov	r1, r5
 8000fba:	f7ff f8d5 	bl	8000168 <__aeabi_dsub>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result.x = (q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y);
 8000fc6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000fca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000fce:	f7ff fa83 	bl	80004d8 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4614      	mov	r4, r2
 8000fd8:	461d      	mov	r5, r3
 8000fda:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000fde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000fe2:	f7ff fa79 	bl	80004d8 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4620      	mov	r0, r4
 8000fec:	4629      	mov	r1, r5
 8000fee:	f7ff f8bd 	bl	800016c <__adddf3>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4614      	mov	r4, r2
 8000ff8:	461d      	mov	r5, r3
 8000ffa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000ffe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001002:	f7ff fa69 	bl	80004d8 <__aeabi_dmul>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4620      	mov	r0, r4
 800100c:	4629      	mov	r1, r5
 800100e:	f7ff f8ad 	bl	800016c <__adddf3>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4614      	mov	r4, r2
 8001018:	461d      	mov	r5, r3
 800101a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800101e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001022:	f7ff fa59 	bl	80004d8 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4620      	mov	r0, r4
 800102c:	4629      	mov	r1, r5
 800102e:	f7ff f89b 	bl	8000168 <__aeabi_dsub>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result.y = (q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x);
 800103a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800103e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001042:	f7ff fa49 	bl	80004d8 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4614      	mov	r4, r2
 800104c:	461d      	mov	r5, r3
 800104e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001052:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001056:	f7ff fa3f 	bl	80004d8 <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4620      	mov	r0, r4
 8001060:	4629      	mov	r1, r5
 8001062:	f7ff f881 	bl	8000168 <__aeabi_dsub>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4614      	mov	r4, r2
 800106c:	461d      	mov	r5, r3
 800106e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001072:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001076:	f7ff fa2f 	bl	80004d8 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4620      	mov	r0, r4
 8001080:	4629      	mov	r1, r5
 8001082:	f7ff f873 	bl	800016c <__adddf3>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4614      	mov	r4, r2
 800108c:	461d      	mov	r5, r3
 800108e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001092:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001096:	f7ff fa1f 	bl	80004d8 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4620      	mov	r0, r4
 80010a0:	4629      	mov	r1, r5
 80010a2:	f7ff f863 	bl	800016c <__adddf3>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    result.z = (q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w);
 80010ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80010b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80010b6:	f7ff fa0f 	bl	80004d8 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4614      	mov	r4, r2
 80010c0:	461d      	mov	r5, r3
 80010c2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80010c6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80010ca:	f7ff fa05 	bl	80004d8 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4620      	mov	r0, r4
 80010d4:	4629      	mov	r1, r5
 80010d6:	f7ff f849 	bl	800016c <__adddf3>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4614      	mov	r4, r2
 80010e0:	461d      	mov	r5, r3
 80010e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80010e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80010ea:	f7ff f9f5 	bl	80004d8 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4620      	mov	r0, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff f837 	bl	8000168 <__aeabi_dsub>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4614      	mov	r4, r2
 8001100:	461d      	mov	r5, r3
 8001102:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800110a:	f7ff f9e5 	bl	80004d8 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4620      	mov	r0, r4
 8001114:	4629      	mov	r1, r5
 8001116:	f7ff f829 	bl	800016c <__adddf3>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    return result;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	461d      	mov	r5, r3
 8001126:	f107 0408 	add.w	r4, r7, #8
 800112a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800112c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800112e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001132:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001140:	b002      	add	sp, #8
 8001142:	4770      	bx	lr

08001144 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <SELECT+0x1c>)
 8001150:	f001 fe0f 	bl	8002d72 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001154:	2001      	movs	r0, #1
 8001156:	f001 fb69 	bl	800282c <HAL_Delay>
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40010c00 	.word	0x40010c00

08001164 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116e:	4804      	ldr	r0, [pc, #16]	; (8001180 <DESELECT+0x1c>)
 8001170:	f001 fdff 	bl	8002d72 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001174:	2001      	movs	r0, #1
 8001176:	f001 fb59 	bl	800282c <HAL_Delay>
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40010c00 	.word	0x40010c00

08001184 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800118e:	bf00      	nop
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <SPI_TxByte+0x30>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b02      	cmp	r3, #2
 800119c:	d1f8      	bne.n	8001190 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800119e:	1df9      	adds	r1, r7, #7
 80011a0:	2364      	movs	r3, #100	; 0x64
 80011a2:	2201      	movs	r2, #1
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <SPI_TxByte+0x30>)
 80011a6:	f003 fadd 	bl	8004764 <HAL_SPI_Transmit>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200002cc 	.word	0x200002cc

080011b8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80011c4:	bf00      	nop
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <SPI_TxBuffer+0x30>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d1f8      	bne.n	80011c6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80011d4:	887a      	ldrh	r2, [r7, #2]
 80011d6:	2364      	movs	r3, #100	; 0x64
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <SPI_TxBuffer+0x30>)
 80011dc:	f003 fac2 	bl	8004764 <HAL_SPI_Transmit>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200002cc 	.word	0x200002cc

080011ec <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80011f2:	23ff      	movs	r3, #255	; 0xff
 80011f4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80011f6:	bf00      	nop
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <SPI_RxByte+0x34>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b02      	cmp	r3, #2
 8001204:	d1f8      	bne.n	80011f8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001206:	1dba      	adds	r2, r7, #6
 8001208:	1df9      	adds	r1, r7, #7
 800120a:	2364      	movs	r3, #100	; 0x64
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <SPI_RxByte+0x34>)
 8001212:	f003 fbea 	bl	80049ea <HAL_SPI_TransmitReceive>

	return data;
 8001216:	79bb      	ldrb	r3, [r7, #6]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200002cc 	.word	0x200002cc

08001224 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800122c:	f7ff ffde 	bl	80011ec <SPI_RxByte>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	701a      	strb	r2, [r3, #0]
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <SD_ReadyWait+0x30>)
 8001248:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800124c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800124e:	f7ff ffcd 	bl	80011ec <SPI_RxByte>
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2bff      	cmp	r3, #255	; 0xff
 800125a:	d003      	beq.n	8001264 <SD_ReadyWait+0x24>
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SD_ReadyWait+0x30>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f4      	bne.n	800124e <SD_ReadyWait+0xe>

	return res;
 8001264:	79fb      	ldrb	r3, [r7, #7]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000021a 	.word	0x2000021a

08001274 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800127a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800127e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001280:	f7ff ff70 	bl	8001164 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	e005      	b.n	8001296 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800128a:	20ff      	movs	r0, #255	; 0xff
 800128c:	f7ff ff7a 	bl	8001184 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3301      	adds	r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b09      	cmp	r3, #9
 800129a:	ddf6      	ble.n	800128a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800129c:	f7ff ff52 	bl	8001144 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80012a0:	2340      	movs	r3, #64	; 0x40
 80012a2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80012b4:	2395      	movs	r3, #149	; 0x95
 80012b6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80012b8:	463b      	mov	r3, r7
 80012ba:	2106      	movs	r1, #6
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff7b 	bl	80011b8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80012c2:	e002      	b.n	80012ca <SD_PowerOn+0x56>
	{
		cnt--;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80012ca:	f7ff ff8f 	bl	80011ec <SPI_RxByte>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d002      	beq.n	80012da <SD_PowerOn+0x66>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f4      	bne.n	80012c4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80012da:	f7ff ff43 	bl	8001164 <DESELECT>
	SPI_TxByte(0XFF);
 80012de:	20ff      	movs	r0, #255	; 0xff
 80012e0:	f7ff ff50 	bl	8001184 <SPI_TxByte>

	PowerFlag = 1;
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <SD_PowerOn+0x80>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	2000021d 	.word	0x2000021d

080012f8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <SD_PowerOff+0x14>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	2000021d 	.word	0x2000021d

08001310 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001314:	4b02      	ldr	r3, [pc, #8]	; (8001320 <SD_CheckPower+0x10>)
 8001316:	781b      	ldrb	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	2000021d 	.word	0x2000021d

08001324 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <SD_RxDataBlock+0x58>)
 8001330:	22c8      	movs	r2, #200	; 0xc8
 8001332:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001334:	f7ff ff5a 	bl	80011ec <SPI_RxByte>
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	2bff      	cmp	r3, #255	; 0xff
 8001340:	d103      	bne.n	800134a <SD_RxDataBlock+0x26>
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <SD_RxDataBlock+0x58>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f4      	bne.n	8001334 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	2bfe      	cmp	r3, #254	; 0xfe
 800134e:	d001      	beq.n	8001354 <SD_RxDataBlock+0x30>
 8001350:	2300      	movs	r3, #0
 8001352:	e00f      	b.n	8001374 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff62 	bl	8001224 <SPI_RxBytePtr>
	} while(len--);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	1e5a      	subs	r2, r3, #1
 8001364:	603a      	str	r2, [r7, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f4      	bne.n	8001354 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800136a:	f7ff ff3f 	bl	80011ec <SPI_RxByte>
	SPI_RxByte();
 800136e:	f7ff ff3d 	bl	80011ec <SPI_RxByte>

	return TRUE;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000218 	.word	0x20000218

08001380 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001390:	f7ff ff56 	bl	8001240 <SD_ReadyWait>
 8001394:	4603      	mov	r3, r0
 8001396:	2bff      	cmp	r3, #255	; 0xff
 8001398:	d001      	beq.n	800139e <SD_TxDataBlock+0x1e>
 800139a:	2300      	movs	r3, #0
 800139c:	e02f      	b.n	80013fe <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff feef 	bl	8001184 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	2bfd      	cmp	r3, #253	; 0xfd
 80013aa:	d020      	beq.n	80013ee <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80013ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff01 	bl	80011b8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80013b6:	f7ff ff19 	bl	80011ec <SPI_RxByte>
		SPI_RxByte();
 80013ba:	f7ff ff17 	bl	80011ec <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80013be:	e00b      	b.n	80013d8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80013c0:	f7ff ff14 	bl	80011ec <SPI_RxByte>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	2b05      	cmp	r3, #5
 80013d0:	d006      	beq.n	80013e0 <SD_TxDataBlock+0x60>
			i++;
 80013d2:	7bbb      	ldrb	r3, [r7, #14]
 80013d4:	3301      	adds	r3, #1
 80013d6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80013d8:	7bbb      	ldrb	r3, [r7, #14]
 80013da:	2b40      	cmp	r3, #64	; 0x40
 80013dc:	d9f0      	bls.n	80013c0 <SD_TxDataBlock+0x40>
 80013de:	e000      	b.n	80013e2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80013e0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80013e2:	bf00      	nop
 80013e4:	f7ff ff02 	bl	80011ec <SPI_RxByte>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0fa      	beq.n	80013e4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	f003 031f 	and.w	r3, r3, #31
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d101      	bne.n	80013fc <SD_TxDataBlock+0x7c>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <SD_TxDataBlock+0x7e>

	return FALSE;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	6039      	str	r1, [r7, #0]
 8001410:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001412:	f7ff ff15 	bl	8001240 <SD_ReadyWait>
 8001416:	4603      	mov	r3, r0
 8001418:	2bff      	cmp	r3, #255	; 0xff
 800141a:	d001      	beq.n	8001420 <SD_SendCmd+0x1a>
 800141c:	23ff      	movs	r3, #255	; 0xff
 800141e:	e042      	b.n	80014a6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff feae 	bl	8001184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	0e1b      	lsrs	r3, r3, #24
 800142c:	b2db      	uxtb	r3, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fea8 	bl	8001184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	0c1b      	lsrs	r3, r3, #16
 8001438:	b2db      	uxtb	r3, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fea2 	bl	8001184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	b2db      	uxtb	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fe9c 	bl	8001184 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fe97 	bl	8001184 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2b40      	cmp	r3, #64	; 0x40
 800145a:	d102      	bne.n	8001462 <SD_SendCmd+0x5c>
 800145c:	2395      	movs	r3, #149	; 0x95
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e007      	b.n	8001472 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b48      	cmp	r3, #72	; 0x48
 8001466:	d102      	bne.n	800146e <SD_SendCmd+0x68>
 8001468:	2387      	movs	r3, #135	; 0x87
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e001      	b.n	8001472 <SD_SendCmd+0x6c>
	else crc = 1;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fe85 	bl	8001184 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b4c      	cmp	r3, #76	; 0x4c
 800147e:	d101      	bne.n	8001484 <SD_SendCmd+0x7e>
 8001480:	f7ff feb4 	bl	80011ec <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001484:	230a      	movs	r3, #10
 8001486:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001488:	f7ff feb0 	bl	80011ec <SPI_RxByte>
 800148c:	4603      	mov	r3, r0
 800148e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001490:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001494:	2b00      	cmp	r3, #0
 8001496:	da05      	bge.n	80014a4 <SD_SendCmd+0x9e>
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	3b01      	subs	r3, #1
 800149c:	73bb      	strb	r3, [r7, #14]
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f1      	bne.n	8001488 <SD_SendCmd+0x82>

	return res;
 80014a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SD_disk_initialize+0x14>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e0d1      	b.n	8001668 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80014c4:	4b6a      	ldr	r3, [pc, #424]	; (8001670 <SD_disk_initialize+0x1c0>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <SD_disk_initialize+0x2a>
 80014d2:	4b67      	ldr	r3, [pc, #412]	; (8001670 <SD_disk_initialize+0x1c0>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	e0c6      	b.n	8001668 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80014da:	f7ff fecb 	bl	8001274 <SD_PowerOn>

	/* slave select */
	SELECT();
 80014de:	f7ff fe31 	bl	8001144 <SELECT>

	/* check disk type */
	type = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80014e6:	2100      	movs	r1, #0
 80014e8:	2040      	movs	r0, #64	; 0x40
 80014ea:	f7ff ff8c 	bl	8001406 <SD_SendCmd>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	f040 80a1 	bne.w	8001638 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80014f6:	4b5f      	ldr	r3, [pc, #380]	; (8001674 <SD_disk_initialize+0x1c4>)
 80014f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014fc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80014fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001502:	2048      	movs	r0, #72	; 0x48
 8001504:	f7ff ff7f 	bl	8001406 <SD_SendCmd>
 8001508:	4603      	mov	r3, r0
 800150a:	2b01      	cmp	r3, #1
 800150c:	d155      	bne.n	80015ba <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	e00c      	b.n	800152e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001514:	7bfc      	ldrb	r4, [r7, #15]
 8001516:	f7ff fe69 	bl	80011ec <SPI_RxByte>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	f104 0310 	add.w	r3, r4, #16
 8001522:	443b      	add	r3, r7
 8001524:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	3301      	adds	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d9ef      	bls.n	8001514 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001534:	7abb      	ldrb	r3, [r7, #10]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d17e      	bne.n	8001638 <SD_disk_initialize+0x188>
 800153a:	7afb      	ldrb	r3, [r7, #11]
 800153c:	2baa      	cmp	r3, #170	; 0xaa
 800153e:	d17b      	bne.n	8001638 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001540:	2100      	movs	r1, #0
 8001542:	2077      	movs	r0, #119	; 0x77
 8001544:	f7ff ff5f 	bl	8001406 <SD_SendCmd>
 8001548:	4603      	mov	r3, r0
 800154a:	2b01      	cmp	r3, #1
 800154c:	d807      	bhi.n	800155e <SD_disk_initialize+0xae>
 800154e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001552:	2069      	movs	r0, #105	; 0x69
 8001554:	f7ff ff57 	bl	8001406 <SD_SendCmd>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d004      	beq.n	8001568 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800155e:	4b45      	ldr	r3, [pc, #276]	; (8001674 <SD_disk_initialize+0x1c4>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1ec      	bne.n	8001540 <SD_disk_initialize+0x90>
 8001566:	e000      	b.n	800156a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001568:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800156a:	4b42      	ldr	r3, [pc, #264]	; (8001674 <SD_disk_initialize+0x1c4>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d062      	beq.n	8001638 <SD_disk_initialize+0x188>
 8001572:	2100      	movs	r1, #0
 8001574:	207a      	movs	r0, #122	; 0x7a
 8001576:	f7ff ff46 	bl	8001406 <SD_SendCmd>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d15b      	bne.n	8001638 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e00c      	b.n	80015a0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001586:	7bfc      	ldrb	r4, [r7, #15]
 8001588:	f7ff fe30 	bl	80011ec <SPI_RxByte>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	f104 0310 	add.w	r3, r4, #16
 8001594:	443b      	add	r3, r7
 8001596:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	3301      	adds	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d9ef      	bls.n	8001586 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80015a6:	7a3b      	ldrb	r3, [r7, #8]
 80015a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <SD_disk_initialize+0x104>
 80015b0:	230c      	movs	r3, #12
 80015b2:	e000      	b.n	80015b6 <SD_disk_initialize+0x106>
 80015b4:	2304      	movs	r3, #4
 80015b6:	73bb      	strb	r3, [r7, #14]
 80015b8:	e03e      	b.n	8001638 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80015ba:	2100      	movs	r1, #0
 80015bc:	2077      	movs	r0, #119	; 0x77
 80015be:	f7ff ff22 	bl	8001406 <SD_SendCmd>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d808      	bhi.n	80015da <SD_disk_initialize+0x12a>
 80015c8:	2100      	movs	r1, #0
 80015ca:	2069      	movs	r0, #105	; 0x69
 80015cc:	f7ff ff1b 	bl	8001406 <SD_SendCmd>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d801      	bhi.n	80015da <SD_disk_initialize+0x12a>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e000      	b.n	80015dc <SD_disk_initialize+0x12c>
 80015da:	2301      	movs	r3, #1
 80015dc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80015de:	7bbb      	ldrb	r3, [r7, #14]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d10e      	bne.n	8001602 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80015e4:	2100      	movs	r1, #0
 80015e6:	2077      	movs	r0, #119	; 0x77
 80015e8:	f7ff ff0d 	bl	8001406 <SD_SendCmd>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d80e      	bhi.n	8001610 <SD_disk_initialize+0x160>
 80015f2:	2100      	movs	r1, #0
 80015f4:	2069      	movs	r0, #105	; 0x69
 80015f6:	f7ff ff06 	bl	8001406 <SD_SendCmd>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d107      	bne.n	8001610 <SD_disk_initialize+0x160>
 8001600:	e00c      	b.n	800161c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001602:	2100      	movs	r1, #0
 8001604:	2041      	movs	r0, #65	; 0x41
 8001606:	f7ff fefe 	bl	8001406 <SD_SendCmd>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d004      	beq.n	800161a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <SD_disk_initialize+0x1c4>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1e2      	bne.n	80015de <SD_disk_initialize+0x12e>
 8001618:	e000      	b.n	800161c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800161a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <SD_disk_initialize+0x1c4>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d007      	beq.n	8001634 <SD_disk_initialize+0x184>
 8001624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001628:	2050      	movs	r0, #80	; 0x50
 800162a:	f7ff feec 	bl	8001406 <SD_SendCmd>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SD_disk_initialize+0x188>
 8001634:	2300      	movs	r3, #0
 8001636:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001638:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <SD_disk_initialize+0x1c8>)
 800163a:	7bbb      	ldrb	r3, [r7, #14]
 800163c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800163e:	f7ff fd91 	bl	8001164 <DESELECT>
	SPI_RxByte();
 8001642:	f7ff fdd3 	bl	80011ec <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001646:	7bbb      	ldrb	r3, [r7, #14]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <SD_disk_initialize+0x1c0>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	b2da      	uxtb	r2, r3
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <SD_disk_initialize+0x1c0>)
 800165a:	701a      	strb	r2, [r3, #0]
 800165c:	e001      	b.n	8001662 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800165e:	f7ff fe4b 	bl	80012f8 <SD_PowerOff>
	}

	return Stat;
 8001662:	4b03      	ldr	r3, [pc, #12]	; (8001670 <SD_disk_initialize+0x1c0>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b2db      	uxtb	r3, r3
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	bd90      	pop	{r4, r7, pc}
 8001670:	2000000a 	.word	0x2000000a
 8001674:	20000218 	.word	0x20000218
 8001678:	2000021c 	.word	0x2000021c

0800167c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SD_disk_status+0x14>
 800168c:	2301      	movs	r3, #1
 800168e:	e002      	b.n	8001696 <SD_disk_status+0x1a>
	return Stat;
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <SD_disk_status+0x24>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2db      	uxtb	r3, r3
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	2000000a 	.word	0x2000000a

080016a4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	4603      	mov	r3, r0
 80016b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d102      	bne.n	80016c0 <SD_disk_read+0x1c>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <SD_disk_read+0x20>
 80016c0:	2304      	movs	r3, #4
 80016c2:	e051      	b.n	8001768 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <SD_disk_read+0xcc>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SD_disk_read+0x32>
 80016d2:	2303      	movs	r3, #3
 80016d4:	e048      	b.n	8001768 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80016d6:	4b27      	ldr	r3, [pc, #156]	; (8001774 <SD_disk_read+0xd0>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <SD_disk_read+0x44>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	025b      	lsls	r3, r3, #9
 80016e6:	607b      	str	r3, [r7, #4]

	SELECT();
 80016e8:	f7ff fd2c 	bl	8001144 <SELECT>

	if (count == 1)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d111      	bne.n	8001716 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	2051      	movs	r0, #81	; 0x51
 80016f6:	f7ff fe86 	bl	8001406 <SD_SendCmd>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d129      	bne.n	8001754 <SD_disk_read+0xb0>
 8001700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001704:	68b8      	ldr	r0, [r7, #8]
 8001706:	f7ff fe0d 	bl	8001324 <SD_RxDataBlock>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d021      	beq.n	8001754 <SD_disk_read+0xb0>
 8001710:	2300      	movs	r3, #0
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	e01e      	b.n	8001754 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	2052      	movs	r0, #82	; 0x52
 800171a:	f7ff fe74 	bl	8001406 <SD_SendCmd>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d117      	bne.n	8001754 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001728:	68b8      	ldr	r0, [r7, #8]
 800172a:	f7ff fdfb 	bl	8001324 <SD_RxDataBlock>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00a      	beq.n	800174a <SD_disk_read+0xa6>
				buff += 512;
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800173a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	3b01      	subs	r3, #1
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1ed      	bne.n	8001724 <SD_disk_read+0x80>
 8001748:	e000      	b.n	800174c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800174a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800174c:	2100      	movs	r1, #0
 800174e:	204c      	movs	r0, #76	; 0x4c
 8001750:	f7ff fe59 	bl	8001406 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001754:	f7ff fd06 	bl	8001164 <DESELECT>
	SPI_RxByte();
 8001758:	f7ff fd48 	bl	80011ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf14      	ite	ne
 8001762:	2301      	movne	r3, #1
 8001764:	2300      	moveq	r3, #0
 8001766:	b2db      	uxtb	r3, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	2000000a 	.word	0x2000000a
 8001774:	2000021c 	.word	0x2000021c

08001778 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	4603      	mov	r3, r0
 8001786:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d102      	bne.n	8001794 <SD_disk_write+0x1c>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <SD_disk_write+0x20>
 8001794:	2304      	movs	r3, #4
 8001796:	e06b      	b.n	8001870 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001798:	4b37      	ldr	r3, [pc, #220]	; (8001878 <SD_disk_write+0x100>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SD_disk_write+0x32>
 80017a6:	2303      	movs	r3, #3
 80017a8:	e062      	b.n	8001870 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80017aa:	4b33      	ldr	r3, [pc, #204]	; (8001878 <SD_disk_write+0x100>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <SD_disk_write+0x44>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e059      	b.n	8001870 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80017bc:	4b2f      	ldr	r3, [pc, #188]	; (800187c <SD_disk_write+0x104>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <SD_disk_write+0x56>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	025b      	lsls	r3, r3, #9
 80017cc:	607b      	str	r3, [r7, #4]

	SELECT();
 80017ce:	f7ff fcb9 	bl	8001144 <SELECT>

	if (count == 1)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d110      	bne.n	80017fa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	2058      	movs	r0, #88	; 0x58
 80017dc:	f7ff fe13 	bl	8001406 <SD_SendCmd>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d13a      	bne.n	800185c <SD_disk_write+0xe4>
 80017e6:	21fe      	movs	r1, #254	; 0xfe
 80017e8:	68b8      	ldr	r0, [r7, #8]
 80017ea:	f7ff fdc9 	bl	8001380 <SD_TxDataBlock>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d033      	beq.n	800185c <SD_disk_write+0xe4>
			count = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	e030      	b.n	800185c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <SD_disk_write+0x104>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001806:	2100      	movs	r1, #0
 8001808:	2077      	movs	r0, #119	; 0x77
 800180a:	f7ff fdfc 	bl	8001406 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800180e:	6839      	ldr	r1, [r7, #0]
 8001810:	2057      	movs	r0, #87	; 0x57
 8001812:	f7ff fdf8 	bl	8001406 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	2059      	movs	r0, #89	; 0x59
 800181a:	f7ff fdf4 	bl	8001406 <SD_SendCmd>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d11b      	bne.n	800185c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001824:	21fc      	movs	r1, #252	; 0xfc
 8001826:	68b8      	ldr	r0, [r7, #8]
 8001828:	f7ff fdaa 	bl	8001380 <SD_TxDataBlock>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00a      	beq.n	8001848 <SD_disk_write+0xd0>
				buff += 512;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001838:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	3b01      	subs	r3, #1
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1ee      	bne.n	8001824 <SD_disk_write+0xac>
 8001846:	e000      	b.n	800184a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001848:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800184a:	21fd      	movs	r1, #253	; 0xfd
 800184c:	2000      	movs	r0, #0
 800184e:	f7ff fd97 	bl	8001380 <SD_TxDataBlock>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <SD_disk_write+0xe4>
			{
				count = 1;
 8001858:	2301      	movs	r3, #1
 800185a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800185c:	f7ff fc82 	bl	8001164 <DESELECT>
	SPI_RxByte();
 8001860:	f7ff fcc4 	bl	80011ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf14      	ite	ne
 800186a:	2301      	movne	r3, #1
 800186c:	2300      	moveq	r3, #0
 800186e:	b2db      	uxtb	r3, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000000a 	.word	0x2000000a
 800187c:	2000021c 	.word	0x2000021c

08001880 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b08b      	sub	sp, #44	; 0x2c
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	603a      	str	r2, [r7, #0]
 800188a:	71fb      	strb	r3, [r7, #7]
 800188c:	460b      	mov	r3, r1
 800188e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <SD_disk_ioctl+0x1e>
 800189a:	2304      	movs	r3, #4
 800189c:	e115      	b.n	8001aca <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80018a4:	79bb      	ldrb	r3, [r7, #6]
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d124      	bne.n	80018f4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d012      	beq.n	80018d8 <SD_disk_ioctl+0x58>
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	dc1a      	bgt.n	80018ec <SD_disk_ioctl+0x6c>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <SD_disk_ioctl+0x40>
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d006      	beq.n	80018cc <SD_disk_ioctl+0x4c>
 80018be:	e015      	b.n	80018ec <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80018c0:	f7ff fd1a 	bl	80012f8 <SD_PowerOff>
			res = RES_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018ca:	e0fc      	b.n	8001ac6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80018cc:	f7ff fcd2 	bl	8001274 <SD_PowerOn>
			res = RES_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018d6:	e0f6      	b.n	8001ac6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	1c5c      	adds	r4, r3, #1
 80018dc:	f7ff fd18 	bl	8001310 <SD_CheckPower>
 80018e0:	4603      	mov	r3, r0
 80018e2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018ea:	e0ec      	b.n	8001ac6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80018ec:	2304      	movs	r3, #4
 80018ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018f2:	e0e8      	b.n	8001ac6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80018f4:	4b77      	ldr	r3, [pc, #476]	; (8001ad4 <SD_disk_ioctl+0x254>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <SD_disk_ioctl+0x86>
 8001902:	2303      	movs	r3, #3
 8001904:	e0e1      	b.n	8001aca <SD_disk_ioctl+0x24a>

		SELECT();
 8001906:	f7ff fc1d 	bl	8001144 <SELECT>

		switch (ctrl)
 800190a:	79bb      	ldrb	r3, [r7, #6]
 800190c:	2b0d      	cmp	r3, #13
 800190e:	f200 80cb 	bhi.w	8001aa8 <SD_disk_ioctl+0x228>
 8001912:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <SD_disk_ioctl+0x98>)
 8001914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001918:	08001a13 	.word	0x08001a13
 800191c:	08001951 	.word	0x08001951
 8001920:	08001a03 	.word	0x08001a03
 8001924:	08001aa9 	.word	0x08001aa9
 8001928:	08001aa9 	.word	0x08001aa9
 800192c:	08001aa9 	.word	0x08001aa9
 8001930:	08001aa9 	.word	0x08001aa9
 8001934:	08001aa9 	.word	0x08001aa9
 8001938:	08001aa9 	.word	0x08001aa9
 800193c:	08001aa9 	.word	0x08001aa9
 8001940:	08001aa9 	.word	0x08001aa9
 8001944:	08001a25 	.word	0x08001a25
 8001948:	08001a49 	.word	0x08001a49
 800194c:	08001a6d 	.word	0x08001a6d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001950:	2100      	movs	r1, #0
 8001952:	2049      	movs	r0, #73	; 0x49
 8001954:	f7ff fd57 	bl	8001406 <SD_SendCmd>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	f040 80a8 	bne.w	8001ab0 <SD_disk_ioctl+0x230>
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	2110      	movs	r1, #16
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fcdc 	bl	8001324 <SD_RxDataBlock>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 809e 	beq.w	8001ab0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001974:	7b3b      	ldrb	r3, [r7, #12]
 8001976:	099b      	lsrs	r3, r3, #6
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d10e      	bne.n	800199c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800197e:	7d7b      	ldrb	r3, [r7, #21]
 8001980:	b29a      	uxth	r2, r3
 8001982:	7d3b      	ldrb	r3, [r7, #20]
 8001984:	b29b      	uxth	r3, r3
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	b29b      	uxth	r3, r3
 800198a:	4413      	add	r3, r2
 800198c:	b29b      	uxth	r3, r3
 800198e:	3301      	adds	r3, #1
 8001990:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001992:	8bfb      	ldrh	r3, [r7, #30]
 8001994:	029a      	lsls	r2, r3, #10
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e02e      	b.n	80019fa <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800199c:	7c7b      	ldrb	r3, [r7, #17]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	7dbb      	ldrb	r3, [r7, #22]
 80019a6:	09db      	lsrs	r3, r3, #7
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	7d7b      	ldrb	r3, [r7, #21]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f003 0306 	and.w	r3, r3, #6
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	3302      	adds	r3, #2
 80019c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80019c4:	7d3b      	ldrb	r3, [r7, #20]
 80019c6:	099b      	lsrs	r3, r3, #6
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	7cfb      	ldrb	r3, [r7, #19]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	7cbb      	ldrb	r3, [r7, #18]
 80019da:	029b      	lsls	r3, r3, #10
 80019dc:	b29b      	uxth	r3, r3
 80019de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	3301      	adds	r3, #1
 80019ea:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80019ec:	8bfa      	ldrh	r2, [r7, #30]
 80019ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019f2:	3b09      	subs	r3, #9
 80019f4:	409a      	lsls	r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001a00:	e056      	b.n	8001ab0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a08:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a10:	e055      	b.n	8001abe <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001a12:	f7ff fc15 	bl	8001240 <SD_ReadyWait>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2bff      	cmp	r3, #255	; 0xff
 8001a1a:	d14b      	bne.n	8001ab4 <SD_disk_ioctl+0x234>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a22:	e047      	b.n	8001ab4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001a24:	2100      	movs	r1, #0
 8001a26:	2049      	movs	r0, #73	; 0x49
 8001a28:	f7ff fced 	bl	8001406 <SD_SendCmd>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d142      	bne.n	8001ab8 <SD_disk_ioctl+0x238>
 8001a32:	2110      	movs	r1, #16
 8001a34:	6a38      	ldr	r0, [r7, #32]
 8001a36:	f7ff fc75 	bl	8001324 <SD_RxDataBlock>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d03b      	beq.n	8001ab8 <SD_disk_ioctl+0x238>
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a46:	e037      	b.n	8001ab8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001a48:	2100      	movs	r1, #0
 8001a4a:	204a      	movs	r0, #74	; 0x4a
 8001a4c:	f7ff fcdb 	bl	8001406 <SD_SendCmd>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d132      	bne.n	8001abc <SD_disk_ioctl+0x23c>
 8001a56:	2110      	movs	r1, #16
 8001a58:	6a38      	ldr	r0, [r7, #32]
 8001a5a:	f7ff fc63 	bl	8001324 <SD_RxDataBlock>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d02b      	beq.n	8001abc <SD_disk_ioctl+0x23c>
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001a6a:	e027      	b.n	8001abc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	207a      	movs	r0, #122	; 0x7a
 8001a70:	f7ff fcc9 	bl	8001406 <SD_SendCmd>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d116      	bne.n	8001aa8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001a80:	e00b      	b.n	8001a9a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001a82:	6a3c      	ldr	r4, [r7, #32]
 8001a84:	1c63      	adds	r3, r4, #1
 8001a86:	623b      	str	r3, [r7, #32]
 8001a88:	f7ff fbb0 	bl	80011ec <SPI_RxByte>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001a90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a94:	3301      	adds	r3, #1
 8001a96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001a9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d9ef      	bls.n	8001a82 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001aae:	e006      	b.n	8001abe <SD_disk_ioctl+0x23e>
			break;
 8001ab0:	bf00      	nop
 8001ab2:	e004      	b.n	8001abe <SD_disk_ioctl+0x23e>
			break;
 8001ab4:	bf00      	nop
 8001ab6:	e002      	b.n	8001abe <SD_disk_ioctl+0x23e>
			break;
 8001ab8:	bf00      	nop
 8001aba:	e000      	b.n	8001abe <SD_disk_ioctl+0x23e>
			break;
 8001abc:	bf00      	nop
		}

		DESELECT();
 8001abe:	f7ff fb51 	bl	8001164 <DESELECT>
		SPI_RxByte();
 8001ac2:	f7ff fb93 	bl	80011ec <SPI_RxByte>
	}

	return res;
 8001ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	372c      	adds	r7, #44	; 0x2c
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd90      	pop	{r4, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000000a 	.word	0x2000000a

08001ad8 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001ae0:	4a03      	ldr	r2, [pc, #12]	; (8001af0 <bno055_assignI2C+0x18>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	20000220 	.word	0x20000220

08001af4 <bno055_delay>:
void dps310_assignI2C(I2C_HandleTypeDef *hi2c_device) {
	_dps310_i2c_port = hi2c_device;
}


void bno055_delay(int time) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fe94 	bl	800282c <HAL_Delay>
#endif
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	4603      	mov	r3, r0
 8001b14:	460a      	mov	r2, r1
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	733b      	strb	r3, [r7, #12]
 8001b20:	79bb      	ldrb	r3, [r7, #6]
 8001b22:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001b24:	4b5a      	ldr	r3, [pc, #360]	; (8001c90 <bno055_writeData+0x184>)
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	f107 020c 	add.w	r2, r7, #12
 8001b2c:	230a      	movs	r3, #10
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2302      	movs	r3, #2
 8001b32:	2150      	movs	r1, #80	; 0x50
 8001b34:	f001 fa7a 	bl	800302c <HAL_I2C_Master_Transmit>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 80a0 	beq.w	8001c84 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001b44:	7dfb      	ldrb	r3, [r7, #23]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d103      	bne.n	8001b52 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001b4a:	4852      	ldr	r0, [pc, #328]	; (8001c94 <bno055_writeData+0x188>)
 8001b4c:	f004 f960 	bl	8005e10 <puts>
 8001b50:	e012      	b.n	8001b78 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d103      	bne.n	8001b60 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001b58:	484f      	ldr	r0, [pc, #316]	; (8001c98 <bno055_writeData+0x18c>)
 8001b5a:	f004 f959 	bl	8005e10 <puts>
 8001b5e:	e00b      	b.n	8001b78 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d103      	bne.n	8001b6e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001b66:	484d      	ldr	r0, [pc, #308]	; (8001c9c <bno055_writeData+0x190>)
 8001b68:	f004 f952 	bl	8005e10 <puts>
 8001b6c:	e004      	b.n	8001b78 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	4619      	mov	r1, r3
 8001b72:	484b      	ldr	r0, [pc, #300]	; (8001ca0 <bno055_writeData+0x194>)
 8001b74:	f004 f8c6 	bl	8005d04 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001b78:	4b45      	ldr	r3, [pc, #276]	; (8001c90 <bno055_writeData+0x184>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f001 fdcc 	bl	800371a <HAL_I2C_GetError>
 8001b82:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d07e      	beq.n	8001c88 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d103      	bne.n	8001b98 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001b90:	4844      	ldr	r0, [pc, #272]	; (8001ca4 <bno055_writeData+0x198>)
 8001b92:	f004 f93d 	bl	8005e10 <puts>
 8001b96:	e021      	b.n	8001bdc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d103      	bne.n	8001ba6 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001b9e:	4842      	ldr	r0, [pc, #264]	; (8001ca8 <bno055_writeData+0x19c>)
 8001ba0:	f004 f936 	bl	8005e10 <puts>
 8001ba4:	e01a      	b.n	8001bdc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d103      	bne.n	8001bb4 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001bac:	483f      	ldr	r0, [pc, #252]	; (8001cac <bno055_writeData+0x1a0>)
 8001bae:	f004 f92f 	bl	8005e10 <puts>
 8001bb2:	e013      	b.n	8001bdc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d103      	bne.n	8001bc2 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001bba:	483d      	ldr	r0, [pc, #244]	; (8001cb0 <bno055_writeData+0x1a4>)
 8001bbc:	f004 f928 	bl	8005e10 <puts>
 8001bc0:	e00c      	b.n	8001bdc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	2b10      	cmp	r3, #16
 8001bc6:	d103      	bne.n	8001bd0 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001bc8:	483a      	ldr	r0, [pc, #232]	; (8001cb4 <bno055_writeData+0x1a8>)
 8001bca:	f004 f921 	bl	8005e10 <puts>
 8001bce:	e005      	b.n	8001bdc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b20      	cmp	r3, #32
 8001bd4:	d102      	bne.n	8001bdc <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001bd6:	4838      	ldr	r0, [pc, #224]	; (8001cb8 <bno055_writeData+0x1ac>)
 8001bd8:	f004 f91a 	bl	8005e10 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001bdc:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <bno055_writeData+0x184>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f001 fd8d 	bl	8003700 <HAL_I2C_GetState>
 8001be6:	4603      	mov	r3, r0
 8001be8:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d103      	bne.n	8001bf8 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001bf0:	4832      	ldr	r0, [pc, #200]	; (8001cbc <bno055_writeData+0x1b0>)
 8001bf2:	f004 f90d 	bl	8005e10 <puts>
 8001bf6:	e048      	b.n	8001c8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	2b20      	cmp	r3, #32
 8001bfc:	d103      	bne.n	8001c06 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001bfe:	482f      	ldr	r0, [pc, #188]	; (8001cbc <bno055_writeData+0x1b0>)
 8001c00:	f004 f906 	bl	8005e10 <puts>
 8001c04:	e041      	b.n	8001c8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	2b24      	cmp	r3, #36	; 0x24
 8001c0a:	d103      	bne.n	8001c14 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001c0c:	482c      	ldr	r0, [pc, #176]	; (8001cc0 <bno055_writeData+0x1b4>)
 8001c0e:	f004 f8ff 	bl	8005e10 <puts>
 8001c12:	e03a      	b.n	8001c8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	2b21      	cmp	r3, #33	; 0x21
 8001c18:	d103      	bne.n	8001c22 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001c1a:	482a      	ldr	r0, [pc, #168]	; (8001cc4 <bno055_writeData+0x1b8>)
 8001c1c:	f004 f8f8 	bl	8005e10 <puts>
 8001c20:	e033      	b.n	8001c8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	2b22      	cmp	r3, #34	; 0x22
 8001c26:	d103      	bne.n	8001c30 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001c28:	4827      	ldr	r0, [pc, #156]	; (8001cc8 <bno055_writeData+0x1bc>)
 8001c2a:	f004 f8f1 	bl	8005e10 <puts>
 8001c2e:	e02c      	b.n	8001c8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	2b28      	cmp	r3, #40	; 0x28
 8001c34:	d103      	bne.n	8001c3e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001c36:	4825      	ldr	r0, [pc, #148]	; (8001ccc <bno055_writeData+0x1c0>)
 8001c38:	f004 f8ea 	bl	8005e10 <puts>
 8001c3c:	e025      	b.n	8001c8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	2b29      	cmp	r3, #41	; 0x29
 8001c42:	d103      	bne.n	8001c4c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001c44:	4822      	ldr	r0, [pc, #136]	; (8001cd0 <bno055_writeData+0x1c4>)
 8001c46:	f004 f8e3 	bl	8005e10 <puts>
 8001c4a:	e01e      	b.n	8001c8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	2b2a      	cmp	r3, #42	; 0x2a
 8001c50:	d103      	bne.n	8001c5a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001c52:	4820      	ldr	r0, [pc, #128]	; (8001cd4 <bno055_writeData+0x1c8>)
 8001c54:	f004 f8dc 	bl	8005e10 <puts>
 8001c58:	e017      	b.n	8001c8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	2b60      	cmp	r3, #96	; 0x60
 8001c5e:	d103      	bne.n	8001c68 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001c60:	481d      	ldr	r0, [pc, #116]	; (8001cd8 <bno055_writeData+0x1cc>)
 8001c62:	f004 f8d5 	bl	8005e10 <puts>
 8001c66:	e010      	b.n	8001c8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	2ba0      	cmp	r3, #160	; 0xa0
 8001c6c:	d103      	bne.n	8001c76 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001c6e:	481b      	ldr	r0, [pc, #108]	; (8001cdc <bno055_writeData+0x1d0>)
 8001c70:	f004 f8ce 	bl	8005e10 <puts>
 8001c74:	e009      	b.n	8001c8a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	2be0      	cmp	r3, #224	; 0xe0
 8001c7a:	d106      	bne.n	8001c8a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001c7c:	4818      	ldr	r0, [pc, #96]	; (8001ce0 <bno055_writeData+0x1d4>)
 8001c7e:	f004 f8c7 	bl	8005e10 <puts>
 8001c82:	e002      	b.n	8001c8a <bno055_writeData+0x17e>
    return;
 8001c84:	bf00      	nop
 8001c86:	e000      	b.n	8001c8a <bno055_writeData+0x17e>
    return;
 8001c88:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000220 	.word	0x20000220
 8001c94:	080084f4 	.word	0x080084f4
 8001c98:	08008518 	.word	0x08008518
 8001c9c:	08008540 	.word	0x08008540
 8001ca0:	08008564 	.word	0x08008564
 8001ca4:	0800857c 	.word	0x0800857c
 8001ca8:	08008590 	.word	0x08008590
 8001cac:	080085a4 	.word	0x080085a4
 8001cb0:	080085b8 	.word	0x080085b8
 8001cb4:	080085cc 	.word	0x080085cc
 8001cb8:	080085e0 	.word	0x080085e0
 8001cbc:	080085f8 	.word	0x080085f8
 8001cc0:	08008610 	.word	0x08008610
 8001cc4:	08008624 	.word	0x08008624
 8001cc8:	0800863c 	.word	0x0800863c
 8001ccc:	08008654 	.word	0x08008654
 8001cd0:	0800866c 	.word	0x0800866c
 8001cd4:	0800868c 	.word	0x0800868c
 8001cd8:	080086ac 	.word	0x080086ac
 8001cdc:	080086c4 	.word	0x080086c4
 8001ce0:	080086dc 	.word	0x080086dc

08001ce4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <bno055_readData+0x40>)
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	1dfa      	adds	r2, r7, #7
 8001cfa:	2364      	movs	r3, #100	; 0x64
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	2150      	movs	r1, #80	; 0x50
 8001d02:	f001 f993 	bl	800302c <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <bno055_readData+0x40>)
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	79bb      	ldrb	r3, [r7, #6]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	2264      	movs	r2, #100	; 0x64
 8001d10:	9200      	str	r2, [sp, #0]
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	2150      	movs	r1, #80	; 0x50
 8001d16:	f001 fa87 	bl	8003228 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000220 	.word	0x20000220

08001d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d2c:	f5ad 5d9f 	sub.w	sp, sp, #5088	; 0x13e0
 8001d30:	b081      	sub	sp, #4
 8001d32:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */
	uint8_t message1[966] = {'\0'};
 8001d34:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8001d38:	f103 0308 	add.w	r3, r3, #8
 8001d3c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	3304      	adds	r3, #4
 8001d46:	f240 32c2 	movw	r2, #962	; 0x3c2
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 fb71 	bl	8005434 <memset>
	uint8_t message2[966] = {'\0'};
 8001d52:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8001d56:	f103 0308 	add.w	r3, r3, #8
 8001d5a:	f5a3 63f6 	sub.w	r3, r3, #1968	; 0x7b0
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	3304      	adds	r3, #4
 8001d64:	f240 32c2 	movw	r2, #962	; 0x3c2
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 fb62 	bl	8005434 <memset>
	uint8_t message3[966] = {'\0'};
 8001d70:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8001d74:	f103 0308 	add.w	r3, r3, #8
 8001d78:	f6a3 3378 	subw	r3, r3, #2936	; 0xb78
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	3304      	adds	r3, #4
 8001d82:	f240 32c2 	movw	r2, #962	; 0x3c2
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 fb53 	bl	8005434 <memset>
	uint8_t message4[966] = {'\0'};
 8001d8e:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8001d92:	f103 0308 	add.w	r3, r3, #8
 8001d96:	f5a3 6374 	sub.w	r3, r3, #3904	; 0xf40
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	f240 32c2 	movw	r2, #962	; 0x3c2
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f003 fb44 	bl	8005434 <memset>
	char string[966] = {'\0'};
 8001dac:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001db0:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	3304      	adds	r3, #4
 8001dba:	f240 32c2 	movw	r2, #962	; 0x3c2
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 fb37 	bl	8005434 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dc6:	f000 fccf 	bl	8002768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dca:	f000 f919 	bl	8002000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dce:	f000 fa19 	bl	8002204 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001dd2:	f000 f95b 	bl	800208c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001dd6:	f000 f9eb 	bl	80021b0 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001dda:	f000 f9b3 	bl	8002144 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001dde:	f003 fa2b 	bl	8005238 <MX_FATFS_Init>
  MX_I2C2_Init();
 8001de2:	f000 f981 	bl	80020e8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 8001de6:	4882      	ldr	r0, [pc, #520]	; (8001ff0 <main+0x2c8>)
 8001de8:	f7ff fe76 	bl	8001ad8 <bno055_assignI2C>
  bno055_setup();
 8001dec:	f7fe fe8c 	bl	8000b08 <bno055_setup>
  bno055_setOperationModeNDOF();
 8001df0:	f7fe fe77 	bl	8000ae2 <bno055_setOperationModeNDOF>

  bno055_setOperationModeNDOF(); // set in work mode again
  */

  // Initializing a new origin based on object's current location
  HAL_Delay(100);
 8001df4:	2064      	movs	r0, #100	; 0x64
 8001df6:	f000 fd19 	bl	800282c <HAL_Delay>
  bno055_vector_t offset = bno055_getVectorQuaternion();
 8001dfa:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001dfe:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe ffc0 	bl	8000d88 <bno055_getVectorQuaternion>
  bno055_vector_t offset_conj = quaternion_conjugate(offset);
 8001e08:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001e0c:	f5a3 7c52 	sub.w	ip, r3, #840	; 0x348
 8001e10:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001e14:	f5a3 764a 	sub.w	r6, r3, #808	; 0x328
 8001e18:	466d      	mov	r5, sp
 8001e1a:	f106 0408 	add.w	r4, r6, #8
 8001e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e26:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e2a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001e2e:	4660      	mov	r0, ip
 8001e30:	f7ff f803 	bl	8000e3a <quaternion_conjugate>
  bno055_vector_t offset_norm = quaternion_normalize(offset_conj);
 8001e34:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001e38:	f5a3 7c5a 	sub.w	ip, r3, #872	; 0x368
 8001e3c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001e40:	f5a3 7652 	sub.w	r6, r3, #840	; 0x348
 8001e44:	466d      	mov	r5, sp
 8001e46:	f106 0408 	add.w	r4, r6, #8
 8001e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e52:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e56:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001e5a:	4660      	mov	r0, ip
 8001e5c:	f7ff f821 	bl	8000ea2 <quaternion_normalize>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_11)){
 8001e60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e64:	4863      	ldr	r0, [pc, #396]	; (8001ff4 <main+0x2cc>)
 8001e66:	f000 ff6d 	bl	8002d44 <HAL_GPIO_ReadPin>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d062      	beq.n	8001f36 <main+0x20e>

          HAL_Delay(500); // Delay for button debouncing
 8001e70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e74:	f000 fcda 	bl	800282c <HAL_Delay>

          offset = bno055_getVectorQuaternion();
 8001e78:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001e7c:	f5a3 744a 	sub.w	r4, r3, #808	; 0x328
 8001e80:	f107 0308 	add.w	r3, r7, #8
 8001e84:	3b08      	subs	r3, #8
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe ff7e 	bl	8000d88 <bno055_getVectorQuaternion>
 8001e8c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001e90:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001e94:	461d      	mov	r5, r3
 8001e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          offset_conj = quaternion_conjugate(offset);
 8001ea2:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001ea6:	f5a3 7852 	sub.w	r8, r3, #840	; 0x348
 8001eaa:	f107 0608 	add.w	r6, r7, #8
 8001eae:	3e08      	subs	r6, #8
 8001eb0:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001eb4:	f5a3 7c4a 	sub.w	ip, r3, #808	; 0x328
 8001eb8:	466d      	mov	r5, sp
 8001eba:	f10c 0408 	add.w	r4, ip, #8
 8001ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eca:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8001ece:	4630      	mov	r0, r6
 8001ed0:	f7fe ffb3 	bl	8000e3a <quaternion_conjugate>
 8001ed4:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001ed8:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001edc:	4644      	mov	r4, r8
 8001ede:	461d      	mov	r5, r3
 8001ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ee4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ee8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          offset_norm = quaternion_normalize(offset_conj);
 8001eec:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001ef0:	f5a3 785a 	sub.w	r8, r3, #872	; 0x368
 8001ef4:	f107 0608 	add.w	r6, r7, #8
 8001ef8:	3e08      	subs	r6, #8
 8001efa:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001efe:	f5a3 7c52 	sub.w	ip, r3, #840	; 0x348
 8001f02:	466d      	mov	r5, sp
 8001f04:	f10c 0408 	add.w	r4, ip, #8
 8001f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f10:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f14:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8001f18:	4630      	mov	r0, r6
 8001f1a:	f7fe ffc2 	bl	8000ea2 <quaternion_normalize>
 8001f1e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001f22:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001f26:	4644      	mov	r4, r8
 8001f28:	461d      	mov	r5, r3
 8001f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }


	  bno055_vector_t v = quaternion_multiply(offset_norm, bno055_getVectorQuaternion());
 8001f36:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8001f3a:	f103 0308 	add.w	r3, r3, #8
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe ff22 	bl	8000d88 <bno055_getVectorQuaternion>
 8001f44:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001f48:	f5a3 7c62 	sub.w	ip, r3, #904	; 0x388
 8001f4c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001f50:	f5a3 765a 	sub.w	r6, r3, #872	; 0x368
 8001f54:	ad06      	add	r5, sp, #24
 8001f56:	f507 549c 	add.w	r4, r7, #4992	; 0x1380
 8001f5a:	f104 0408 	add.w	r4, r4, #8
 8001f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f66:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001f6a:	466d      	mov	r5, sp
 8001f6c:	f106 0408 	add.w	r4, r6, #8
 8001f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f78:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f7c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001f80:	4660      	mov	r0, ip
 8001f82:	f7fe ffdd 	bl	8000f40 <quaternion_multiply>
	  //v = quaternion_to_euler(v);
	  //sprintf((char*)message2,"pitch = %.2f\r\n", v.x);
	  sprintf((char*)message2,"%.2f,%.2f,%.2f,%.2f\r\n", v.w, v.x, v.y, v.z);
 8001f86:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001f8a:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8001f8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001f92:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001f96:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8001f9a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f9e:	f507 716a 	add.w	r1, r7, #936	; 0x3a8
 8001fa2:	f5a1 7162 	sub.w	r1, r1, #904	; 0x388
 8001fa6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001faa:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 8001fae:	f5a4 7462 	sub.w	r4, r4, #904	; 0x388
 8001fb2:	f104 0518 	add.w	r5, r4, #24
 8001fb6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8001fba:	f607 36f8 	addw	r6, r7, #3064	; 0xbf8
 8001fbe:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001fc6:	e9cd 2300 	strd	r2, r3, [sp]
 8001fca:	4642      	mov	r2, r8
 8001fcc:	464b      	mov	r3, r9
 8001fce:	490a      	ldr	r1, [pc, #40]	; (8001ff8 <main+0x2d0>)
 8001fd0:	4630      	mov	r0, r6
 8001fd2:	f003 ff25 	bl	8005e20 <siprintf>
	  HAL_UART_Transmit(&huart1, message2, sizeof(message2), 100);
 8001fd6:	f607 31f8 	addw	r1, r7, #3064	; 0xbf8
 8001fda:	2364      	movs	r3, #100	; 0x64
 8001fdc:	f240 32c6 	movw	r2, #966	; 0x3c6
 8001fe0:	4806      	ldr	r0, [pc, #24]	; (8001ffc <main+0x2d4>)
 8001fe2:	f002 ffa9 	bl	8004f38 <HAL_UART_Transmit>

	  /*bno055_vector_t v = bno055_getVectorGyroscope();
	  sprintf((char*)message4, "%.2f %.2f %.2f\r\n", v.x, v.y, v.z);
	  HAL_UART_Transmit(&huart1, message4, sizeof(message4), 100);*/

	  HAL_Delay(100);
 8001fe6:	2064      	movs	r0, #100	; 0x64
 8001fe8:	f000 fc20 	bl	800282c <HAL_Delay>
  {
 8001fec:	e738      	b.n	8001e60 <main+0x138>
 8001fee:	bf00      	nop
 8001ff0:	20000224 	.word	0x20000224
 8001ff4:	40010800 	.word	0x40010800
 8001ff8:	080086f4 	.word	0x080086f4
 8001ffc:	20000324 	.word	0x20000324

08002000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b090      	sub	sp, #64	; 0x40
 8002004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002006:	f107 0318 	add.w	r3, r7, #24
 800200a:	2228      	movs	r2, #40	; 0x28
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f003 fa10 	bl	8005434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002022:	2301      	movs	r3, #1
 8002024:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800202a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002030:	2301      	movs	r3, #1
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002034:	2302      	movs	r3, #2
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800203c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800203e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002042:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002044:	f107 0318 	add.w	r3, r7, #24
 8002048:	4618      	mov	r0, r3
 800204a:	f001 fef7 	bl	8003e3c <HAL_RCC_OscConfig>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002054:	f000 f930 	bl	80022b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002058:	230f      	movs	r3, #15
 800205a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800205c:	2302      	movs	r3, #2
 800205e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002068:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	2102      	movs	r1, #2
 8002072:	4618      	mov	r0, r3
 8002074:	f002 f964 	bl	8004340 <HAL_RCC_ClockConfig>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800207e:	f000 f91b 	bl	80022b8 <Error_Handler>
  }
}
 8002082:	bf00      	nop
 8002084:	3740      	adds	r7, #64	; 0x40
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <MX_I2C1_Init+0x50>)
 8002092:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <MX_I2C1_Init+0x54>)
 8002094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <MX_I2C1_Init+0x50>)
 8002098:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <MX_I2C1_Init+0x58>)
 800209a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <MX_I2C1_Init+0x50>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <MX_I2C1_Init+0x50>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <MX_I2C1_Init+0x50>)
 80020aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020b0:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <MX_I2C1_Init+0x50>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <MX_I2C1_Init+0x50>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <MX_I2C1_Init+0x50>)
 80020be:	2200      	movs	r2, #0
 80020c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <MX_I2C1_Init+0x50>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020c8:	4804      	ldr	r0, [pc, #16]	; (80020dc <MX_I2C1_Init+0x50>)
 80020ca:	f000 fe6b 	bl	8002da4 <HAL_I2C_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020d4:	f000 f8f0 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000224 	.word	0x20000224
 80020e0:	40005400 	.word	0x40005400
 80020e4:	000186a0 	.word	0x000186a0

080020e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <MX_I2C2_Init+0x50>)
 80020ee:	4a13      	ldr	r2, [pc, #76]	; (800213c <MX_I2C2_Init+0x54>)
 80020f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <MX_I2C2_Init+0x50>)
 80020f4:	4a12      	ldr	r2, [pc, #72]	; (8002140 <MX_I2C2_Init+0x58>)
 80020f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020f8:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <MX_I2C2_Init+0x50>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <MX_I2C2_Init+0x50>)
 8002100:	2200      	movs	r2, #0
 8002102:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <MX_I2C2_Init+0x50>)
 8002106:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800210a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <MX_I2C2_Init+0x50>)
 800210e:	2200      	movs	r2, #0
 8002110:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <MX_I2C2_Init+0x50>)
 8002114:	2200      	movs	r2, #0
 8002116:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002118:	4b07      	ldr	r3, [pc, #28]	; (8002138 <MX_I2C2_Init+0x50>)
 800211a:	2200      	movs	r2, #0
 800211c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <MX_I2C2_Init+0x50>)
 8002120:	2200      	movs	r2, #0
 8002122:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002124:	4804      	ldr	r0, [pc, #16]	; (8002138 <MX_I2C2_Init+0x50>)
 8002126:	f000 fe3d 	bl	8002da4 <HAL_I2C_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002130:	f000 f8c2 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000278 	.word	0x20000278
 800213c:	40005800 	.word	0x40005800
 8002140:	000186a0 	.word	0x000186a0

08002144 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002148:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <MX_SPI2_Init+0x64>)
 800214a:	4a18      	ldr	r2, [pc, #96]	; (80021ac <MX_SPI2_Init+0x68>)
 800214c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <MX_SPI2_Init+0x64>)
 8002150:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002154:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <MX_SPI2_Init+0x64>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <MX_SPI2_Init+0x64>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <MX_SPI2_Init+0x64>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <MX_SPI2_Init+0x64>)
 800216a:	2200      	movs	r2, #0
 800216c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <MX_SPI2_Init+0x64>)
 8002170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002174:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <MX_SPI2_Init+0x64>)
 8002178:	2200      	movs	r2, #0
 800217a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800217c:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <MX_SPI2_Init+0x64>)
 800217e:	2200      	movs	r2, #0
 8002180:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <MX_SPI2_Init+0x64>)
 8002184:	2200      	movs	r2, #0
 8002186:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002188:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <MX_SPI2_Init+0x64>)
 800218a:	2200      	movs	r2, #0
 800218c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <MX_SPI2_Init+0x64>)
 8002190:	220a      	movs	r2, #10
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002194:	4804      	ldr	r0, [pc, #16]	; (80021a8 <MX_SPI2_Init+0x64>)
 8002196:	f002 fa61 	bl	800465c <HAL_SPI_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80021a0:	f000 f88a 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200002cc 	.word	0x200002cc
 80021ac:	40003800 	.word	0x40003800

080021b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <MX_USART1_UART_Init+0x4c>)
 80021b6:	4a12      	ldr	r2, [pc, #72]	; (8002200 <MX_USART1_UART_Init+0x50>)
 80021b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <MX_USART1_UART_Init+0x4c>)
 80021bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <MX_USART1_UART_Init+0x4c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <MX_USART1_UART_Init+0x4c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021ce:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <MX_USART1_UART_Init+0x4c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <MX_USART1_UART_Init+0x4c>)
 80021d6:	220c      	movs	r2, #12
 80021d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <MX_USART1_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <MX_USART1_UART_Init+0x4c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021e6:	4805      	ldr	r0, [pc, #20]	; (80021fc <MX_USART1_UART_Init+0x4c>)
 80021e8:	f002 fe56 	bl	8004e98 <HAL_UART_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021f2:	f000 f861 	bl	80022b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000324 	.word	0x20000324
 8002200:	40013800 	.word	0x40013800

08002204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002218:	4b24      	ldr	r3, [pc, #144]	; (80022ac <MX_GPIO_Init+0xa8>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	4a23      	ldr	r2, [pc, #140]	; (80022ac <MX_GPIO_Init+0xa8>)
 800221e:	f043 0320 	orr.w	r3, r3, #32
 8002222:	6193      	str	r3, [r2, #24]
 8002224:	4b21      	ldr	r3, [pc, #132]	; (80022ac <MX_GPIO_Init+0xa8>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <MX_GPIO_Init+0xa8>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <MX_GPIO_Init+0xa8>)
 8002236:	f043 0308 	orr.w	r3, r3, #8
 800223a:	6193      	str	r3, [r2, #24]
 800223c:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <MX_GPIO_Init+0xa8>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002248:	4b18      	ldr	r3, [pc, #96]	; (80022ac <MX_GPIO_Init+0xa8>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4a17      	ldr	r2, [pc, #92]	; (80022ac <MX_GPIO_Init+0xa8>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	6193      	str	r3, [r2, #24]
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <MX_GPIO_Init+0xa8>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002260:	2200      	movs	r2, #0
 8002262:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002266:	4812      	ldr	r0, [pc, #72]	; (80022b0 <MX_GPIO_Init+0xac>)
 8002268:	f000 fd83 	bl	8002d72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800226c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002272:	2301      	movs	r3, #1
 8002274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2302      	movs	r3, #2
 800227c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227e:	f107 0310 	add.w	r3, r7, #16
 8002282:	4619      	mov	r1, r3
 8002284:	480a      	ldr	r0, [pc, #40]	; (80022b0 <MX_GPIO_Init+0xac>)
 8002286:	f000 fbd9 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800228a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800228e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f107 0310 	add.w	r3, r7, #16
 800229c:	4619      	mov	r1, r3
 800229e:	4805      	ldr	r0, [pc, #20]	; (80022b4 <MX_GPIO_Init+0xb0>)
 80022a0:	f000 fbcc 	bl	8002a3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022a4:	bf00      	nop
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40010c00 	.word	0x40010c00
 80022b4:	40010800 	.word	0x40010800

080022b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022bc:	b672      	cpsid	i
}
 80022be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <Error_Handler+0x8>
	...

080022c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_MspInit+0x40>)
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <HAL_MspInit+0x40>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6193      	str	r3, [r2, #24]
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_MspInit+0x40>)
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_MspInit+0x40>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	4a07      	ldr	r2, [pc, #28]	; (8002304 <HAL_MspInit+0x40>)
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ec:	61d3      	str	r3, [r2, #28]
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_MspInit+0x40>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	40021000 	.word	0x40021000

08002308 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0318 	add.w	r3, r7, #24
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a2b      	ldr	r2, [pc, #172]	; (80023d0 <HAL_I2C_MspInit+0xc8>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d124      	bne.n	8002372 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002328:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <HAL_I2C_MspInit+0xcc>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <HAL_I2C_MspInit+0xcc>)
 800232e:	f043 0308 	orr.w	r3, r3, #8
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_I2C_MspInit+0xcc>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002340:	23c0      	movs	r3, #192	; 0xc0
 8002342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002344:	2312      	movs	r3, #18
 8002346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002348:	2303      	movs	r3, #3
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234c:	f107 0318 	add.w	r3, r7, #24
 8002350:	4619      	mov	r1, r3
 8002352:	4821      	ldr	r0, [pc, #132]	; (80023d8 <HAL_I2C_MspInit+0xd0>)
 8002354:	f000 fb72 	bl	8002a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <HAL_I2C_MspInit+0xcc>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <HAL_I2C_MspInit+0xcc>)
 800235e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002362:	61d3      	str	r3, [r2, #28]
 8002364:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <HAL_I2C_MspInit+0xcc>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002370:	e029      	b.n	80023c6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a19      	ldr	r2, [pc, #100]	; (80023dc <HAL_I2C_MspInit+0xd4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d124      	bne.n	80023c6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <HAL_I2C_MspInit+0xcc>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	4a14      	ldr	r2, [pc, #80]	; (80023d4 <HAL_I2C_MspInit+0xcc>)
 8002382:	f043 0308 	orr.w	r3, r3, #8
 8002386:	6193      	str	r3, [r2, #24]
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_I2C_MspInit+0xcc>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002394:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800239a:	2312      	movs	r3, #18
 800239c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800239e:	2303      	movs	r3, #3
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a2:	f107 0318 	add.w	r3, r7, #24
 80023a6:	4619      	mov	r1, r3
 80023a8:	480b      	ldr	r0, [pc, #44]	; (80023d8 <HAL_I2C_MspInit+0xd0>)
 80023aa:	f000 fb47 	bl	8002a3c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_I2C_MspInit+0xcc>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <HAL_I2C_MspInit+0xcc>)
 80023b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023b8:	61d3      	str	r3, [r2, #28]
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_I2C_MspInit+0xcc>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
}
 80023c6:	bf00      	nop
 80023c8:	3728      	adds	r7, #40	; 0x28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40005400 	.word	0x40005400
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40010c00 	.word	0x40010c00
 80023dc:	40005800 	.word	0x40005800

080023e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a1c      	ldr	r2, [pc, #112]	; (800246c <HAL_SPI_MspInit+0x8c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d131      	bne.n	8002464 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <HAL_SPI_MspInit+0x90>)
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	4a1a      	ldr	r2, [pc, #104]	; (8002470 <HAL_SPI_MspInit+0x90>)
 8002406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800240a:	61d3      	str	r3, [r2, #28]
 800240c:	4b18      	ldr	r3, [pc, #96]	; (8002470 <HAL_SPI_MspInit+0x90>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002418:	4b15      	ldr	r3, [pc, #84]	; (8002470 <HAL_SPI_MspInit+0x90>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	4a14      	ldr	r2, [pc, #80]	; (8002470 <HAL_SPI_MspInit+0x90>)
 800241e:	f043 0308 	orr.w	r3, r3, #8
 8002422:	6193      	str	r3, [r2, #24]
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_SPI_MspInit+0x90>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002430:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002434:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800243a:	2303      	movs	r3, #3
 800243c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	4619      	mov	r1, r3
 8002444:	480b      	ldr	r0, [pc, #44]	; (8002474 <HAL_SPI_MspInit+0x94>)
 8002446:	f000 faf9 	bl	8002a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800244a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800244e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002458:	f107 0310 	add.w	r3, r7, #16
 800245c:	4619      	mov	r1, r3
 800245e:	4805      	ldr	r0, [pc, #20]	; (8002474 <HAL_SPI_MspInit+0x94>)
 8002460:	f000 faec 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002464:	bf00      	nop
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40003800 	.word	0x40003800
 8002470:	40021000 	.word	0x40021000
 8002474:	40010c00 	.word	0x40010c00

08002478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 0310 	add.w	r3, r7, #16
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <HAL_UART_MspInit+0x8c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d131      	bne.n	80024fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_UART_MspInit+0x90>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	4a1a      	ldr	r2, [pc, #104]	; (8002508 <HAL_UART_MspInit+0x90>)
 800249e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a2:	6193      	str	r3, [r2, #24]
 80024a4:	4b18      	ldr	r3, [pc, #96]	; (8002508 <HAL_UART_MspInit+0x90>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b0:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_UART_MspInit+0x90>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <HAL_UART_MspInit+0x90>)
 80024b6:	f043 0304 	orr.w	r3, r3, #4
 80024ba:	6193      	str	r3, [r2, #24]
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_UART_MspInit+0x90>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024d2:	2303      	movs	r3, #3
 80024d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d6:	f107 0310 	add.w	r3, r7, #16
 80024da:	4619      	mov	r1, r3
 80024dc:	480b      	ldr	r0, [pc, #44]	; (800250c <HAL_UART_MspInit+0x94>)
 80024de:	f000 faad 	bl	8002a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	f107 0310 	add.w	r3, r7, #16
 80024f4:	4619      	mov	r1, r3
 80024f6:	4805      	ldr	r0, [pc, #20]	; (800250c <HAL_UART_MspInit+0x94>)
 80024f8:	f000 faa0 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024fc:	bf00      	nop
 80024fe:	3720      	adds	r7, #32
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40013800 	.word	0x40013800
 8002508:	40021000 	.word	0x40021000
 800250c:	40010800 	.word	0x40010800

08002510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002514:	e7fe      	b.n	8002514 <NMI_Handler+0x4>

08002516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800251a:	e7fe      	b.n	800251a <HardFault_Handler+0x4>

0800251c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002520:	e7fe      	b.n	8002520 <MemManage_Handler+0x4>

08002522 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002526:	e7fe      	b.n	8002526 <BusFault_Handler+0x4>

08002528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800252c:	e7fe      	b.n	800252c <UsageFault_Handler+0x4>

0800252e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
	...

08002554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
		if(Timer1 > 0)
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <SysTick_Handler+0x34>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <SysTick_Handler+0x18>
			Timer1--;
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <SysTick_Handler+0x34>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	4b07      	ldr	r3, [pc, #28]	; (8002588 <SysTick_Handler+0x34>)
 800256a:	801a      	strh	r2, [r3, #0]
		if(Timer2 > 0)
 800256c:	4b07      	ldr	r3, [pc, #28]	; (800258c <SysTick_Handler+0x38>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <SysTick_Handler+0x2c>
			Timer2--;
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <SysTick_Handler+0x38>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <SysTick_Handler+0x38>)
 800257e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002580:	f000 f938 	bl	80027f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000218 	.word	0x20000218
 800258c:	2000021a 	.word	0x2000021a

08002590 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return 1;
 8002594:	2301      	movs	r3, #1
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <_kill>:

int _kill(int pid, int sig)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025a8:	f002 ff0c 	bl	80053c4 <__errno>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2216      	movs	r2, #22
 80025b0:	601a      	str	r2, [r3, #0]
  return -1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <_exit>:

void _exit (int status)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025c6:	f04f 31ff 	mov.w	r1, #4294967295
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ffe7 	bl	800259e <_kill>
  while (1) {}    /* Make sure we hang here */
 80025d0:	e7fe      	b.n	80025d0 <_exit+0x12>

080025d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b086      	sub	sp, #24
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	e00a      	b.n	80025fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025e4:	f3af 8000 	nop.w
 80025e8:	4601      	mov	r1, r0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	60ba      	str	r2, [r7, #8]
 80025f0:	b2ca      	uxtb	r2, r1
 80025f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3301      	adds	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	dbf0      	blt.n	80025e4 <_read+0x12>
  }

  return len;
 8002602:	687b      	ldr	r3, [r7, #4]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e009      	b.n	8002632 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	60ba      	str	r2, [r7, #8]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3301      	adds	r3, #1
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	dbf1      	blt.n	800261e <_write+0x12>
  }
  return len;
 800263a:	687b      	ldr	r3, [r7, #4]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <_close>:

int _close(int file)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800264c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800266a:	605a      	str	r2, [r3, #4]
  return 0;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <_isatty>:

int _isatty(int file)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002680:	2301      	movs	r3, #1
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <_sbrk+0x5c>)
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <_sbrk+0x60>)
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <_sbrk+0x64>)
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <_sbrk+0x68>)
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <_sbrk+0x64>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d207      	bcs.n	80026e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d4:	f002 fe76 	bl	80053c4 <__errno>
 80026d8:	4603      	mov	r3, r0
 80026da:	220c      	movs	r2, #12
 80026dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	e009      	b.n	80026f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	4a05      	ldr	r2, [pc, #20]	; (8002708 <_sbrk+0x64>)
 80026f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20005000 	.word	0x20005000
 8002704:	00000400 	.word	0x00000400
 8002708:	2000036c 	.word	0x2000036c
 800270c:	20000398 	.word	0x20000398

08002710 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800271c:	f7ff fff8 	bl	8002710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002720:	480b      	ldr	r0, [pc, #44]	; (8002750 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002722:	490c      	ldr	r1, [pc, #48]	; (8002754 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002724:	4a0c      	ldr	r2, [pc, #48]	; (8002758 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002728:	e002      	b.n	8002730 <LoopCopyDataInit>

0800272a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800272c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272e:	3304      	adds	r3, #4

08002730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002734:	d3f9      	bcc.n	800272a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002736:	4a09      	ldr	r2, [pc, #36]	; (800275c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002738:	4c09      	ldr	r4, [pc, #36]	; (8002760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800273c:	e001      	b.n	8002742 <LoopFillZerobss>

0800273e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002740:	3204      	adds	r2, #4

08002742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002744:	d3fb      	bcc.n	800273e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002746:	f002 fe43 	bl	80053d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800274a:	f7ff faed 	bl	8001d28 <main>
  bx lr
 800274e:	4770      	bx	lr
  ldr r0, =_sdata
 8002750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002754:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002758:	08008b1c 	.word	0x08008b1c
  ldr r2, =_sbss
 800275c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002760:	20000398 	.word	0x20000398

08002764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002764:	e7fe      	b.n	8002764 <ADC1_2_IRQHandler>
	...

08002768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <HAL_Init+0x28>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a07      	ldr	r2, [pc, #28]	; (8002790 <HAL_Init+0x28>)
 8002772:	f043 0310 	orr.w	r3, r3, #16
 8002776:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002778:	2003      	movs	r0, #3
 800277a:	f000 f92b 	bl	80029d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800277e:	200f      	movs	r0, #15
 8002780:	f000 f808 	bl	8002794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002784:	f7ff fd9e 	bl	80022c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40022000 	.word	0x40022000

08002794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800279c:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_InitTick+0x54>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_InitTick+0x58>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	4619      	mov	r1, r3
 80027a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f935 	bl	8002a22 <HAL_SYSTICK_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e00e      	b.n	80027e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b0f      	cmp	r3, #15
 80027c6:	d80a      	bhi.n	80027de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c8:	2200      	movs	r2, #0
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	f000 f90b 	bl	80029ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d4:	4a06      	ldr	r2, [pc, #24]	; (80027f0 <HAL_InitTick+0x5c>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	2000000c 	.word	0x2000000c
 80027ec:	20000014 	.word	0x20000014
 80027f0:	20000010 	.word	0x20000010

080027f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_IncTick+0x1c>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_IncTick+0x20>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4413      	add	r3, r2
 8002804:	4a03      	ldr	r2, [pc, #12]	; (8002814 <HAL_IncTick+0x20>)
 8002806:	6013      	str	r3, [r2, #0]
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	20000014 	.word	0x20000014
 8002814:	20000370 	.word	0x20000370

08002818 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return uwTick;
 800281c:	4b02      	ldr	r3, [pc, #8]	; (8002828 <HAL_GetTick+0x10>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	20000370 	.word	0x20000370

0800282c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002834:	f7ff fff0 	bl	8002818 <HAL_GetTick>
 8002838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d005      	beq.n	8002852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002846:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <HAL_Delay+0x44>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002852:	bf00      	nop
 8002854:	f7ff ffe0 	bl	8002818 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	429a      	cmp	r2, r3
 8002862:	d8f7      	bhi.n	8002854 <HAL_Delay+0x28>
  {
  }
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000014 	.word	0x20000014

08002874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002890:	4013      	ands	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800289c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a6:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <__NVIC_SetPriorityGrouping+0x44>)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	60d3      	str	r3, [r2, #12]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <__NVIC_GetPriorityGrouping+0x18>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	f003 0307 	and.w	r3, r3, #7
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	6039      	str	r1, [r7, #0]
 80028e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	db0a      	blt.n	8002902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	490c      	ldr	r1, [pc, #48]	; (8002924 <__NVIC_SetPriority+0x4c>)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	0112      	lsls	r2, r2, #4
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	440b      	add	r3, r1
 80028fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002900:	e00a      	b.n	8002918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4908      	ldr	r1, [pc, #32]	; (8002928 <__NVIC_SetPriority+0x50>)
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	3b04      	subs	r3, #4
 8002910:	0112      	lsls	r2, r2, #4
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	440b      	add	r3, r1
 8002916:	761a      	strb	r2, [r3, #24]
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	e000e100 	.word	0xe000e100
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800292c:	b480      	push	{r7}
 800292e:	b089      	sub	sp, #36	; 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f1c3 0307 	rsb	r3, r3, #7
 8002946:	2b04      	cmp	r3, #4
 8002948:	bf28      	it	cs
 800294a:	2304      	movcs	r3, #4
 800294c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3304      	adds	r3, #4
 8002952:	2b06      	cmp	r3, #6
 8002954:	d902      	bls.n	800295c <NVIC_EncodePriority+0x30>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3b03      	subs	r3, #3
 800295a:	e000      	b.n	800295e <NVIC_EncodePriority+0x32>
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	f04f 32ff 	mov.w	r2, #4294967295
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43da      	mvns	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	401a      	ands	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002974:	f04f 31ff 	mov.w	r1, #4294967295
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	43d9      	mvns	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	4313      	orrs	r3, r2
         );
}
 8002986:	4618      	mov	r0, r3
 8002988:	3724      	adds	r7, #36	; 0x24
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3b01      	subs	r3, #1
 800299c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029a0:	d301      	bcc.n	80029a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00f      	b.n	80029c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <SysTick_Config+0x40>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ae:	210f      	movs	r1, #15
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295
 80029b4:	f7ff ff90 	bl	80028d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <SysTick_Config+0x40>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029be:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <SysTick_Config+0x40>)
 80029c0:	2207      	movs	r2, #7
 80029c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	e000e010 	.word	0xe000e010

080029d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff ff49 	bl	8002874 <__NVIC_SetPriorityGrouping>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029fc:	f7ff ff5e 	bl	80028bc <__NVIC_GetPriorityGrouping>
 8002a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	6978      	ldr	r0, [r7, #20]
 8002a08:	f7ff ff90 	bl	800292c <NVIC_EncodePriority>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff5f 	bl	80028d8 <__NVIC_SetPriority>
}
 8002a1a:	bf00      	nop
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ffb0 	bl	8002990 <SysTick_Config>
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b08b      	sub	sp, #44	; 0x2c
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a46:	2300      	movs	r3, #0
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4e:	e169      	b.n	8002d24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a50:	2201      	movs	r2, #1
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f040 8158 	bne.w	8002d1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4a9a      	ldr	r2, [pc, #616]	; (8002cdc <HAL_GPIO_Init+0x2a0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d05e      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002a78:	4a98      	ldr	r2, [pc, #608]	; (8002cdc <HAL_GPIO_Init+0x2a0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d875      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002a7e:	4a98      	ldr	r2, [pc, #608]	; (8002ce0 <HAL_GPIO_Init+0x2a4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d058      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002a84:	4a96      	ldr	r2, [pc, #600]	; (8002ce0 <HAL_GPIO_Init+0x2a4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d86f      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002a8a:	4a96      	ldr	r2, [pc, #600]	; (8002ce4 <HAL_GPIO_Init+0x2a8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d052      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002a90:	4a94      	ldr	r2, [pc, #592]	; (8002ce4 <HAL_GPIO_Init+0x2a8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d869      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002a96:	4a94      	ldr	r2, [pc, #592]	; (8002ce8 <HAL_GPIO_Init+0x2ac>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d04c      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002a9c:	4a92      	ldr	r2, [pc, #584]	; (8002ce8 <HAL_GPIO_Init+0x2ac>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d863      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002aa2:	4a92      	ldr	r2, [pc, #584]	; (8002cec <HAL_GPIO_Init+0x2b0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d046      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
 8002aa8:	4a90      	ldr	r2, [pc, #576]	; (8002cec <HAL_GPIO_Init+0x2b0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d85d      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002aae:	2b12      	cmp	r3, #18
 8002ab0:	d82a      	bhi.n	8002b08 <HAL_GPIO_Init+0xcc>
 8002ab2:	2b12      	cmp	r3, #18
 8002ab4:	d859      	bhi.n	8002b6a <HAL_GPIO_Init+0x12e>
 8002ab6:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <HAL_GPIO_Init+0x80>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002b37 	.word	0x08002b37
 8002ac0:	08002b11 	.word	0x08002b11
 8002ac4:	08002b23 	.word	0x08002b23
 8002ac8:	08002b65 	.word	0x08002b65
 8002acc:	08002b6b 	.word	0x08002b6b
 8002ad0:	08002b6b 	.word	0x08002b6b
 8002ad4:	08002b6b 	.word	0x08002b6b
 8002ad8:	08002b6b 	.word	0x08002b6b
 8002adc:	08002b6b 	.word	0x08002b6b
 8002ae0:	08002b6b 	.word	0x08002b6b
 8002ae4:	08002b6b 	.word	0x08002b6b
 8002ae8:	08002b6b 	.word	0x08002b6b
 8002aec:	08002b6b 	.word	0x08002b6b
 8002af0:	08002b6b 	.word	0x08002b6b
 8002af4:	08002b6b 	.word	0x08002b6b
 8002af8:	08002b6b 	.word	0x08002b6b
 8002afc:	08002b6b 	.word	0x08002b6b
 8002b00:	08002b19 	.word	0x08002b19
 8002b04:	08002b2d 	.word	0x08002b2d
 8002b08:	4a79      	ldr	r2, [pc, #484]	; (8002cf0 <HAL_GPIO_Init+0x2b4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b0e:	e02c      	b.n	8002b6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	623b      	str	r3, [r7, #32]
          break;
 8002b16:	e029      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	623b      	str	r3, [r7, #32]
          break;
 8002b20:	e024      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	3308      	adds	r3, #8
 8002b28:	623b      	str	r3, [r7, #32]
          break;
 8002b2a:	e01f      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	330c      	adds	r3, #12
 8002b32:	623b      	str	r3, [r7, #32]
          break;
 8002b34:	e01a      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b3e:	2304      	movs	r3, #4
 8002b40:	623b      	str	r3, [r7, #32]
          break;
 8002b42:	e013      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d105      	bne.n	8002b58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	611a      	str	r2, [r3, #16]
          break;
 8002b56:	e009      	b.n	8002b6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b58:	2308      	movs	r3, #8
 8002b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	615a      	str	r2, [r3, #20]
          break;
 8002b62:	e003      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b64:	2300      	movs	r3, #0
 8002b66:	623b      	str	r3, [r7, #32]
          break;
 8002b68:	e000      	b.n	8002b6c <HAL_GPIO_Init+0x130>
          break;
 8002b6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2bff      	cmp	r3, #255	; 0xff
 8002b70:	d801      	bhi.n	8002b76 <HAL_GPIO_Init+0x13a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	e001      	b.n	8002b7a <HAL_GPIO_Init+0x13e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2bff      	cmp	r3, #255	; 0xff
 8002b80:	d802      	bhi.n	8002b88 <HAL_GPIO_Init+0x14c>
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	e002      	b.n	8002b8e <HAL_GPIO_Init+0x152>
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	3b08      	subs	r3, #8
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	210f      	movs	r1, #15
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	6a39      	ldr	r1, [r7, #32]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80b1 	beq.w	8002d1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bbc:	4b4d      	ldr	r3, [pc, #308]	; (8002cf4 <HAL_GPIO_Init+0x2b8>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	4a4c      	ldr	r2, [pc, #304]	; (8002cf4 <HAL_GPIO_Init+0x2b8>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6193      	str	r3, [r2, #24]
 8002bc8:	4b4a      	ldr	r3, [pc, #296]	; (8002cf4 <HAL_GPIO_Init+0x2b8>)
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bd4:	4a48      	ldr	r2, [pc, #288]	; (8002cf8 <HAL_GPIO_Init+0x2bc>)
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	089b      	lsrs	r3, r3, #2
 8002bda:	3302      	adds	r3, #2
 8002bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a40      	ldr	r2, [pc, #256]	; (8002cfc <HAL_GPIO_Init+0x2c0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d013      	beq.n	8002c28 <HAL_GPIO_Init+0x1ec>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3f      	ldr	r2, [pc, #252]	; (8002d00 <HAL_GPIO_Init+0x2c4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00d      	beq.n	8002c24 <HAL_GPIO_Init+0x1e8>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a3e      	ldr	r2, [pc, #248]	; (8002d04 <HAL_GPIO_Init+0x2c8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d007      	beq.n	8002c20 <HAL_GPIO_Init+0x1e4>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a3d      	ldr	r2, [pc, #244]	; (8002d08 <HAL_GPIO_Init+0x2cc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_GPIO_Init+0x1e0>
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e006      	b.n	8002c2a <HAL_GPIO_Init+0x1ee>
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	e004      	b.n	8002c2a <HAL_GPIO_Init+0x1ee>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e002      	b.n	8002c2a <HAL_GPIO_Init+0x1ee>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <HAL_GPIO_Init+0x1ee>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2c:	f002 0203 	and.w	r2, r2, #3
 8002c30:	0092      	lsls	r2, r2, #2
 8002c32:	4093      	lsls	r3, r2
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c3a:	492f      	ldr	r1, [pc, #188]	; (8002cf8 <HAL_GPIO_Init+0x2bc>)
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	3302      	adds	r3, #2
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d006      	beq.n	8002c62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c54:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	492c      	ldr	r1, [pc, #176]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	608b      	str	r3, [r1, #8]
 8002c60:	e006      	b.n	8002c70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c62:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	4928      	ldr	r1, [pc, #160]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d006      	beq.n	8002c8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c7c:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	4922      	ldr	r1, [pc, #136]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60cb      	str	r3, [r1, #12]
 8002c88:	e006      	b.n	8002c98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c8a:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	491e      	ldr	r1, [pc, #120]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d006      	beq.n	8002cb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	4918      	ldr	r1, [pc, #96]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
 8002cb0:	e006      	b.n	8002cc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	4914      	ldr	r1, [pc, #80]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d021      	beq.n	8002d10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	490e      	ldr	r1, [pc, #56]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]
 8002cd8:	e021      	b.n	8002d1e <HAL_GPIO_Init+0x2e2>
 8002cda:	bf00      	nop
 8002cdc:	10320000 	.word	0x10320000
 8002ce0:	10310000 	.word	0x10310000
 8002ce4:	10220000 	.word	0x10220000
 8002ce8:	10210000 	.word	0x10210000
 8002cec:	10120000 	.word	0x10120000
 8002cf0:	10110000 	.word	0x10110000
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	40010800 	.word	0x40010800
 8002d00:	40010c00 	.word	0x40010c00
 8002d04:	40011000 	.word	0x40011000
 8002d08:	40011400 	.word	0x40011400
 8002d0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_GPIO_Init+0x304>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	4909      	ldr	r1, [pc, #36]	; (8002d40 <HAL_GPIO_Init+0x304>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	3301      	adds	r3, #1
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f47f ae8e 	bne.w	8002a50 <HAL_GPIO_Init+0x14>
  }
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	372c      	adds	r7, #44	; 0x2c
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	40010400 	.word	0x40010400

08002d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	887b      	ldrh	r3, [r7, #2]
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
 8002d60:	e001      	b.n	8002d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	807b      	strh	r3, [r7, #2]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d82:	787b      	ldrb	r3, [r7, #1]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d88:	887a      	ldrh	r2, [r7, #2]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d8e:	e003      	b.n	8002d98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	041a      	lsls	r2, r3, #16
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	611a      	str	r2, [r3, #16]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr
	...

08002da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e12b      	b.n	800300e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff fa9c 	bl	8002308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2224      	movs	r2, #36	; 0x24
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e08:	f001 fbe2 	bl	80045d0 <HAL_RCC_GetPCLK1Freq>
 8002e0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4a81      	ldr	r2, [pc, #516]	; (8003018 <HAL_I2C_Init+0x274>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d807      	bhi.n	8002e28 <HAL_I2C_Init+0x84>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a80      	ldr	r2, [pc, #512]	; (800301c <HAL_I2C_Init+0x278>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	bf94      	ite	ls
 8002e20:	2301      	movls	r3, #1
 8002e22:	2300      	movhi	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	e006      	b.n	8002e36 <HAL_I2C_Init+0x92>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a7d      	ldr	r2, [pc, #500]	; (8003020 <HAL_I2C_Init+0x27c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	bf94      	ite	ls
 8002e30:	2301      	movls	r3, #1
 8002e32:	2300      	movhi	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e0e7      	b.n	800300e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4a78      	ldr	r2, [pc, #480]	; (8003024 <HAL_I2C_Init+0x280>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	0c9b      	lsrs	r3, r3, #18
 8002e48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4a6a      	ldr	r2, [pc, #424]	; (8003018 <HAL_I2C_Init+0x274>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d802      	bhi.n	8002e78 <HAL_I2C_Init+0xd4>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	3301      	adds	r3, #1
 8002e76:	e009      	b.n	8002e8c <HAL_I2C_Init+0xe8>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	4a69      	ldr	r2, [pc, #420]	; (8003028 <HAL_I2C_Init+0x284>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	099b      	lsrs	r3, r3, #6
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	495c      	ldr	r1, [pc, #368]	; (8003018 <HAL_I2C_Init+0x274>)
 8002ea8:	428b      	cmp	r3, r1
 8002eaa:	d819      	bhi.n	8002ee0 <HAL_I2C_Init+0x13c>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1e59      	subs	r1, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eba:	1c59      	adds	r1, r3, #1
 8002ebc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ec0:	400b      	ands	r3, r1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_I2C_Init+0x138>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1e59      	subs	r1, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eda:	e051      	b.n	8002f80 <HAL_I2C_Init+0x1dc>
 8002edc:	2304      	movs	r3, #4
 8002ede:	e04f      	b.n	8002f80 <HAL_I2C_Init+0x1dc>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d111      	bne.n	8002f0c <HAL_I2C_Init+0x168>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1e58      	subs	r0, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	440b      	add	r3, r1
 8002ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e012      	b.n	8002f32 <HAL_I2C_Init+0x18e>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1e58      	subs	r0, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	0099      	lsls	r1, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f22:	3301      	adds	r3, #1
 8002f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Init+0x196>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e022      	b.n	8002f80 <HAL_I2C_Init+0x1dc>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10e      	bne.n	8002f60 <HAL_I2C_Init+0x1bc>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1e58      	subs	r0, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6859      	ldr	r1, [r3, #4]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	440b      	add	r3, r1
 8002f50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f54:	3301      	adds	r3, #1
 8002f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f5e:	e00f      	b.n	8002f80 <HAL_I2C_Init+0x1dc>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1e58      	subs	r0, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	0099      	lsls	r1, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f76:	3301      	adds	r3, #1
 8002f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	6809      	ldr	r1, [r1, #0]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6911      	ldr	r1, [r2, #16]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68d2      	ldr	r2, [r2, #12]
 8002fba:	4311      	orrs	r1, r2
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	000186a0 	.word	0x000186a0
 800301c:	001e847f 	.word	0x001e847f
 8003020:	003d08ff 	.word	0x003d08ff
 8003024:	431bde83 	.word	0x431bde83
 8003028:	10624dd3 	.word	0x10624dd3

0800302c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	461a      	mov	r2, r3
 8003038:	460b      	mov	r3, r1
 800303a:	817b      	strh	r3, [r7, #10]
 800303c:	4613      	mov	r3, r2
 800303e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff fbea 	bl	8002818 <HAL_GetTick>
 8003044:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b20      	cmp	r3, #32
 8003050:	f040 80e0 	bne.w	8003214 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2319      	movs	r3, #25
 800305a:	2201      	movs	r2, #1
 800305c:	4970      	ldr	r1, [pc, #448]	; (8003220 <HAL_I2C_Master_Transmit+0x1f4>)
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fcb6 	bl	80039d0 <I2C_WaitOnFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800306a:	2302      	movs	r3, #2
 800306c:	e0d3      	b.n	8003216 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_I2C_Master_Transmit+0x50>
 8003078:	2302      	movs	r3, #2
 800307a:	e0cc      	b.n	8003216 <HAL_I2C_Master_Transmit+0x1ea>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d007      	beq.n	80030a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2221      	movs	r2, #33	; 0x21
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2210      	movs	r2, #16
 80030be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	893a      	ldrh	r2, [r7, #8]
 80030d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4a50      	ldr	r2, [pc, #320]	; (8003224 <HAL_I2C_Master_Transmit+0x1f8>)
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030e4:	8979      	ldrh	r1, [r7, #10]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	6a3a      	ldr	r2, [r7, #32]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fb20 	bl	8003730 <I2C_MasterRequestWrite>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e08d      	b.n	8003216 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003110:	e066      	b.n	80031e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	6a39      	ldr	r1, [r7, #32]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fd74 	bl	8003c04 <I2C_WaitOnTXEFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b04      	cmp	r3, #4
 8003128:	d107      	bne.n	800313a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003138:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06b      	b.n	8003216 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	781a      	ldrb	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b04      	cmp	r3, #4
 800317a:	d11b      	bne.n	80031b4 <HAL_I2C_Master_Transmit+0x188>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	2b00      	cmp	r3, #0
 8003182:	d017      	beq.n	80031b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	781a      	ldrb	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	6a39      	ldr	r1, [r7, #32]
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fd6b 	bl	8003c94 <I2C_WaitOnBTFFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00d      	beq.n	80031e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d107      	bne.n	80031dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e01a      	b.n	8003216 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d194      	bne.n	8003112 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	e000      	b.n	8003216 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003214:	2302      	movs	r3, #2
  }
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	00100002 	.word	0x00100002
 8003224:	ffff0000 	.word	0xffff0000

08003228 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08c      	sub	sp, #48	; 0x30
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	461a      	mov	r2, r3
 8003234:	460b      	mov	r3, r1
 8003236:	817b      	strh	r3, [r7, #10]
 8003238:	4613      	mov	r3, r2
 800323a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003240:	f7ff faea 	bl	8002818 <HAL_GetTick>
 8003244:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b20      	cmp	r3, #32
 8003250:	f040 824b 	bne.w	80036ea <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	2319      	movs	r3, #25
 800325a:	2201      	movs	r2, #1
 800325c:	497f      	ldr	r1, [pc, #508]	; (800345c <HAL_I2C_Master_Receive+0x234>)
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 fbb6 	bl	80039d0 <I2C_WaitOnFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
 800326c:	e23e      	b.n	80036ec <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_I2C_Master_Receive+0x54>
 8003278:	2302      	movs	r3, #2
 800327a:	e237      	b.n	80036ec <HAL_I2C_Master_Receive+0x4c4>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b01      	cmp	r3, #1
 8003290:	d007      	beq.n	80032a2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0201 	orr.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2222      	movs	r2, #34	; 0x22
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2210      	movs	r2, #16
 80032be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	893a      	ldrh	r2, [r7, #8]
 80032d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a5f      	ldr	r2, [pc, #380]	; (8003460 <HAL_I2C_Master_Receive+0x238>)
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032e4:	8979      	ldrh	r1, [r7, #10]
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 faa2 	bl	8003834 <I2C_MasterRequestRead>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e1f8      	b.n	80036ec <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d113      	bne.n	800332a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	e1cc      	b.n	80036c4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332e:	2b01      	cmp	r3, #1
 8003330:	d11e      	bne.n	8003370 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003340:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003342:	b672      	cpsid	i
}
 8003344:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800336c:	b662      	cpsie	i
}
 800336e:	e035      	b.n	80033dc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	2b02      	cmp	r3, #2
 8003376:	d11e      	bne.n	80033b6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003386:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003388:	b672      	cpsid	i
}
 800338a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033b2:	b662      	cpsie	i
}
 80033b4:	e012      	b.n	80033dc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80033dc:	e172      	b.n	80036c4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	f200 811f 	bhi.w	8003626 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d123      	bne.n	8003438 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fc95 	bl	8003d24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e173      	b.n	80036ec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003436:	e145      	b.n	80036c4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343c:	2b02      	cmp	r3, #2
 800343e:	d152      	bne.n	80034e6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	2200      	movs	r2, #0
 8003448:	4906      	ldr	r1, [pc, #24]	; (8003464 <HAL_I2C_Master_Receive+0x23c>)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fac0 	bl	80039d0 <I2C_WaitOnFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d008      	beq.n	8003468 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e148      	b.n	80036ec <HAL_I2C_Master_Receive+0x4c4>
 800345a:	bf00      	nop
 800345c:	00100002 	.word	0x00100002
 8003460:	ffff0000 	.word	0xffff0000
 8003464:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003468:	b672      	cpsid	i
}
 800346a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034ae:	b662      	cpsie	i
}
 80034b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034e4:	e0ee      	b.n	80036c4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	2200      	movs	r2, #0
 80034ee:	4981      	ldr	r1, [pc, #516]	; (80036f4 <HAL_I2C_Master_Receive+0x4cc>)
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fa6d 	bl	80039d0 <I2C_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0f5      	b.n	80036ec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003510:	b672      	cpsid	i
}
 8003512:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003546:	4b6c      	ldr	r3, [pc, #432]	; (80036f8 <HAL_I2C_Master_Receive+0x4d0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	08db      	lsrs	r3, r3, #3
 800354c:	4a6b      	ldr	r2, [pc, #428]	; (80036fc <HAL_I2C_Master_Receive+0x4d4>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	0a1a      	lsrs	r2, r3, #8
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	00da      	lsls	r2, r3, #3
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	3b01      	subs	r3, #1
 8003564:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d118      	bne.n	800359e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800358e:	b662      	cpsie	i
}
 8003590:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e0a6      	b.n	80036ec <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d1d9      	bne.n	8003560 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691a      	ldr	r2, [r3, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035ee:	b662      	cpsie	i
}
 80035f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003624:	e04e      	b.n	80036c4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003628:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fb7a 	bl	8003d24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e058      	b.n	80036ec <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b04      	cmp	r3, #4
 8003678:	d124      	bne.n	80036c4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367e:	2b03      	cmp	r3, #3
 8003680:	d107      	bne.n	8003692 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003690:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f47f ae88 	bne.w	80033de <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e000      	b.n	80036ec <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80036ea:	2302      	movs	r3, #2
  }
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3728      	adds	r7, #40	; 0x28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	00010004 	.word	0x00010004
 80036f8:	2000000c 	.word	0x2000000c
 80036fc:	14f8b589 	.word	0x14f8b589

08003700 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370e:	b2db      	uxtb	r3, r3
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003726:	4618      	mov	r0, r3
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af02      	add	r7, sp, #8
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	460b      	mov	r3, r1
 800373e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b08      	cmp	r3, #8
 800374a:	d006      	beq.n	800375a <I2C_MasterRequestWrite+0x2a>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d003      	beq.n	800375a <I2C_MasterRequestWrite+0x2a>
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003758:	d108      	bne.n	800376c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	e00b      	b.n	8003784 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	2b12      	cmp	r3, #18
 8003772:	d107      	bne.n	8003784 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003782:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f91d 	bl	80039d0 <I2C_WaitOnFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00d      	beq.n	80037b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037aa:	d103      	bne.n	80037b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e035      	b.n	8003824 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037c0:	d108      	bne.n	80037d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037c2:	897b      	ldrh	r3, [r7, #10]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037d0:	611a      	str	r2, [r3, #16]
 80037d2:	e01b      	b.n	800380c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037d4:	897b      	ldrh	r3, [r7, #10]
 80037d6:	11db      	asrs	r3, r3, #7
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f003 0306 	and.w	r3, r3, #6
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f063 030f 	orn	r3, r3, #15
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	490e      	ldr	r1, [pc, #56]	; (800382c <I2C_MasterRequestWrite+0xfc>)
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f966 	bl	8003ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e010      	b.n	8003824 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003802:	897b      	ldrh	r3, [r7, #10]
 8003804:	b2da      	uxtb	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	4907      	ldr	r1, [pc, #28]	; (8003830 <I2C_MasterRequestWrite+0x100>)
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f956 	bl	8003ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	00010008 	.word	0x00010008
 8003830:	00010002 	.word	0x00010002

08003834 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	460b      	mov	r3, r1
 8003842:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003858:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b08      	cmp	r3, #8
 800385e:	d006      	beq.n	800386e <I2C_MasterRequestRead+0x3a>
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d003      	beq.n	800386e <I2C_MasterRequestRead+0x3a>
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800386c:	d108      	bne.n	8003880 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	e00b      	b.n	8003898 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	2b11      	cmp	r3, #17
 8003886:	d107      	bne.n	8003898 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003896:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f893 	bl	80039d0 <I2C_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00d      	beq.n	80038cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038be:	d103      	bne.n	80038c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e079      	b.n	80039c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038d4:	d108      	bne.n	80038e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038d6:	897b      	ldrh	r3, [r7, #10]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	611a      	str	r2, [r3, #16]
 80038e6:	e05f      	b.n	80039a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038e8:	897b      	ldrh	r3, [r7, #10]
 80038ea:	11db      	asrs	r3, r3, #7
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	f003 0306 	and.w	r3, r3, #6
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f063 030f 	orn	r3, r3, #15
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	4930      	ldr	r1, [pc, #192]	; (80039c8 <I2C_MasterRequestRead+0x194>)
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f8dc 	bl	8003ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e054      	b.n	80039c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003916:	897b      	ldrh	r3, [r7, #10]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	4929      	ldr	r1, [pc, #164]	; (80039cc <I2C_MasterRequestRead+0x198>)
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f8cc 	bl	8003ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e044      	b.n	80039c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800395a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f831 	bl	80039d0 <I2C_WaitOnFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00d      	beq.n	8003990 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003982:	d103      	bne.n	800398c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800398a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e017      	b.n	80039c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003990:	897b      	ldrh	r3, [r7, #10]
 8003992:	11db      	asrs	r3, r3, #7
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f003 0306 	and.w	r3, r3, #6
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f063 030e 	orn	r3, r3, #14
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	4907      	ldr	r1, [pc, #28]	; (80039cc <I2C_MasterRequestRead+0x198>)
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f888 	bl	8003ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	00010008 	.word	0x00010008
 80039cc:	00010002 	.word	0x00010002

080039d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	4613      	mov	r3, r2
 80039de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e0:	e048      	b.n	8003a74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d044      	beq.n	8003a74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ea:	f7fe ff15 	bl	8002818 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d302      	bcc.n	8003a00 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d139      	bne.n	8003a74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	0c1b      	lsrs	r3, r3, #16
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d10d      	bne.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	43da      	mvns	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4013      	ands	r3, r2
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	e00c      	b.n	8003a40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	43da      	mvns	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4013      	ands	r3, r2
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d116      	bne.n	8003a74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f043 0220 	orr.w	r2, r3, #32
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e023      	b.n	8003abc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	0c1b      	lsrs	r3, r3, #16
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d10d      	bne.n	8003a9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	43da      	mvns	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	461a      	mov	r2, r3
 8003a98:	e00c      	b.n	8003ab4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	43da      	mvns	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf0c      	ite	eq
 8003aac:	2301      	moveq	r3, #1
 8003aae:	2300      	movne	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d093      	beq.n	80039e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ad2:	e071      	b.n	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae2:	d123      	bne.n	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003afc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f043 0204 	orr.w	r2, r3, #4
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e067      	b.n	8003bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d041      	beq.n	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b34:	f7fe fe70 	bl	8002818 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d302      	bcc.n	8003b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d136      	bne.n	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	0c1b      	lsrs	r3, r3, #16
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d10c      	bne.n	8003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	43da      	mvns	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	bf14      	ite	ne
 8003b66:	2301      	movne	r3, #1
 8003b68:	2300      	moveq	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	e00b      	b.n	8003b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	43da      	mvns	r2, r3
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf14      	ite	ne
 8003b80:	2301      	movne	r3, #1
 8003b82:	2300      	moveq	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d016      	beq.n	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e021      	b.n	8003bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	0c1b      	lsrs	r3, r3, #16
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d10c      	bne.n	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	43da      	mvns	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	bf14      	ite	ne
 8003bd4:	2301      	movne	r3, #1
 8003bd6:	2300      	moveq	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	e00b      	b.n	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	43da      	mvns	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4013      	ands	r3, r2
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	bf14      	ite	ne
 8003bee:	2301      	movne	r3, #1
 8003bf0:	2300      	moveq	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f47f af6d 	bne.w	8003ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c10:	e034      	b.n	8003c7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f8e3 	bl	8003dde <I2C_IsAcknowledgeFailed>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e034      	b.n	8003c8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d028      	beq.n	8003c7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2a:	f7fe fdf5 	bl	8002818 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d302      	bcc.n	8003c40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d11d      	bne.n	8003c7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4a:	2b80      	cmp	r3, #128	; 0x80
 8003c4c:	d016      	beq.n	8003c7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	f043 0220 	orr.w	r2, r3, #32
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e007      	b.n	8003c8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c86:	2b80      	cmp	r3, #128	; 0x80
 8003c88:	d1c3      	bne.n	8003c12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ca0:	e034      	b.n	8003d0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f89b 	bl	8003dde <I2C_IsAcknowledgeFailed>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e034      	b.n	8003d1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb8:	d028      	beq.n	8003d0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cba:	f7fe fdad 	bl	8002818 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d302      	bcc.n	8003cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d11d      	bne.n	8003d0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d016      	beq.n	8003d0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	f043 0220 	orr.w	r2, r3, #32
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e007      	b.n	8003d1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d1c3      	bne.n	8003ca2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d30:	e049      	b.n	8003dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	d119      	bne.n	8003d74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0210 	mvn.w	r2, #16
 8003d48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e030      	b.n	8003dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d74:	f7fe fd50 	bl	8002818 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d302      	bcc.n	8003d8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d11d      	bne.n	8003dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d016      	beq.n	8003dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f043 0220 	orr.w	r2, r3, #32
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e007      	b.n	8003dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	d1ae      	bne.n	8003d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df4:	d11b      	bne.n	8003e2e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dfe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f043 0204 	orr.w	r2, r3, #4
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr
	...

08003e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e272      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8087 	beq.w	8003f6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e5c:	4b92      	ldr	r3, [pc, #584]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d00c      	beq.n	8003e82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e68:	4b8f      	ldr	r3, [pc, #572]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d112      	bne.n	8003e9a <HAL_RCC_OscConfig+0x5e>
 8003e74:	4b8c      	ldr	r3, [pc, #560]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d10b      	bne.n	8003e9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e82:	4b89      	ldr	r3, [pc, #548]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d06c      	beq.n	8003f68 <HAL_RCC_OscConfig+0x12c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d168      	bne.n	8003f68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e24c      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x76>
 8003ea4:	4b80      	ldr	r3, [pc, #512]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a7f      	ldr	r2, [pc, #508]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	e02e      	b.n	8003f10 <HAL_RCC_OscConfig+0xd4>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x98>
 8003eba:	4b7b      	ldr	r3, [pc, #492]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a7a      	ldr	r2, [pc, #488]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	4b78      	ldr	r3, [pc, #480]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a77      	ldr	r2, [pc, #476]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	e01d      	b.n	8003f10 <HAL_RCC_OscConfig+0xd4>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0xbc>
 8003ede:	4b72      	ldr	r3, [pc, #456]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a71      	ldr	r2, [pc, #452]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b6f      	ldr	r3, [pc, #444]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a6e      	ldr	r2, [pc, #440]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e00b      	b.n	8003f10 <HAL_RCC_OscConfig+0xd4>
 8003ef8:	4b6b      	ldr	r3, [pc, #428]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a6a      	ldr	r2, [pc, #424]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	4b68      	ldr	r3, [pc, #416]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a67      	ldr	r2, [pc, #412]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d013      	beq.n	8003f40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7fe fc7e 	bl	8002818 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f20:	f7fe fc7a 	bl	8002818 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	; 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e200      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f32:	4b5d      	ldr	r3, [pc, #372]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0xe4>
 8003f3e:	e014      	b.n	8003f6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fe fc6a 	bl	8002818 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f48:	f7fe fc66 	bl	8002818 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	; 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e1ec      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5a:	4b53      	ldr	r3, [pc, #332]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x10c>
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d063      	beq.n	800403e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f76:	4b4c      	ldr	r3, [pc, #304]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00b      	beq.n	8003f9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f82:	4b49      	ldr	r3, [pc, #292]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d11c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x18c>
 8003f8e:	4b46      	ldr	r3, [pc, #280]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d116      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f9a:	4b43      	ldr	r3, [pc, #268]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x176>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d001      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e1c0      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb2:	4b3d      	ldr	r3, [pc, #244]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4939      	ldr	r1, [pc, #228]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc6:	e03a      	b.n	800403e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d020      	beq.n	8004012 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fd0:	4b36      	ldr	r3, [pc, #216]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fe fc1f 	bl	8002818 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fde:	f7fe fc1b 	bl	8002818 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e1a1      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff0:	4b2d      	ldr	r3, [pc, #180]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffc:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4927      	ldr	r1, [pc, #156]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 800400c:	4313      	orrs	r3, r2
 800400e:	600b      	str	r3, [r1, #0]
 8004010:	e015      	b.n	800403e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004012:	4b26      	ldr	r3, [pc, #152]	; (80040ac <HAL_RCC_OscConfig+0x270>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fe fbfe 	bl	8002818 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004020:	f7fe fbfa 	bl	8002818 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e180      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004032:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d03a      	beq.n	80040c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d019      	beq.n	8004086 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004052:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8004054:	2201      	movs	r2, #1
 8004056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004058:	f7fe fbde 	bl	8002818 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004060:	f7fe fbda 	bl	8002818 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e160      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004072:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <HAL_RCC_OscConfig+0x26c>)
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800407e:	2001      	movs	r0, #1
 8004080:	f000 face 	bl	8004620 <RCC_Delay>
 8004084:	e01c      	b.n	80040c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <HAL_RCC_OscConfig+0x274>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408c:	f7fe fbc4 	bl	8002818 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004092:	e00f      	b.n	80040b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004094:	f7fe fbc0 	bl	8002818 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d908      	bls.n	80040b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e146      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	42420000 	.word	0x42420000
 80040b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b4:	4b92      	ldr	r3, [pc, #584]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e9      	bne.n	8004094 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 80a6 	beq.w	800421a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ce:	2300      	movs	r3, #0
 80040d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040d2:	4b8b      	ldr	r3, [pc, #556]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10d      	bne.n	80040fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040de:	4b88      	ldr	r3, [pc, #544]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4a87      	ldr	r2, [pc, #540]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80040e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e8:	61d3      	str	r3, [r2, #28]
 80040ea:	4b85      	ldr	r3, [pc, #532]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f6:	2301      	movs	r3, #1
 80040f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fa:	4b82      	ldr	r3, [pc, #520]	; (8004304 <HAL_RCC_OscConfig+0x4c8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d118      	bne.n	8004138 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004106:	4b7f      	ldr	r3, [pc, #508]	; (8004304 <HAL_RCC_OscConfig+0x4c8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a7e      	ldr	r2, [pc, #504]	; (8004304 <HAL_RCC_OscConfig+0x4c8>)
 800410c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004112:	f7fe fb81 	bl	8002818 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411a:	f7fe fb7d 	bl	8002818 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b64      	cmp	r3, #100	; 0x64
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e103      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412c:	4b75      	ldr	r3, [pc, #468]	; (8004304 <HAL_RCC_OscConfig+0x4c8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d106      	bne.n	800414e <HAL_RCC_OscConfig+0x312>
 8004140:	4b6f      	ldr	r3, [pc, #444]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	4a6e      	ldr	r2, [pc, #440]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	6213      	str	r3, [r2, #32]
 800414c:	e02d      	b.n	80041aa <HAL_RCC_OscConfig+0x36e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10c      	bne.n	8004170 <HAL_RCC_OscConfig+0x334>
 8004156:	4b6a      	ldr	r3, [pc, #424]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	4a69      	ldr	r2, [pc, #420]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	6213      	str	r3, [r2, #32]
 8004162:	4b67      	ldr	r3, [pc, #412]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	4a66      	ldr	r2, [pc, #408]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004168:	f023 0304 	bic.w	r3, r3, #4
 800416c:	6213      	str	r3, [r2, #32]
 800416e:	e01c      	b.n	80041aa <HAL_RCC_OscConfig+0x36e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b05      	cmp	r3, #5
 8004176:	d10c      	bne.n	8004192 <HAL_RCC_OscConfig+0x356>
 8004178:	4b61      	ldr	r3, [pc, #388]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	4a60      	ldr	r2, [pc, #384]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800417e:	f043 0304 	orr.w	r3, r3, #4
 8004182:	6213      	str	r3, [r2, #32]
 8004184:	4b5e      	ldr	r3, [pc, #376]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	4a5d      	ldr	r2, [pc, #372]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	6213      	str	r3, [r2, #32]
 8004190:	e00b      	b.n	80041aa <HAL_RCC_OscConfig+0x36e>
 8004192:	4b5b      	ldr	r3, [pc, #364]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4a5a      	ldr	r2, [pc, #360]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	6213      	str	r3, [r2, #32]
 800419e:	4b58      	ldr	r3, [pc, #352]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	4a57      	ldr	r2, [pc, #348]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80041a4:	f023 0304 	bic.w	r3, r3, #4
 80041a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d015      	beq.n	80041de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b2:	f7fe fb31 	bl	8002818 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b8:	e00a      	b.n	80041d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ba:	f7fe fb2d 	bl	8002818 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e0b1      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d0:	4b4b      	ldr	r3, [pc, #300]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0ee      	beq.n	80041ba <HAL_RCC_OscConfig+0x37e>
 80041dc:	e014      	b.n	8004208 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041de:	f7fe fb1b 	bl	8002818 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fe fb17 	bl	8002818 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e09b      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fc:	4b40      	ldr	r3, [pc, #256]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1ee      	bne.n	80041e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d105      	bne.n	800421a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800420e:	4b3c      	ldr	r3, [pc, #240]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	4a3b      	ldr	r2, [pc, #236]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004218:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8087 	beq.w	8004332 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004224:	4b36      	ldr	r3, [pc, #216]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 030c 	and.w	r3, r3, #12
 800422c:	2b08      	cmp	r3, #8
 800422e:	d061      	beq.n	80042f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d146      	bne.n	80042c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004238:	4b33      	ldr	r3, [pc, #204]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7fe faeb 	bl	8002818 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004246:	f7fe fae7 	bl	8002818 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e06d      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004258:	4b29      	ldr	r3, [pc, #164]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f0      	bne.n	8004246 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426c:	d108      	bne.n	8004280 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800426e:	4b24      	ldr	r3, [pc, #144]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	4921      	ldr	r1, [pc, #132]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 800427c:	4313      	orrs	r3, r2
 800427e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004280:	4b1f      	ldr	r3, [pc, #124]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a19      	ldr	r1, [r3, #32]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	430b      	orrs	r3, r1
 8004292:	491b      	ldr	r1, [pc, #108]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 8004294:	4313      	orrs	r3, r2
 8004296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 800429a:	2201      	movs	r2, #1
 800429c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429e:	f7fe fabb 	bl	8002818 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a6:	f7fe fab7 	bl	8002818 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e03d      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042b8:	4b11      	ldr	r3, [pc, #68]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <HAL_RCC_OscConfig+0x46a>
 80042c4:	e035      	b.n	8004332 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c6:	4b10      	ldr	r3, [pc, #64]	; (8004308 <HAL_RCC_OscConfig+0x4cc>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042cc:	f7fe faa4 	bl	8002818 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d4:	f7fe faa0 	bl	8002818 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e026      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <HAL_RCC_OscConfig+0x4c4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x498>
 80042f2:	e01e      	b.n	8004332 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d107      	bne.n	800430c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e019      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
 8004300:	40021000 	.word	0x40021000
 8004304:	40007000 	.word	0x40007000
 8004308:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_RCC_OscConfig+0x500>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	429a      	cmp	r2, r3
 800431e:	d106      	bne.n	800432e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d001      	beq.n	8004332 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40021000 	.word	0x40021000

08004340 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0d0      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004354:	4b6a      	ldr	r3, [pc, #424]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d910      	bls.n	8004384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b67      	ldr	r3, [pc, #412]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 0207 	bic.w	r2, r3, #7
 800436a:	4965      	ldr	r1, [pc, #404]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	4313      	orrs	r3, r2
 8004370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004372:	4b63      	ldr	r3, [pc, #396]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d001      	beq.n	8004384 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0b8      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d020      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800439c:	4b59      	ldr	r3, [pc, #356]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	4a58      	ldr	r2, [pc, #352]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043b4:	4b53      	ldr	r3, [pc, #332]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a52      	ldr	r2, [pc, #328]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80043be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c0:	4b50      	ldr	r3, [pc, #320]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	494d      	ldr	r1, [pc, #308]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d040      	beq.n	8004460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d107      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	4b47      	ldr	r3, [pc, #284]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d115      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e07f      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fe:	4b41      	ldr	r3, [pc, #260]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e073      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440e:	4b3d      	ldr	r3, [pc, #244]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e06b      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441e:	4b39      	ldr	r3, [pc, #228]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f023 0203 	bic.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4936      	ldr	r1, [pc, #216]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	4313      	orrs	r3, r2
 800442e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004430:	f7fe f9f2 	bl	8002818 <HAL_GetTick>
 8004434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004436:	e00a      	b.n	800444e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004438:	f7fe f9ee 	bl	8002818 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f241 3288 	movw	r2, #5000	; 0x1388
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e053      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	4b2d      	ldr	r3, [pc, #180]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 020c 	and.w	r2, r3, #12
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	429a      	cmp	r2, r3
 800445e:	d1eb      	bne.n	8004438 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004460:	4b27      	ldr	r3, [pc, #156]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d210      	bcs.n	8004490 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 0207 	bic.w	r2, r3, #7
 8004476:	4922      	ldr	r1, [pc, #136]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e032      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800449c:	4b19      	ldr	r3, [pc, #100]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4916      	ldr	r1, [pc, #88]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044ba:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	490e      	ldr	r1, [pc, #56]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044ce:	f000 f821 	bl	8004514 <HAL_RCC_GetSysClockFreq>
 80044d2:	4602      	mov	r2, r0
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	091b      	lsrs	r3, r3, #4
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	490a      	ldr	r1, [pc, #40]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80044e0:	5ccb      	ldrb	r3, [r1, r3]
 80044e2:	fa22 f303 	lsr.w	r3, r2, r3
 80044e6:	4a09      	ldr	r2, [pc, #36]	; (800450c <HAL_RCC_ClockConfig+0x1cc>)
 80044e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044ea:	4b09      	ldr	r3, [pc, #36]	; (8004510 <HAL_RCC_ClockConfig+0x1d0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe f950 	bl	8002794 <HAL_InitTick>

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40022000 	.word	0x40022000
 8004504:	40021000 	.word	0x40021000
 8004508:	0800870c 	.word	0x0800870c
 800450c:	2000000c 	.word	0x2000000c
 8004510:	20000010 	.word	0x20000010

08004514 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	2300      	movs	r3, #0
 8004528:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800452e:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b04      	cmp	r3, #4
 800453c:	d002      	beq.n	8004544 <HAL_RCC_GetSysClockFreq+0x30>
 800453e:	2b08      	cmp	r3, #8
 8004540:	d003      	beq.n	800454a <HAL_RCC_GetSysClockFreq+0x36>
 8004542:	e027      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004544:	4b19      	ldr	r3, [pc, #100]	; (80045ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004546:	613b      	str	r3, [r7, #16]
      break;
 8004548:	e027      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	0c9b      	lsrs	r3, r3, #18
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004554:	5cd3      	ldrb	r3, [r2, r3]
 8004556:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d010      	beq.n	8004584 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004562:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	0c5b      	lsrs	r3, r3, #17
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	4a11      	ldr	r2, [pc, #68]	; (80045b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800456e:	5cd3      	ldrb	r3, [r2, r3]
 8004570:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a0d      	ldr	r2, [pc, #52]	; (80045ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004576:	fb03 f202 	mul.w	r2, r3, r2
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	e004      	b.n	800458e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004588:	fb02 f303 	mul.w	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	613b      	str	r3, [r7, #16]
      break;
 8004592:	e002      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004596:	613b      	str	r3, [r7, #16]
      break;
 8004598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800459a:	693b      	ldr	r3, [r7, #16]
}
 800459c:	4618      	mov	r0, r3
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
 80045ac:	007a1200 	.word	0x007a1200
 80045b0:	08008724 	.word	0x08008724
 80045b4:	08008734 	.word	0x08008734
 80045b8:	003d0900 	.word	0x003d0900

080045bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c0:	4b02      	ldr	r3, [pc, #8]	; (80045cc <HAL_RCC_GetHCLKFreq+0x10>)
 80045c2:	681b      	ldr	r3, [r3, #0]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr
 80045cc:	2000000c 	.word	0x2000000c

080045d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045d4:	f7ff fff2 	bl	80045bc <HAL_RCC_GetHCLKFreq>
 80045d8:	4602      	mov	r2, r0
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	0a1b      	lsrs	r3, r3, #8
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	4903      	ldr	r1, [pc, #12]	; (80045f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045e6:	5ccb      	ldrb	r3, [r1, r3]
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40021000 	.word	0x40021000
 80045f4:	0800871c 	.word	0x0800871c

080045f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045fc:	f7ff ffde 	bl	80045bc <HAL_RCC_GetHCLKFreq>
 8004600:	4602      	mov	r2, r0
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	0adb      	lsrs	r3, r3, #11
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	4903      	ldr	r1, [pc, #12]	; (800461c <HAL_RCC_GetPCLK2Freq+0x24>)
 800460e:	5ccb      	ldrb	r3, [r1, r3]
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004614:	4618      	mov	r0, r3
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40021000 	.word	0x40021000
 800461c:	0800871c 	.word	0x0800871c

08004620 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004628:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <RCC_Delay+0x34>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <RCC_Delay+0x38>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	0a5b      	lsrs	r3, r3, #9
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800463c:	bf00      	nop
  }
  while (Delay --);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1e5a      	subs	r2, r3, #1
 8004642:	60fa      	str	r2, [r7, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f9      	bne.n	800463c <RCC_Delay+0x1c>
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr
 8004654:	2000000c 	.word	0x2000000c
 8004658:	10624dd3 	.word	0x10624dd3

0800465c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e076      	b.n	800475c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	2b00      	cmp	r3, #0
 8004674:	d108      	bne.n	8004688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800467e:	d009      	beq.n	8004694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	61da      	str	r2, [r3, #28]
 8004686:	e005      	b.n	8004694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fd fe96 	bl	80023e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004718:	ea42 0103 	orr.w	r1, r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	0c1a      	lsrs	r2, r3, #16
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f002 0204 	and.w	r2, r2, #4
 800473a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800474a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_SPI_Transmit+0x22>
 8004782:	2302      	movs	r3, #2
 8004784:	e12d      	b.n	80049e2 <HAL_SPI_Transmit+0x27e>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800478e:	f7fe f843 	bl	8002818 <HAL_GetTick>
 8004792:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004794:	88fb      	ldrh	r3, [r7, #6]
 8004796:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d002      	beq.n	80047aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
 80047a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047a8:	e116      	b.n	80049d8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_SPI_Transmit+0x52>
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047ba:	e10d      	b.n	80049d8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2203      	movs	r2, #3
 80047c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	88fa      	ldrh	r2, [r7, #6]
 80047d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	88fa      	ldrh	r2, [r7, #6]
 80047da:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004802:	d10f      	bne.n	8004824 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004812:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004822:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482e:	2b40      	cmp	r3, #64	; 0x40
 8004830:	d007      	beq.n	8004842 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004840:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800484a:	d14f      	bne.n	80048ec <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_SPI_Transmit+0xf6>
 8004854:	8afb      	ldrh	r3, [r7, #22]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d142      	bne.n	80048e0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	881a      	ldrh	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	1c9a      	adds	r2, r3, #2
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800487e:	e02f      	b.n	80048e0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b02      	cmp	r3, #2
 800488c:	d112      	bne.n	80048b4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	881a      	ldrh	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	1c9a      	adds	r2, r3, #2
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80048b2:	e015      	b.n	80048e0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048b4:	f7fd ffb0 	bl	8002818 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d803      	bhi.n	80048cc <HAL_SPI_Transmit+0x168>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d102      	bne.n	80048d2 <HAL_SPI_Transmit+0x16e>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80048de:	e07b      	b.n	80049d8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1ca      	bne.n	8004880 <HAL_SPI_Transmit+0x11c>
 80048ea:	e050      	b.n	800498e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_SPI_Transmit+0x196>
 80048f4:	8afb      	ldrh	r3, [r7, #22]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d144      	bne.n	8004984 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	330c      	adds	r3, #12
 8004904:	7812      	ldrb	r2, [r2, #0]
 8004906:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004920:	e030      	b.n	8004984 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b02      	cmp	r3, #2
 800492e:	d113      	bne.n	8004958 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	330c      	adds	r3, #12
 800493a:	7812      	ldrb	r2, [r2, #0]
 800493c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	86da      	strh	r2, [r3, #54]	; 0x36
 8004956:	e015      	b.n	8004984 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004958:	f7fd ff5e 	bl	8002818 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d803      	bhi.n	8004970 <HAL_SPI_Transmit+0x20c>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d102      	bne.n	8004976 <HAL_SPI_Transmit+0x212>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004982:	e029      	b.n	80049d8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1c9      	bne.n	8004922 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	6839      	ldr	r1, [r7, #0]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 fa62 	bl	8004e5c <SPI_EndRxTxTransaction>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2220      	movs	r2, #32
 80049a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049ac:	2300      	movs	r3, #0
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	77fb      	strb	r3, [r7, #31]
 80049ce:	e003      	b.n	80049d8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b08c      	sub	sp, #48	; 0x30
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	607a      	str	r2, [r7, #4]
 80049f6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049f8:	2301      	movs	r3, #1
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_SPI_TransmitReceive+0x26>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e198      	b.n	8004d42 <HAL_SPI_TransmitReceive+0x358>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a18:	f7fd fefe 	bl	8002818 <HAL_GetTick>
 8004a1c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a2e:	887b      	ldrh	r3, [r7, #2]
 8004a30:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d00f      	beq.n	8004a5a <HAL_SPI_TransmitReceive+0x70>
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a40:	d107      	bne.n	8004a52 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d103      	bne.n	8004a52 <HAL_SPI_TransmitReceive+0x68>
 8004a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d003      	beq.n	8004a5a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
 8004a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a58:	e16d      	b.n	8004d36 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <HAL_SPI_TransmitReceive+0x82>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_SPI_TransmitReceive+0x82>
 8004a66:	887b      	ldrh	r3, [r7, #2]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d103      	bne.n	8004a74 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a72:	e160      	b.n	8004d36 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d003      	beq.n	8004a88 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2205      	movs	r2, #5
 8004a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	887a      	ldrh	r2, [r7, #2]
 8004a98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	887a      	ldrh	r2, [r7, #2]
 8004a9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	887a      	ldrh	r2, [r7, #2]
 8004aaa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	887a      	ldrh	r2, [r7, #2]
 8004ab0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b40      	cmp	r3, #64	; 0x40
 8004aca:	d007      	beq.n	8004adc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ada:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae4:	d17c      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_SPI_TransmitReceive+0x10a>
 8004aee:	8b7b      	ldrh	r3, [r7, #26]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d16a      	bne.n	8004bca <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af8:	881a      	ldrh	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	1c9a      	adds	r2, r3, #2
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b18:	e057      	b.n	8004bca <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d11b      	bne.n	8004b60 <HAL_SPI_TransmitReceive+0x176>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <HAL_SPI_TransmitReceive+0x176>
 8004b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d113      	bne.n	8004b60 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	881a      	ldrh	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	1c9a      	adds	r2, r3, #2
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d119      	bne.n	8004ba2 <HAL_SPI_TransmitReceive+0x1b8>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d014      	beq.n	8004ba2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	b292      	uxth	r2, r2
 8004b84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	1c9a      	adds	r2, r3, #2
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ba2:	f7fd fe39 	bl	8002818 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d80b      	bhi.n	8004bca <HAL_SPI_TransmitReceive+0x1e0>
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb8:	d007      	beq.n	8004bca <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004bc8:	e0b5      	b.n	8004d36 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1a2      	bne.n	8004b1a <HAL_SPI_TransmitReceive+0x130>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d19d      	bne.n	8004b1a <HAL_SPI_TransmitReceive+0x130>
 8004bde:	e080      	b.n	8004ce2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <HAL_SPI_TransmitReceive+0x204>
 8004be8:	8b7b      	ldrh	r3, [r7, #26]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d16f      	bne.n	8004cce <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	330c      	adds	r3, #12
 8004bf8:	7812      	ldrb	r2, [r2, #0]
 8004bfa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c14:	e05b      	b.n	8004cce <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d11c      	bne.n	8004c5e <HAL_SPI_TransmitReceive+0x274>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d017      	beq.n	8004c5e <HAL_SPI_TransmitReceive+0x274>
 8004c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d114      	bne.n	8004c5e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	7812      	ldrb	r2, [r2, #0]
 8004c40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d119      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x2b6>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d014      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ca0:	f7fd fdba 	bl	8002818 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d803      	bhi.n	8004cb8 <HAL_SPI_TransmitReceive+0x2ce>
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d102      	bne.n	8004cbe <HAL_SPI_TransmitReceive+0x2d4>
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d107      	bne.n	8004cce <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004ccc:	e033      	b.n	8004d36 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d19e      	bne.n	8004c16 <HAL_SPI_TransmitReceive+0x22c>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d199      	bne.n	8004c16 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f8b8 	bl	8004e5c <SPI_EndRxTxTransaction>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d006      	beq.n	8004d00 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004cfe:	e01a      	b.n	8004d36 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d2c:	e003      	b.n	8004d36 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3730      	adds	r7, #48	; 0x30
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d5c:	f7fd fd5c 	bl	8002818 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	1a9b      	subs	r3, r3, r2
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	4413      	add	r3, r2
 8004d6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d6c:	f7fd fd54 	bl	8002818 <HAL_GetTick>
 8004d70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d72:	4b39      	ldr	r3, [pc, #228]	; (8004e58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	015b      	lsls	r3, r3, #5
 8004d78:	0d1b      	lsrs	r3, r3, #20
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	fb02 f303 	mul.w	r3, r2, r3
 8004d80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d82:	e054      	b.n	8004e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8a:	d050      	beq.n	8004e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d8c:	f7fd fd44 	bl	8002818 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	69fa      	ldr	r2, [r7, #28]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d902      	bls.n	8004da2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d13d      	bne.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004db0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dba:	d111      	bne.n	8004de0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc4:	d004      	beq.n	8004dd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dce:	d107      	bne.n	8004de0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de8:	d10f      	bne.n	8004e0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e017      	b.n	8004e4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4013      	ands	r3, r2
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	bf0c      	ite	eq
 8004e3e:	2301      	moveq	r3, #1
 8004e40:	2300      	movne	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d19b      	bne.n	8004d84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3720      	adds	r7, #32
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	2000000c 	.word	0x2000000c

08004e5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2180      	movs	r1, #128	; 0x80
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7ff ff6a 	bl	8004d4c <SPI_WaitFlagStateUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d007      	beq.n	8004e8e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e000      	b.n	8004e90 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e042      	b.n	8004f30 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fd fada 	bl	8002478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2224      	movs	r2, #36	; 0x24
 8004ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f91d 	bl	800511c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695a      	ldr	r2, [r3, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	; 0x28
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	4613      	mov	r3, r2
 8004f46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d16d      	bne.n	8005034 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <HAL_UART_Transmit+0x2c>
 8004f5e:	88fb      	ldrh	r3, [r7, #6]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e066      	b.n	8005036 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2221      	movs	r2, #33	; 0x21
 8004f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f76:	f7fd fc4f 	bl	8002818 <HAL_GetTick>
 8004f7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	88fa      	ldrh	r2, [r7, #6]
 8004f80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	88fa      	ldrh	r2, [r7, #6]
 8004f86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f90:	d108      	bne.n	8004fa4 <HAL_UART_Transmit+0x6c>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d104      	bne.n	8004fa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	61bb      	str	r3, [r7, #24]
 8004fa2:	e003      	b.n	8004fac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fac:	e02a      	b.n	8005004 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2180      	movs	r1, #128	; 0x80
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f840 	bl	800503e <UART_WaitOnFlagUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e036      	b.n	8005036 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	e007      	b.n	8004ff6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	781a      	ldrb	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1cf      	bne.n	8004fae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2200      	movs	r2, #0
 8005016:	2140      	movs	r1, #64	; 0x40
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 f810 	bl	800503e <UART_WaitOnFlagUntilTimeout>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e006      	b.n	8005036 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	e000      	b.n	8005036 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005034:	2302      	movs	r3, #2
  }
}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b090      	sub	sp, #64	; 0x40
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	4613      	mov	r3, r2
 800504c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504e:	e050      	b.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005056:	d04c      	beq.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800505a:	2b00      	cmp	r3, #0
 800505c:	d007      	beq.n	800506e <UART_WaitOnFlagUntilTimeout+0x30>
 800505e:	f7fd fbdb 	bl	8002818 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800506a:	429a      	cmp	r2, r3
 800506c:	d241      	bcs.n	80050f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	330c      	adds	r3, #12
 800508c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800508e:	637a      	str	r2, [r7, #52]	; 0x34
 8005090:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e5      	bne.n	800506e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3314      	adds	r3, #20
 80050a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	613b      	str	r3, [r7, #16]
   return(result);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3314      	adds	r3, #20
 80050c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050c2:	623a      	str	r2, [r7, #32]
 80050c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	69f9      	ldr	r1, [r7, #28]
 80050c8:	6a3a      	ldr	r2, [r7, #32]
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e5      	bne.n	80050a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e00f      	b.n	8005112 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4013      	ands	r3, r2
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	429a      	cmp	r2, r3
 8005100:	bf0c      	ite	eq
 8005102:	2301      	moveq	r3, #1
 8005104:	2300      	movne	r3, #0
 8005106:	b2db      	uxtb	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	429a      	cmp	r2, r3
 800510e:	d09f      	beq.n	8005050 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3740      	adds	r7, #64	; 0x40
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005156:	f023 030c 	bic.w	r3, r3, #12
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	430b      	orrs	r3, r1
 8005162:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a2c      	ldr	r2, [pc, #176]	; (8005230 <UART_SetConfig+0x114>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d103      	bne.n	800518c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005184:	f7ff fa38 	bl	80045f8 <HAL_RCC_GetPCLK2Freq>
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	e002      	b.n	8005192 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800518c:	f7ff fa20 	bl	80045d0 <HAL_RCC_GetPCLK1Freq>
 8005190:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4613      	mov	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	009a      	lsls	r2, r3, #2
 800519c:	441a      	add	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	4a22      	ldr	r2, [pc, #136]	; (8005234 <UART_SetConfig+0x118>)
 80051aa:	fba2 2303 	umull	r2, r3, r2, r3
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	0119      	lsls	r1, r3, #4
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	009a      	lsls	r2, r3, #2
 80051bc:	441a      	add	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80051c8:	4b1a      	ldr	r3, [pc, #104]	; (8005234 <UART_SetConfig+0x118>)
 80051ca:	fba3 0302 	umull	r0, r3, r3, r2
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	2064      	movs	r0, #100	; 0x64
 80051d2:	fb00 f303 	mul.w	r3, r0, r3
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	3332      	adds	r3, #50	; 0x32
 80051dc:	4a15      	ldr	r2, [pc, #84]	; (8005234 <UART_SetConfig+0x118>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051e8:	4419      	add	r1, r3
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	009a      	lsls	r2, r3, #2
 80051f4:	441a      	add	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005200:	4b0c      	ldr	r3, [pc, #48]	; (8005234 <UART_SetConfig+0x118>)
 8005202:	fba3 0302 	umull	r0, r3, r3, r2
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	2064      	movs	r0, #100	; 0x64
 800520a:	fb00 f303 	mul.w	r3, r0, r3
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	3332      	adds	r3, #50	; 0x32
 8005214:	4a07      	ldr	r2, [pc, #28]	; (8005234 <UART_SetConfig+0x118>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	f003 020f 	and.w	r2, r3, #15
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	440a      	add	r2, r1
 8005226:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40013800 	.word	0x40013800
 8005234:	51eb851f 	.word	0x51eb851f

08005238 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800523c:	4904      	ldr	r1, [pc, #16]	; (8005250 <MX_FATFS_Init+0x18>)
 800523e:	4805      	ldr	r0, [pc, #20]	; (8005254 <MX_FATFS_Init+0x1c>)
 8005240:	f000 f8b0 	bl	80053a4 <FATFS_LinkDriver>
 8005244:	4603      	mov	r3, r0
 8005246:	461a      	mov	r2, r3
 8005248:	4b03      	ldr	r3, [pc, #12]	; (8005258 <MX_FATFS_Init+0x20>)
 800524a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800524c:	bf00      	nop
 800524e:	bd80      	pop	{r7, pc}
 8005250:	20000378 	.word	0x20000378
 8005254:	20000018 	.word	0x20000018
 8005258:	20000374 	.word	0x20000374

0800525c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    /*Stat = STA_NOINIT;
    return Stat;*/
    return SD_disk_initialize(pdrv);
 8005266:	79fb      	ldrb	r3, [r7, #7]
 8005268:	4618      	mov	r0, r3
 800526a:	f7fc f921 	bl	80014b0 <SD_disk_initialize>
 800526e:	4603      	mov	r3, r0
 8005270:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	4603      	mov	r3, r0
 8005282:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    /*Stat = STA_NOINIT;
    return Stat;*/
	return SD_disk_status(pdrv);
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	4618      	mov	r0, r3
 8005288:	f7fc f9f8 	bl	800167c <SD_disk_status>
 800528c:	4603      	mov	r3, r0
 800528e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	607a      	str	r2, [r7, #4]
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	4603      	mov	r3, r0
 80052a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 80052a8:	7bf8      	ldrb	r0, [r7, #15]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	f7fc f9f8 	bl	80016a4 <SD_disk_read>
 80052b4:	4603      	mov	r3, r0
 80052b6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4603      	mov	r3, r0
 80052ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 80052d0:	7bf8      	ldrb	r0, [r7, #15]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	68b9      	ldr	r1, [r7, #8]
 80052d8:	f7fc fa4e 	bl	8001778 <SD_disk_write>
 80052dc:	4603      	mov	r3, r0
 80052de:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	603a      	str	r2, [r7, #0]
 80052f2:	71fb      	strb	r3, [r7, #7]
 80052f4:	460b      	mov	r3, r1
 80052f6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    /*DRESULT res = RES_ERROR;
    return res;*/
    return SD_disk_ioctl(pdrv, cmd, buff);
 80052f8:	79fb      	ldrb	r3, [r7, #7]
 80052fa:	79b9      	ldrb	r1, [r7, #6]
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fc fabe 	bl	8001880 <SD_disk_ioctl>
 8005304:	4603      	mov	r3, r0
 8005306:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	4613      	mov	r3, r2
 800531c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800531e:	2301      	movs	r3, #1
 8005320:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005322:	2300      	movs	r3, #0
 8005324:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8005326:	4b1e      	ldr	r3, [pc, #120]	; (80053a0 <FATFS_LinkDriverEx+0x90>)
 8005328:	7a5b      	ldrb	r3, [r3, #9]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	d831      	bhi.n	8005394 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005330:	4b1b      	ldr	r3, [pc, #108]	; (80053a0 <FATFS_LinkDriverEx+0x90>)
 8005332:	7a5b      	ldrb	r3, [r3, #9]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	4b19      	ldr	r3, [pc, #100]	; (80053a0 <FATFS_LinkDriverEx+0x90>)
 800533a:	2100      	movs	r1, #0
 800533c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800533e:	4b18      	ldr	r3, [pc, #96]	; (80053a0 <FATFS_LinkDriverEx+0x90>)
 8005340:	7a5b      	ldrb	r3, [r3, #9]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	4a16      	ldr	r2, [pc, #88]	; (80053a0 <FATFS_LinkDriverEx+0x90>)
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800534e:	4b14      	ldr	r3, [pc, #80]	; (80053a0 <FATFS_LinkDriverEx+0x90>)
 8005350:	7a5b      	ldrb	r3, [r3, #9]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <FATFS_LinkDriverEx+0x90>)
 8005358:	4413      	add	r3, r2
 800535a:	79fa      	ldrb	r2, [r7, #7]
 800535c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <FATFS_LinkDriverEx+0x90>)
 8005360:	7a5b      	ldrb	r3, [r3, #9]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	b2d1      	uxtb	r1, r2
 8005368:	4a0d      	ldr	r2, [pc, #52]	; (80053a0 <FATFS_LinkDriverEx+0x90>)
 800536a:	7251      	strb	r1, [r2, #9]
 800536c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800536e:	7dbb      	ldrb	r3, [r7, #22]
 8005370:	3330      	adds	r3, #48	; 0x30
 8005372:	b2da      	uxtb	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	3301      	adds	r3, #1
 800537c:	223a      	movs	r2, #58	; 0x3a
 800537e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	3302      	adds	r3, #2
 8005384:	222f      	movs	r2, #47	; 0x2f
 8005386:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	3303      	adds	r3, #3
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8005394:	7dfb      	ldrb	r3, [r7, #23]
}
 8005396:	4618      	mov	r0, r3
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr
 80053a0:	2000037c 	.word	0x2000037c

080053a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80053ae:	2200      	movs	r2, #0
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff ffac 	bl	8005310 <FATFS_LinkDriverEx>
 80053b8:	4603      	mov	r3, r0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
	...

080053c4 <__errno>:
 80053c4:	4b01      	ldr	r3, [pc, #4]	; (80053cc <__errno+0x8>)
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	2000002c 	.word	0x2000002c

080053d0 <__libc_init_array>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	2600      	movs	r6, #0
 80053d4:	4d0c      	ldr	r5, [pc, #48]	; (8005408 <__libc_init_array+0x38>)
 80053d6:	4c0d      	ldr	r4, [pc, #52]	; (800540c <__libc_init_array+0x3c>)
 80053d8:	1b64      	subs	r4, r4, r5
 80053da:	10a4      	asrs	r4, r4, #2
 80053dc:	42a6      	cmp	r6, r4
 80053de:	d109      	bne.n	80053f4 <__libc_init_array+0x24>
 80053e0:	f003 f85c 	bl	800849c <_init>
 80053e4:	2600      	movs	r6, #0
 80053e6:	4d0a      	ldr	r5, [pc, #40]	; (8005410 <__libc_init_array+0x40>)
 80053e8:	4c0a      	ldr	r4, [pc, #40]	; (8005414 <__libc_init_array+0x44>)
 80053ea:	1b64      	subs	r4, r4, r5
 80053ec:	10a4      	asrs	r4, r4, #2
 80053ee:	42a6      	cmp	r6, r4
 80053f0:	d105      	bne.n	80053fe <__libc_init_array+0x2e>
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
 80053f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f8:	4798      	blx	r3
 80053fa:	3601      	adds	r6, #1
 80053fc:	e7ee      	b.n	80053dc <__libc_init_array+0xc>
 80053fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005402:	4798      	blx	r3
 8005404:	3601      	adds	r6, #1
 8005406:	e7f2      	b.n	80053ee <__libc_init_array+0x1e>
 8005408:	08008b14 	.word	0x08008b14
 800540c:	08008b14 	.word	0x08008b14
 8005410:	08008b14 	.word	0x08008b14
 8005414:	08008b18 	.word	0x08008b18

08005418 <memcpy>:
 8005418:	440a      	add	r2, r1
 800541a:	4291      	cmp	r1, r2
 800541c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005420:	d100      	bne.n	8005424 <memcpy+0xc>
 8005422:	4770      	bx	lr
 8005424:	b510      	push	{r4, lr}
 8005426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800542a:	4291      	cmp	r1, r2
 800542c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005430:	d1f9      	bne.n	8005426 <memcpy+0xe>
 8005432:	bd10      	pop	{r4, pc}

08005434 <memset>:
 8005434:	4603      	mov	r3, r0
 8005436:	4402      	add	r2, r0
 8005438:	4293      	cmp	r3, r2
 800543a:	d100      	bne.n	800543e <memset+0xa>
 800543c:	4770      	bx	lr
 800543e:	f803 1b01 	strb.w	r1, [r3], #1
 8005442:	e7f9      	b.n	8005438 <memset+0x4>

08005444 <__cvt>:
 8005444:	2b00      	cmp	r3, #0
 8005446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800544a:	461f      	mov	r7, r3
 800544c:	bfbb      	ittet	lt
 800544e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005452:	461f      	movlt	r7, r3
 8005454:	2300      	movge	r3, #0
 8005456:	232d      	movlt	r3, #45	; 0x2d
 8005458:	b088      	sub	sp, #32
 800545a:	4614      	mov	r4, r2
 800545c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800545e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005460:	7013      	strb	r3, [r2, #0]
 8005462:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005464:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005468:	f023 0820 	bic.w	r8, r3, #32
 800546c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005470:	d005      	beq.n	800547e <__cvt+0x3a>
 8005472:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005476:	d100      	bne.n	800547a <__cvt+0x36>
 8005478:	3501      	adds	r5, #1
 800547a:	2302      	movs	r3, #2
 800547c:	e000      	b.n	8005480 <__cvt+0x3c>
 800547e:	2303      	movs	r3, #3
 8005480:	aa07      	add	r2, sp, #28
 8005482:	9204      	str	r2, [sp, #16]
 8005484:	aa06      	add	r2, sp, #24
 8005486:	e9cd a202 	strd	sl, r2, [sp, #8]
 800548a:	e9cd 3500 	strd	r3, r5, [sp]
 800548e:	4622      	mov	r2, r4
 8005490:	463b      	mov	r3, r7
 8005492:	f000 fe31 	bl	80060f8 <_dtoa_r>
 8005496:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800549a:	4606      	mov	r6, r0
 800549c:	d102      	bne.n	80054a4 <__cvt+0x60>
 800549e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054a0:	07db      	lsls	r3, r3, #31
 80054a2:	d522      	bpl.n	80054ea <__cvt+0xa6>
 80054a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054a8:	eb06 0905 	add.w	r9, r6, r5
 80054ac:	d110      	bne.n	80054d0 <__cvt+0x8c>
 80054ae:	7833      	ldrb	r3, [r6, #0]
 80054b0:	2b30      	cmp	r3, #48	; 0x30
 80054b2:	d10a      	bne.n	80054ca <__cvt+0x86>
 80054b4:	2200      	movs	r2, #0
 80054b6:	2300      	movs	r3, #0
 80054b8:	4620      	mov	r0, r4
 80054ba:	4639      	mov	r1, r7
 80054bc:	f7fb fa74 	bl	80009a8 <__aeabi_dcmpeq>
 80054c0:	b918      	cbnz	r0, 80054ca <__cvt+0x86>
 80054c2:	f1c5 0501 	rsb	r5, r5, #1
 80054c6:	f8ca 5000 	str.w	r5, [sl]
 80054ca:	f8da 3000 	ldr.w	r3, [sl]
 80054ce:	4499      	add	r9, r3
 80054d0:	2200      	movs	r2, #0
 80054d2:	2300      	movs	r3, #0
 80054d4:	4620      	mov	r0, r4
 80054d6:	4639      	mov	r1, r7
 80054d8:	f7fb fa66 	bl	80009a8 <__aeabi_dcmpeq>
 80054dc:	b108      	cbz	r0, 80054e2 <__cvt+0x9e>
 80054de:	f8cd 901c 	str.w	r9, [sp, #28]
 80054e2:	2230      	movs	r2, #48	; 0x30
 80054e4:	9b07      	ldr	r3, [sp, #28]
 80054e6:	454b      	cmp	r3, r9
 80054e8:	d307      	bcc.n	80054fa <__cvt+0xb6>
 80054ea:	4630      	mov	r0, r6
 80054ec:	9b07      	ldr	r3, [sp, #28]
 80054ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80054f0:	1b9b      	subs	r3, r3, r6
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	b008      	add	sp, #32
 80054f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fa:	1c59      	adds	r1, r3, #1
 80054fc:	9107      	str	r1, [sp, #28]
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	e7f0      	b.n	80054e4 <__cvt+0xa0>

08005502 <__exponent>:
 8005502:	4603      	mov	r3, r0
 8005504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005506:	2900      	cmp	r1, #0
 8005508:	f803 2b02 	strb.w	r2, [r3], #2
 800550c:	bfb6      	itet	lt
 800550e:	222d      	movlt	r2, #45	; 0x2d
 8005510:	222b      	movge	r2, #43	; 0x2b
 8005512:	4249      	neglt	r1, r1
 8005514:	2909      	cmp	r1, #9
 8005516:	7042      	strb	r2, [r0, #1]
 8005518:	dd2b      	ble.n	8005572 <__exponent+0x70>
 800551a:	f10d 0407 	add.w	r4, sp, #7
 800551e:	46a4      	mov	ip, r4
 8005520:	270a      	movs	r7, #10
 8005522:	fb91 f6f7 	sdiv	r6, r1, r7
 8005526:	460a      	mov	r2, r1
 8005528:	46a6      	mov	lr, r4
 800552a:	fb07 1516 	mls	r5, r7, r6, r1
 800552e:	2a63      	cmp	r2, #99	; 0x63
 8005530:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005534:	4631      	mov	r1, r6
 8005536:	f104 34ff 	add.w	r4, r4, #4294967295
 800553a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800553e:	dcf0      	bgt.n	8005522 <__exponent+0x20>
 8005540:	3130      	adds	r1, #48	; 0x30
 8005542:	f1ae 0502 	sub.w	r5, lr, #2
 8005546:	f804 1c01 	strb.w	r1, [r4, #-1]
 800554a:	4629      	mov	r1, r5
 800554c:	1c44      	adds	r4, r0, #1
 800554e:	4561      	cmp	r1, ip
 8005550:	d30a      	bcc.n	8005568 <__exponent+0x66>
 8005552:	f10d 0209 	add.w	r2, sp, #9
 8005556:	eba2 020e 	sub.w	r2, r2, lr
 800555a:	4565      	cmp	r5, ip
 800555c:	bf88      	it	hi
 800555e:	2200      	movhi	r2, #0
 8005560:	4413      	add	r3, r2
 8005562:	1a18      	subs	r0, r3, r0
 8005564:	b003      	add	sp, #12
 8005566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005568:	f811 2b01 	ldrb.w	r2, [r1], #1
 800556c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005570:	e7ed      	b.n	800554e <__exponent+0x4c>
 8005572:	2330      	movs	r3, #48	; 0x30
 8005574:	3130      	adds	r1, #48	; 0x30
 8005576:	7083      	strb	r3, [r0, #2]
 8005578:	70c1      	strb	r1, [r0, #3]
 800557a:	1d03      	adds	r3, r0, #4
 800557c:	e7f1      	b.n	8005562 <__exponent+0x60>
	...

08005580 <_printf_float>:
 8005580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	b091      	sub	sp, #68	; 0x44
 8005586:	460c      	mov	r4, r1
 8005588:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800558c:	4616      	mov	r6, r2
 800558e:	461f      	mov	r7, r3
 8005590:	4605      	mov	r5, r0
 8005592:	f001 fd53 	bl	800703c <_localeconv_r>
 8005596:	6803      	ldr	r3, [r0, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	9309      	str	r3, [sp, #36]	; 0x24
 800559c:	f7fa fdd8 	bl	8000150 <strlen>
 80055a0:	2300      	movs	r3, #0
 80055a2:	930e      	str	r3, [sp, #56]	; 0x38
 80055a4:	f8d8 3000 	ldr.w	r3, [r8]
 80055a8:	900a      	str	r0, [sp, #40]	; 0x28
 80055aa:	3307      	adds	r3, #7
 80055ac:	f023 0307 	bic.w	r3, r3, #7
 80055b0:	f103 0208 	add.w	r2, r3, #8
 80055b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80055b8:	f8d4 b000 	ldr.w	fp, [r4]
 80055bc:	f8c8 2000 	str.w	r2, [r8]
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055c8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80055cc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80055d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80055d2:	f04f 32ff 	mov.w	r2, #4294967295
 80055d6:	4640      	mov	r0, r8
 80055d8:	4b9c      	ldr	r3, [pc, #624]	; (800584c <_printf_float+0x2cc>)
 80055da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055dc:	f7fb fa16 	bl	8000a0c <__aeabi_dcmpun>
 80055e0:	bb70      	cbnz	r0, 8005640 <_printf_float+0xc0>
 80055e2:	f04f 32ff 	mov.w	r2, #4294967295
 80055e6:	4640      	mov	r0, r8
 80055e8:	4b98      	ldr	r3, [pc, #608]	; (800584c <_printf_float+0x2cc>)
 80055ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055ec:	f7fb f9f0 	bl	80009d0 <__aeabi_dcmple>
 80055f0:	bb30      	cbnz	r0, 8005640 <_printf_float+0xc0>
 80055f2:	2200      	movs	r2, #0
 80055f4:	2300      	movs	r3, #0
 80055f6:	4640      	mov	r0, r8
 80055f8:	4651      	mov	r1, sl
 80055fa:	f7fb f9df 	bl	80009bc <__aeabi_dcmplt>
 80055fe:	b110      	cbz	r0, 8005606 <_printf_float+0x86>
 8005600:	232d      	movs	r3, #45	; 0x2d
 8005602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005606:	4b92      	ldr	r3, [pc, #584]	; (8005850 <_printf_float+0x2d0>)
 8005608:	4892      	ldr	r0, [pc, #584]	; (8005854 <_printf_float+0x2d4>)
 800560a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800560e:	bf94      	ite	ls
 8005610:	4698      	movls	r8, r3
 8005612:	4680      	movhi	r8, r0
 8005614:	2303      	movs	r3, #3
 8005616:	f04f 0a00 	mov.w	sl, #0
 800561a:	6123      	str	r3, [r4, #16]
 800561c:	f02b 0304 	bic.w	r3, fp, #4
 8005620:	6023      	str	r3, [r4, #0]
 8005622:	4633      	mov	r3, r6
 8005624:	4621      	mov	r1, r4
 8005626:	4628      	mov	r0, r5
 8005628:	9700      	str	r7, [sp, #0]
 800562a:	aa0f      	add	r2, sp, #60	; 0x3c
 800562c:	f000 f9d4 	bl	80059d8 <_printf_common>
 8005630:	3001      	adds	r0, #1
 8005632:	f040 8090 	bne.w	8005756 <_printf_float+0x1d6>
 8005636:	f04f 30ff 	mov.w	r0, #4294967295
 800563a:	b011      	add	sp, #68	; 0x44
 800563c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005640:	4642      	mov	r2, r8
 8005642:	4653      	mov	r3, sl
 8005644:	4640      	mov	r0, r8
 8005646:	4651      	mov	r1, sl
 8005648:	f7fb f9e0 	bl	8000a0c <__aeabi_dcmpun>
 800564c:	b148      	cbz	r0, 8005662 <_printf_float+0xe2>
 800564e:	f1ba 0f00 	cmp.w	sl, #0
 8005652:	bfb8      	it	lt
 8005654:	232d      	movlt	r3, #45	; 0x2d
 8005656:	4880      	ldr	r0, [pc, #512]	; (8005858 <_printf_float+0x2d8>)
 8005658:	bfb8      	it	lt
 800565a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800565e:	4b7f      	ldr	r3, [pc, #508]	; (800585c <_printf_float+0x2dc>)
 8005660:	e7d3      	b.n	800560a <_printf_float+0x8a>
 8005662:	6863      	ldr	r3, [r4, #4]
 8005664:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	d142      	bne.n	80056f2 <_printf_float+0x172>
 800566c:	2306      	movs	r3, #6
 800566e:	6063      	str	r3, [r4, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	9206      	str	r2, [sp, #24]
 8005674:	aa0e      	add	r2, sp, #56	; 0x38
 8005676:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800567a:	aa0d      	add	r2, sp, #52	; 0x34
 800567c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005680:	9203      	str	r2, [sp, #12]
 8005682:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005686:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800568a:	6023      	str	r3, [r4, #0]
 800568c:	6863      	ldr	r3, [r4, #4]
 800568e:	4642      	mov	r2, r8
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	4628      	mov	r0, r5
 8005694:	4653      	mov	r3, sl
 8005696:	910b      	str	r1, [sp, #44]	; 0x2c
 8005698:	f7ff fed4 	bl	8005444 <__cvt>
 800569c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800569e:	4680      	mov	r8, r0
 80056a0:	2947      	cmp	r1, #71	; 0x47
 80056a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80056a4:	d108      	bne.n	80056b8 <_printf_float+0x138>
 80056a6:	1cc8      	adds	r0, r1, #3
 80056a8:	db02      	blt.n	80056b0 <_printf_float+0x130>
 80056aa:	6863      	ldr	r3, [r4, #4]
 80056ac:	4299      	cmp	r1, r3
 80056ae:	dd40      	ble.n	8005732 <_printf_float+0x1b2>
 80056b0:	f1a9 0902 	sub.w	r9, r9, #2
 80056b4:	fa5f f989 	uxtb.w	r9, r9
 80056b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80056bc:	d81f      	bhi.n	80056fe <_printf_float+0x17e>
 80056be:	464a      	mov	r2, r9
 80056c0:	3901      	subs	r1, #1
 80056c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056c6:	910d      	str	r1, [sp, #52]	; 0x34
 80056c8:	f7ff ff1b 	bl	8005502 <__exponent>
 80056cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056ce:	4682      	mov	sl, r0
 80056d0:	1813      	adds	r3, r2, r0
 80056d2:	2a01      	cmp	r2, #1
 80056d4:	6123      	str	r3, [r4, #16]
 80056d6:	dc02      	bgt.n	80056de <_printf_float+0x15e>
 80056d8:	6822      	ldr	r2, [r4, #0]
 80056da:	07d2      	lsls	r2, r2, #31
 80056dc:	d501      	bpl.n	80056e2 <_printf_float+0x162>
 80056de:	3301      	adds	r3, #1
 80056e0:	6123      	str	r3, [r4, #16]
 80056e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d09b      	beq.n	8005622 <_printf_float+0xa2>
 80056ea:	232d      	movs	r3, #45	; 0x2d
 80056ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056f0:	e797      	b.n	8005622 <_printf_float+0xa2>
 80056f2:	2947      	cmp	r1, #71	; 0x47
 80056f4:	d1bc      	bne.n	8005670 <_printf_float+0xf0>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1ba      	bne.n	8005670 <_printf_float+0xf0>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e7b7      	b.n	800566e <_printf_float+0xee>
 80056fe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005702:	d118      	bne.n	8005736 <_printf_float+0x1b6>
 8005704:	2900      	cmp	r1, #0
 8005706:	6863      	ldr	r3, [r4, #4]
 8005708:	dd0b      	ble.n	8005722 <_printf_float+0x1a2>
 800570a:	6121      	str	r1, [r4, #16]
 800570c:	b913      	cbnz	r3, 8005714 <_printf_float+0x194>
 800570e:	6822      	ldr	r2, [r4, #0]
 8005710:	07d0      	lsls	r0, r2, #31
 8005712:	d502      	bpl.n	800571a <_printf_float+0x19a>
 8005714:	3301      	adds	r3, #1
 8005716:	440b      	add	r3, r1
 8005718:	6123      	str	r3, [r4, #16]
 800571a:	f04f 0a00 	mov.w	sl, #0
 800571e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005720:	e7df      	b.n	80056e2 <_printf_float+0x162>
 8005722:	b913      	cbnz	r3, 800572a <_printf_float+0x1aa>
 8005724:	6822      	ldr	r2, [r4, #0]
 8005726:	07d2      	lsls	r2, r2, #31
 8005728:	d501      	bpl.n	800572e <_printf_float+0x1ae>
 800572a:	3302      	adds	r3, #2
 800572c:	e7f4      	b.n	8005718 <_printf_float+0x198>
 800572e:	2301      	movs	r3, #1
 8005730:	e7f2      	b.n	8005718 <_printf_float+0x198>
 8005732:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005738:	4299      	cmp	r1, r3
 800573a:	db05      	blt.n	8005748 <_printf_float+0x1c8>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	6121      	str	r1, [r4, #16]
 8005740:	07d8      	lsls	r0, r3, #31
 8005742:	d5ea      	bpl.n	800571a <_printf_float+0x19a>
 8005744:	1c4b      	adds	r3, r1, #1
 8005746:	e7e7      	b.n	8005718 <_printf_float+0x198>
 8005748:	2900      	cmp	r1, #0
 800574a:	bfcc      	ite	gt
 800574c:	2201      	movgt	r2, #1
 800574e:	f1c1 0202 	rsble	r2, r1, #2
 8005752:	4413      	add	r3, r2
 8005754:	e7e0      	b.n	8005718 <_printf_float+0x198>
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	055a      	lsls	r2, r3, #21
 800575a:	d407      	bmi.n	800576c <_printf_float+0x1ec>
 800575c:	6923      	ldr	r3, [r4, #16]
 800575e:	4642      	mov	r2, r8
 8005760:	4631      	mov	r1, r6
 8005762:	4628      	mov	r0, r5
 8005764:	47b8      	blx	r7
 8005766:	3001      	adds	r0, #1
 8005768:	d12b      	bne.n	80057c2 <_printf_float+0x242>
 800576a:	e764      	b.n	8005636 <_printf_float+0xb6>
 800576c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005770:	f240 80dd 	bls.w	800592e <_printf_float+0x3ae>
 8005774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005778:	2200      	movs	r2, #0
 800577a:	2300      	movs	r3, #0
 800577c:	f7fb f914 	bl	80009a8 <__aeabi_dcmpeq>
 8005780:	2800      	cmp	r0, #0
 8005782:	d033      	beq.n	80057ec <_printf_float+0x26c>
 8005784:	2301      	movs	r3, #1
 8005786:	4631      	mov	r1, r6
 8005788:	4628      	mov	r0, r5
 800578a:	4a35      	ldr	r2, [pc, #212]	; (8005860 <_printf_float+0x2e0>)
 800578c:	47b8      	blx	r7
 800578e:	3001      	adds	r0, #1
 8005790:	f43f af51 	beq.w	8005636 <_printf_float+0xb6>
 8005794:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005798:	429a      	cmp	r2, r3
 800579a:	db02      	blt.n	80057a2 <_printf_float+0x222>
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	07d8      	lsls	r0, r3, #31
 80057a0:	d50f      	bpl.n	80057c2 <_printf_float+0x242>
 80057a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057a6:	4631      	mov	r1, r6
 80057a8:	4628      	mov	r0, r5
 80057aa:	47b8      	blx	r7
 80057ac:	3001      	adds	r0, #1
 80057ae:	f43f af42 	beq.w	8005636 <_printf_float+0xb6>
 80057b2:	f04f 0800 	mov.w	r8, #0
 80057b6:	f104 091a 	add.w	r9, r4, #26
 80057ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057bc:	3b01      	subs	r3, #1
 80057be:	4543      	cmp	r3, r8
 80057c0:	dc09      	bgt.n	80057d6 <_printf_float+0x256>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	079b      	lsls	r3, r3, #30
 80057c6:	f100 8102 	bmi.w	80059ce <_printf_float+0x44e>
 80057ca:	68e0      	ldr	r0, [r4, #12]
 80057cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057ce:	4298      	cmp	r0, r3
 80057d0:	bfb8      	it	lt
 80057d2:	4618      	movlt	r0, r3
 80057d4:	e731      	b.n	800563a <_printf_float+0xba>
 80057d6:	2301      	movs	r3, #1
 80057d8:	464a      	mov	r2, r9
 80057da:	4631      	mov	r1, r6
 80057dc:	4628      	mov	r0, r5
 80057de:	47b8      	blx	r7
 80057e0:	3001      	adds	r0, #1
 80057e2:	f43f af28 	beq.w	8005636 <_printf_float+0xb6>
 80057e6:	f108 0801 	add.w	r8, r8, #1
 80057ea:	e7e6      	b.n	80057ba <_printf_float+0x23a>
 80057ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	dc38      	bgt.n	8005864 <_printf_float+0x2e4>
 80057f2:	2301      	movs	r3, #1
 80057f4:	4631      	mov	r1, r6
 80057f6:	4628      	mov	r0, r5
 80057f8:	4a19      	ldr	r2, [pc, #100]	; (8005860 <_printf_float+0x2e0>)
 80057fa:	47b8      	blx	r7
 80057fc:	3001      	adds	r0, #1
 80057fe:	f43f af1a 	beq.w	8005636 <_printf_float+0xb6>
 8005802:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005806:	4313      	orrs	r3, r2
 8005808:	d102      	bne.n	8005810 <_printf_float+0x290>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	07d9      	lsls	r1, r3, #31
 800580e:	d5d8      	bpl.n	80057c2 <_printf_float+0x242>
 8005810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005814:	4631      	mov	r1, r6
 8005816:	4628      	mov	r0, r5
 8005818:	47b8      	blx	r7
 800581a:	3001      	adds	r0, #1
 800581c:	f43f af0b 	beq.w	8005636 <_printf_float+0xb6>
 8005820:	f04f 0900 	mov.w	r9, #0
 8005824:	f104 0a1a 	add.w	sl, r4, #26
 8005828:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800582a:	425b      	negs	r3, r3
 800582c:	454b      	cmp	r3, r9
 800582e:	dc01      	bgt.n	8005834 <_printf_float+0x2b4>
 8005830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005832:	e794      	b.n	800575e <_printf_float+0x1de>
 8005834:	2301      	movs	r3, #1
 8005836:	4652      	mov	r2, sl
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	47b8      	blx	r7
 800583e:	3001      	adds	r0, #1
 8005840:	f43f aef9 	beq.w	8005636 <_printf_float+0xb6>
 8005844:	f109 0901 	add.w	r9, r9, #1
 8005848:	e7ee      	b.n	8005828 <_printf_float+0x2a8>
 800584a:	bf00      	nop
 800584c:	7fefffff 	.word	0x7fefffff
 8005850:	0800873c 	.word	0x0800873c
 8005854:	08008740 	.word	0x08008740
 8005858:	08008748 	.word	0x08008748
 800585c:	08008744 	.word	0x08008744
 8005860:	0800874c 	.word	0x0800874c
 8005864:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005866:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005868:	429a      	cmp	r2, r3
 800586a:	bfa8      	it	ge
 800586c:	461a      	movge	r2, r3
 800586e:	2a00      	cmp	r2, #0
 8005870:	4691      	mov	r9, r2
 8005872:	dc37      	bgt.n	80058e4 <_printf_float+0x364>
 8005874:	f04f 0b00 	mov.w	fp, #0
 8005878:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800587c:	f104 021a 	add.w	r2, r4, #26
 8005880:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005884:	ebaa 0309 	sub.w	r3, sl, r9
 8005888:	455b      	cmp	r3, fp
 800588a:	dc33      	bgt.n	80058f4 <_printf_float+0x374>
 800588c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005890:	429a      	cmp	r2, r3
 8005892:	db3b      	blt.n	800590c <_printf_float+0x38c>
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	07da      	lsls	r2, r3, #31
 8005898:	d438      	bmi.n	800590c <_printf_float+0x38c>
 800589a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800589c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800589e:	eba3 020a 	sub.w	r2, r3, sl
 80058a2:	eba3 0901 	sub.w	r9, r3, r1
 80058a6:	4591      	cmp	r9, r2
 80058a8:	bfa8      	it	ge
 80058aa:	4691      	movge	r9, r2
 80058ac:	f1b9 0f00 	cmp.w	r9, #0
 80058b0:	dc34      	bgt.n	800591c <_printf_float+0x39c>
 80058b2:	f04f 0800 	mov.w	r8, #0
 80058b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058ba:	f104 0a1a 	add.w	sl, r4, #26
 80058be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	eba3 0309 	sub.w	r3, r3, r9
 80058c8:	4543      	cmp	r3, r8
 80058ca:	f77f af7a 	ble.w	80057c2 <_printf_float+0x242>
 80058ce:	2301      	movs	r3, #1
 80058d0:	4652      	mov	r2, sl
 80058d2:	4631      	mov	r1, r6
 80058d4:	4628      	mov	r0, r5
 80058d6:	47b8      	blx	r7
 80058d8:	3001      	adds	r0, #1
 80058da:	f43f aeac 	beq.w	8005636 <_printf_float+0xb6>
 80058de:	f108 0801 	add.w	r8, r8, #1
 80058e2:	e7ec      	b.n	80058be <_printf_float+0x33e>
 80058e4:	4613      	mov	r3, r2
 80058e6:	4631      	mov	r1, r6
 80058e8:	4642      	mov	r2, r8
 80058ea:	4628      	mov	r0, r5
 80058ec:	47b8      	blx	r7
 80058ee:	3001      	adds	r0, #1
 80058f0:	d1c0      	bne.n	8005874 <_printf_float+0x2f4>
 80058f2:	e6a0      	b.n	8005636 <_printf_float+0xb6>
 80058f4:	2301      	movs	r3, #1
 80058f6:	4631      	mov	r1, r6
 80058f8:	4628      	mov	r0, r5
 80058fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80058fc:	47b8      	blx	r7
 80058fe:	3001      	adds	r0, #1
 8005900:	f43f ae99 	beq.w	8005636 <_printf_float+0xb6>
 8005904:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005906:	f10b 0b01 	add.w	fp, fp, #1
 800590a:	e7b9      	b.n	8005880 <_printf_float+0x300>
 800590c:	4631      	mov	r1, r6
 800590e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005912:	4628      	mov	r0, r5
 8005914:	47b8      	blx	r7
 8005916:	3001      	adds	r0, #1
 8005918:	d1bf      	bne.n	800589a <_printf_float+0x31a>
 800591a:	e68c      	b.n	8005636 <_printf_float+0xb6>
 800591c:	464b      	mov	r3, r9
 800591e:	4631      	mov	r1, r6
 8005920:	4628      	mov	r0, r5
 8005922:	eb08 020a 	add.w	r2, r8, sl
 8005926:	47b8      	blx	r7
 8005928:	3001      	adds	r0, #1
 800592a:	d1c2      	bne.n	80058b2 <_printf_float+0x332>
 800592c:	e683      	b.n	8005636 <_printf_float+0xb6>
 800592e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005930:	2a01      	cmp	r2, #1
 8005932:	dc01      	bgt.n	8005938 <_printf_float+0x3b8>
 8005934:	07db      	lsls	r3, r3, #31
 8005936:	d537      	bpl.n	80059a8 <_printf_float+0x428>
 8005938:	2301      	movs	r3, #1
 800593a:	4642      	mov	r2, r8
 800593c:	4631      	mov	r1, r6
 800593e:	4628      	mov	r0, r5
 8005940:	47b8      	blx	r7
 8005942:	3001      	adds	r0, #1
 8005944:	f43f ae77 	beq.w	8005636 <_printf_float+0xb6>
 8005948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800594c:	4631      	mov	r1, r6
 800594e:	4628      	mov	r0, r5
 8005950:	47b8      	blx	r7
 8005952:	3001      	adds	r0, #1
 8005954:	f43f ae6f 	beq.w	8005636 <_printf_float+0xb6>
 8005958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800595c:	2200      	movs	r2, #0
 800595e:	2300      	movs	r3, #0
 8005960:	f7fb f822 	bl	80009a8 <__aeabi_dcmpeq>
 8005964:	b9d8      	cbnz	r0, 800599e <_printf_float+0x41e>
 8005966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005968:	f108 0201 	add.w	r2, r8, #1
 800596c:	3b01      	subs	r3, #1
 800596e:	4631      	mov	r1, r6
 8005970:	4628      	mov	r0, r5
 8005972:	47b8      	blx	r7
 8005974:	3001      	adds	r0, #1
 8005976:	d10e      	bne.n	8005996 <_printf_float+0x416>
 8005978:	e65d      	b.n	8005636 <_printf_float+0xb6>
 800597a:	2301      	movs	r3, #1
 800597c:	464a      	mov	r2, r9
 800597e:	4631      	mov	r1, r6
 8005980:	4628      	mov	r0, r5
 8005982:	47b8      	blx	r7
 8005984:	3001      	adds	r0, #1
 8005986:	f43f ae56 	beq.w	8005636 <_printf_float+0xb6>
 800598a:	f108 0801 	add.w	r8, r8, #1
 800598e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005990:	3b01      	subs	r3, #1
 8005992:	4543      	cmp	r3, r8
 8005994:	dcf1      	bgt.n	800597a <_printf_float+0x3fa>
 8005996:	4653      	mov	r3, sl
 8005998:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800599c:	e6e0      	b.n	8005760 <_printf_float+0x1e0>
 800599e:	f04f 0800 	mov.w	r8, #0
 80059a2:	f104 091a 	add.w	r9, r4, #26
 80059a6:	e7f2      	b.n	800598e <_printf_float+0x40e>
 80059a8:	2301      	movs	r3, #1
 80059aa:	4642      	mov	r2, r8
 80059ac:	e7df      	b.n	800596e <_printf_float+0x3ee>
 80059ae:	2301      	movs	r3, #1
 80059b0:	464a      	mov	r2, r9
 80059b2:	4631      	mov	r1, r6
 80059b4:	4628      	mov	r0, r5
 80059b6:	47b8      	blx	r7
 80059b8:	3001      	adds	r0, #1
 80059ba:	f43f ae3c 	beq.w	8005636 <_printf_float+0xb6>
 80059be:	f108 0801 	add.w	r8, r8, #1
 80059c2:	68e3      	ldr	r3, [r4, #12]
 80059c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80059c6:	1a5b      	subs	r3, r3, r1
 80059c8:	4543      	cmp	r3, r8
 80059ca:	dcf0      	bgt.n	80059ae <_printf_float+0x42e>
 80059cc:	e6fd      	b.n	80057ca <_printf_float+0x24a>
 80059ce:	f04f 0800 	mov.w	r8, #0
 80059d2:	f104 0919 	add.w	r9, r4, #25
 80059d6:	e7f4      	b.n	80059c2 <_printf_float+0x442>

080059d8 <_printf_common>:
 80059d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059dc:	4616      	mov	r6, r2
 80059de:	4699      	mov	r9, r3
 80059e0:	688a      	ldr	r2, [r1, #8]
 80059e2:	690b      	ldr	r3, [r1, #16]
 80059e4:	4607      	mov	r7, r0
 80059e6:	4293      	cmp	r3, r2
 80059e8:	bfb8      	it	lt
 80059ea:	4613      	movlt	r3, r2
 80059ec:	6033      	str	r3, [r6, #0]
 80059ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059f2:	460c      	mov	r4, r1
 80059f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059f8:	b10a      	cbz	r2, 80059fe <_printf_common+0x26>
 80059fa:	3301      	adds	r3, #1
 80059fc:	6033      	str	r3, [r6, #0]
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	0699      	lsls	r1, r3, #26
 8005a02:	bf42      	ittt	mi
 8005a04:	6833      	ldrmi	r3, [r6, #0]
 8005a06:	3302      	addmi	r3, #2
 8005a08:	6033      	strmi	r3, [r6, #0]
 8005a0a:	6825      	ldr	r5, [r4, #0]
 8005a0c:	f015 0506 	ands.w	r5, r5, #6
 8005a10:	d106      	bne.n	8005a20 <_printf_common+0x48>
 8005a12:	f104 0a19 	add.w	sl, r4, #25
 8005a16:	68e3      	ldr	r3, [r4, #12]
 8005a18:	6832      	ldr	r2, [r6, #0]
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	42ab      	cmp	r3, r5
 8005a1e:	dc28      	bgt.n	8005a72 <_printf_common+0x9a>
 8005a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a24:	1e13      	subs	r3, r2, #0
 8005a26:	6822      	ldr	r2, [r4, #0]
 8005a28:	bf18      	it	ne
 8005a2a:	2301      	movne	r3, #1
 8005a2c:	0692      	lsls	r2, r2, #26
 8005a2e:	d42d      	bmi.n	8005a8c <_printf_common+0xb4>
 8005a30:	4649      	mov	r1, r9
 8005a32:	4638      	mov	r0, r7
 8005a34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a38:	47c0      	blx	r8
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d020      	beq.n	8005a80 <_printf_common+0xa8>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	68e5      	ldr	r5, [r4, #12]
 8005a42:	f003 0306 	and.w	r3, r3, #6
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	bf18      	it	ne
 8005a4a:	2500      	movne	r5, #0
 8005a4c:	6832      	ldr	r2, [r6, #0]
 8005a4e:	f04f 0600 	mov.w	r6, #0
 8005a52:	68a3      	ldr	r3, [r4, #8]
 8005a54:	bf08      	it	eq
 8005a56:	1aad      	subeq	r5, r5, r2
 8005a58:	6922      	ldr	r2, [r4, #16]
 8005a5a:	bf08      	it	eq
 8005a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a60:	4293      	cmp	r3, r2
 8005a62:	bfc4      	itt	gt
 8005a64:	1a9b      	subgt	r3, r3, r2
 8005a66:	18ed      	addgt	r5, r5, r3
 8005a68:	341a      	adds	r4, #26
 8005a6a:	42b5      	cmp	r5, r6
 8005a6c:	d11a      	bne.n	8005aa4 <_printf_common+0xcc>
 8005a6e:	2000      	movs	r0, #0
 8005a70:	e008      	b.n	8005a84 <_printf_common+0xac>
 8005a72:	2301      	movs	r3, #1
 8005a74:	4652      	mov	r2, sl
 8005a76:	4649      	mov	r1, r9
 8005a78:	4638      	mov	r0, r7
 8005a7a:	47c0      	blx	r8
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d103      	bne.n	8005a88 <_printf_common+0xb0>
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295
 8005a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a88:	3501      	adds	r5, #1
 8005a8a:	e7c4      	b.n	8005a16 <_printf_common+0x3e>
 8005a8c:	2030      	movs	r0, #48	; 0x30
 8005a8e:	18e1      	adds	r1, r4, r3
 8005a90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a9a:	4422      	add	r2, r4
 8005a9c:	3302      	adds	r3, #2
 8005a9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005aa2:	e7c5      	b.n	8005a30 <_printf_common+0x58>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	4622      	mov	r2, r4
 8005aa8:	4649      	mov	r1, r9
 8005aaa:	4638      	mov	r0, r7
 8005aac:	47c0      	blx	r8
 8005aae:	3001      	adds	r0, #1
 8005ab0:	d0e6      	beq.n	8005a80 <_printf_common+0xa8>
 8005ab2:	3601      	adds	r6, #1
 8005ab4:	e7d9      	b.n	8005a6a <_printf_common+0x92>
	...

08005ab8 <_printf_i>:
 8005ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005abc:	7e0f      	ldrb	r7, [r1, #24]
 8005abe:	4691      	mov	r9, r2
 8005ac0:	2f78      	cmp	r7, #120	; 0x78
 8005ac2:	4680      	mov	r8, r0
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	469a      	mov	sl, r3
 8005ac8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005aca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ace:	d807      	bhi.n	8005ae0 <_printf_i+0x28>
 8005ad0:	2f62      	cmp	r7, #98	; 0x62
 8005ad2:	d80a      	bhi.n	8005aea <_printf_i+0x32>
 8005ad4:	2f00      	cmp	r7, #0
 8005ad6:	f000 80d9 	beq.w	8005c8c <_printf_i+0x1d4>
 8005ada:	2f58      	cmp	r7, #88	; 0x58
 8005adc:	f000 80a4 	beq.w	8005c28 <_printf_i+0x170>
 8005ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ae8:	e03a      	b.n	8005b60 <_printf_i+0xa8>
 8005aea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005aee:	2b15      	cmp	r3, #21
 8005af0:	d8f6      	bhi.n	8005ae0 <_printf_i+0x28>
 8005af2:	a101      	add	r1, pc, #4	; (adr r1, 8005af8 <_printf_i+0x40>)
 8005af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005af8:	08005b51 	.word	0x08005b51
 8005afc:	08005b65 	.word	0x08005b65
 8005b00:	08005ae1 	.word	0x08005ae1
 8005b04:	08005ae1 	.word	0x08005ae1
 8005b08:	08005ae1 	.word	0x08005ae1
 8005b0c:	08005ae1 	.word	0x08005ae1
 8005b10:	08005b65 	.word	0x08005b65
 8005b14:	08005ae1 	.word	0x08005ae1
 8005b18:	08005ae1 	.word	0x08005ae1
 8005b1c:	08005ae1 	.word	0x08005ae1
 8005b20:	08005ae1 	.word	0x08005ae1
 8005b24:	08005c73 	.word	0x08005c73
 8005b28:	08005b95 	.word	0x08005b95
 8005b2c:	08005c55 	.word	0x08005c55
 8005b30:	08005ae1 	.word	0x08005ae1
 8005b34:	08005ae1 	.word	0x08005ae1
 8005b38:	08005c95 	.word	0x08005c95
 8005b3c:	08005ae1 	.word	0x08005ae1
 8005b40:	08005b95 	.word	0x08005b95
 8005b44:	08005ae1 	.word	0x08005ae1
 8005b48:	08005ae1 	.word	0x08005ae1
 8005b4c:	08005c5d 	.word	0x08005c5d
 8005b50:	682b      	ldr	r3, [r5, #0]
 8005b52:	1d1a      	adds	r2, r3, #4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	602a      	str	r2, [r5, #0]
 8005b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b60:	2301      	movs	r3, #1
 8005b62:	e0a4      	b.n	8005cae <_printf_i+0x1f6>
 8005b64:	6820      	ldr	r0, [r4, #0]
 8005b66:	6829      	ldr	r1, [r5, #0]
 8005b68:	0606      	lsls	r6, r0, #24
 8005b6a:	f101 0304 	add.w	r3, r1, #4
 8005b6e:	d50a      	bpl.n	8005b86 <_printf_i+0xce>
 8005b70:	680e      	ldr	r6, [r1, #0]
 8005b72:	602b      	str	r3, [r5, #0]
 8005b74:	2e00      	cmp	r6, #0
 8005b76:	da03      	bge.n	8005b80 <_printf_i+0xc8>
 8005b78:	232d      	movs	r3, #45	; 0x2d
 8005b7a:	4276      	negs	r6, r6
 8005b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b80:	230a      	movs	r3, #10
 8005b82:	485e      	ldr	r0, [pc, #376]	; (8005cfc <_printf_i+0x244>)
 8005b84:	e019      	b.n	8005bba <_printf_i+0x102>
 8005b86:	680e      	ldr	r6, [r1, #0]
 8005b88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b8c:	602b      	str	r3, [r5, #0]
 8005b8e:	bf18      	it	ne
 8005b90:	b236      	sxthne	r6, r6
 8005b92:	e7ef      	b.n	8005b74 <_printf_i+0xbc>
 8005b94:	682b      	ldr	r3, [r5, #0]
 8005b96:	6820      	ldr	r0, [r4, #0]
 8005b98:	1d19      	adds	r1, r3, #4
 8005b9a:	6029      	str	r1, [r5, #0]
 8005b9c:	0601      	lsls	r1, r0, #24
 8005b9e:	d501      	bpl.n	8005ba4 <_printf_i+0xec>
 8005ba0:	681e      	ldr	r6, [r3, #0]
 8005ba2:	e002      	b.n	8005baa <_printf_i+0xf2>
 8005ba4:	0646      	lsls	r6, r0, #25
 8005ba6:	d5fb      	bpl.n	8005ba0 <_printf_i+0xe8>
 8005ba8:	881e      	ldrh	r6, [r3, #0]
 8005baa:	2f6f      	cmp	r7, #111	; 0x6f
 8005bac:	bf0c      	ite	eq
 8005bae:	2308      	moveq	r3, #8
 8005bb0:	230a      	movne	r3, #10
 8005bb2:	4852      	ldr	r0, [pc, #328]	; (8005cfc <_printf_i+0x244>)
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bba:	6865      	ldr	r5, [r4, #4]
 8005bbc:	2d00      	cmp	r5, #0
 8005bbe:	bfa8      	it	ge
 8005bc0:	6821      	ldrge	r1, [r4, #0]
 8005bc2:	60a5      	str	r5, [r4, #8]
 8005bc4:	bfa4      	itt	ge
 8005bc6:	f021 0104 	bicge.w	r1, r1, #4
 8005bca:	6021      	strge	r1, [r4, #0]
 8005bcc:	b90e      	cbnz	r6, 8005bd2 <_printf_i+0x11a>
 8005bce:	2d00      	cmp	r5, #0
 8005bd0:	d04d      	beq.n	8005c6e <_printf_i+0x1b6>
 8005bd2:	4615      	mov	r5, r2
 8005bd4:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bd8:	fb03 6711 	mls	r7, r3, r1, r6
 8005bdc:	5dc7      	ldrb	r7, [r0, r7]
 8005bde:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005be2:	4637      	mov	r7, r6
 8005be4:	42bb      	cmp	r3, r7
 8005be6:	460e      	mov	r6, r1
 8005be8:	d9f4      	bls.n	8005bd4 <_printf_i+0x11c>
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d10b      	bne.n	8005c06 <_printf_i+0x14e>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	07de      	lsls	r6, r3, #31
 8005bf2:	d508      	bpl.n	8005c06 <_printf_i+0x14e>
 8005bf4:	6923      	ldr	r3, [r4, #16]
 8005bf6:	6861      	ldr	r1, [r4, #4]
 8005bf8:	4299      	cmp	r1, r3
 8005bfa:	bfde      	ittt	le
 8005bfc:	2330      	movle	r3, #48	; 0x30
 8005bfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c06:	1b52      	subs	r2, r2, r5
 8005c08:	6122      	str	r2, [r4, #16]
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	4640      	mov	r0, r8
 8005c10:	f8cd a000 	str.w	sl, [sp]
 8005c14:	aa03      	add	r2, sp, #12
 8005c16:	f7ff fedf 	bl	80059d8 <_printf_common>
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d14c      	bne.n	8005cb8 <_printf_i+0x200>
 8005c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c22:	b004      	add	sp, #16
 8005c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c28:	4834      	ldr	r0, [pc, #208]	; (8005cfc <_printf_i+0x244>)
 8005c2a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c2e:	6829      	ldr	r1, [r5, #0]
 8005c30:	6823      	ldr	r3, [r4, #0]
 8005c32:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c36:	6029      	str	r1, [r5, #0]
 8005c38:	061d      	lsls	r5, r3, #24
 8005c3a:	d514      	bpl.n	8005c66 <_printf_i+0x1ae>
 8005c3c:	07df      	lsls	r7, r3, #31
 8005c3e:	bf44      	itt	mi
 8005c40:	f043 0320 	orrmi.w	r3, r3, #32
 8005c44:	6023      	strmi	r3, [r4, #0]
 8005c46:	b91e      	cbnz	r6, 8005c50 <_printf_i+0x198>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	f023 0320 	bic.w	r3, r3, #32
 8005c4e:	6023      	str	r3, [r4, #0]
 8005c50:	2310      	movs	r3, #16
 8005c52:	e7af      	b.n	8005bb4 <_printf_i+0xfc>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	f043 0320 	orr.w	r3, r3, #32
 8005c5a:	6023      	str	r3, [r4, #0]
 8005c5c:	2378      	movs	r3, #120	; 0x78
 8005c5e:	4828      	ldr	r0, [pc, #160]	; (8005d00 <_printf_i+0x248>)
 8005c60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c64:	e7e3      	b.n	8005c2e <_printf_i+0x176>
 8005c66:	0659      	lsls	r1, r3, #25
 8005c68:	bf48      	it	mi
 8005c6a:	b2b6      	uxthmi	r6, r6
 8005c6c:	e7e6      	b.n	8005c3c <_printf_i+0x184>
 8005c6e:	4615      	mov	r5, r2
 8005c70:	e7bb      	b.n	8005bea <_printf_i+0x132>
 8005c72:	682b      	ldr	r3, [r5, #0]
 8005c74:	6826      	ldr	r6, [r4, #0]
 8005c76:	1d18      	adds	r0, r3, #4
 8005c78:	6961      	ldr	r1, [r4, #20]
 8005c7a:	6028      	str	r0, [r5, #0]
 8005c7c:	0635      	lsls	r5, r6, #24
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	d501      	bpl.n	8005c86 <_printf_i+0x1ce>
 8005c82:	6019      	str	r1, [r3, #0]
 8005c84:	e002      	b.n	8005c8c <_printf_i+0x1d4>
 8005c86:	0670      	lsls	r0, r6, #25
 8005c88:	d5fb      	bpl.n	8005c82 <_printf_i+0x1ca>
 8005c8a:	8019      	strh	r1, [r3, #0]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	4615      	mov	r5, r2
 8005c90:	6123      	str	r3, [r4, #16]
 8005c92:	e7ba      	b.n	8005c0a <_printf_i+0x152>
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	2100      	movs	r1, #0
 8005c98:	1d1a      	adds	r2, r3, #4
 8005c9a:	602a      	str	r2, [r5, #0]
 8005c9c:	681d      	ldr	r5, [r3, #0]
 8005c9e:	6862      	ldr	r2, [r4, #4]
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f001 fa3f 	bl	8007124 <memchr>
 8005ca6:	b108      	cbz	r0, 8005cac <_printf_i+0x1f4>
 8005ca8:	1b40      	subs	r0, r0, r5
 8005caa:	6060      	str	r0, [r4, #4]
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	6123      	str	r3, [r4, #16]
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cb6:	e7a8      	b.n	8005c0a <_printf_i+0x152>
 8005cb8:	462a      	mov	r2, r5
 8005cba:	4649      	mov	r1, r9
 8005cbc:	4640      	mov	r0, r8
 8005cbe:	6923      	ldr	r3, [r4, #16]
 8005cc0:	47d0      	blx	sl
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	d0ab      	beq.n	8005c1e <_printf_i+0x166>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	079b      	lsls	r3, r3, #30
 8005cca:	d413      	bmi.n	8005cf4 <_printf_i+0x23c>
 8005ccc:	68e0      	ldr	r0, [r4, #12]
 8005cce:	9b03      	ldr	r3, [sp, #12]
 8005cd0:	4298      	cmp	r0, r3
 8005cd2:	bfb8      	it	lt
 8005cd4:	4618      	movlt	r0, r3
 8005cd6:	e7a4      	b.n	8005c22 <_printf_i+0x16a>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	4632      	mov	r2, r6
 8005cdc:	4649      	mov	r1, r9
 8005cde:	4640      	mov	r0, r8
 8005ce0:	47d0      	blx	sl
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d09b      	beq.n	8005c1e <_printf_i+0x166>
 8005ce6:	3501      	adds	r5, #1
 8005ce8:	68e3      	ldr	r3, [r4, #12]
 8005cea:	9903      	ldr	r1, [sp, #12]
 8005cec:	1a5b      	subs	r3, r3, r1
 8005cee:	42ab      	cmp	r3, r5
 8005cf0:	dcf2      	bgt.n	8005cd8 <_printf_i+0x220>
 8005cf2:	e7eb      	b.n	8005ccc <_printf_i+0x214>
 8005cf4:	2500      	movs	r5, #0
 8005cf6:	f104 0619 	add.w	r6, r4, #25
 8005cfa:	e7f5      	b.n	8005ce8 <_printf_i+0x230>
 8005cfc:	0800874e 	.word	0x0800874e
 8005d00:	0800875f 	.word	0x0800875f

08005d04 <iprintf>:
 8005d04:	b40f      	push	{r0, r1, r2, r3}
 8005d06:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <iprintf+0x2c>)
 8005d08:	b513      	push	{r0, r1, r4, lr}
 8005d0a:	681c      	ldr	r4, [r3, #0]
 8005d0c:	b124      	cbz	r4, 8005d18 <iprintf+0x14>
 8005d0e:	69a3      	ldr	r3, [r4, #24]
 8005d10:	b913      	cbnz	r3, 8005d18 <iprintf+0x14>
 8005d12:	4620      	mov	r0, r4
 8005d14:	f001 f8f4 	bl	8006f00 <__sinit>
 8005d18:	ab05      	add	r3, sp, #20
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	9a04      	ldr	r2, [sp, #16]
 8005d1e:	68a1      	ldr	r1, [r4, #8]
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	f002 f803 	bl	8007d2c <_vfiprintf_r>
 8005d26:	b002      	add	sp, #8
 8005d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d2c:	b004      	add	sp, #16
 8005d2e:	4770      	bx	lr
 8005d30:	2000002c 	.word	0x2000002c

08005d34 <_puts_r>:
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	460e      	mov	r6, r1
 8005d38:	4605      	mov	r5, r0
 8005d3a:	b118      	cbz	r0, 8005d44 <_puts_r+0x10>
 8005d3c:	6983      	ldr	r3, [r0, #24]
 8005d3e:	b90b      	cbnz	r3, 8005d44 <_puts_r+0x10>
 8005d40:	f001 f8de 	bl	8006f00 <__sinit>
 8005d44:	69ab      	ldr	r3, [r5, #24]
 8005d46:	68ac      	ldr	r4, [r5, #8]
 8005d48:	b913      	cbnz	r3, 8005d50 <_puts_r+0x1c>
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	f001 f8d8 	bl	8006f00 <__sinit>
 8005d50:	4b2c      	ldr	r3, [pc, #176]	; (8005e04 <_puts_r+0xd0>)
 8005d52:	429c      	cmp	r4, r3
 8005d54:	d120      	bne.n	8005d98 <_puts_r+0x64>
 8005d56:	686c      	ldr	r4, [r5, #4]
 8005d58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d5a:	07db      	lsls	r3, r3, #31
 8005d5c:	d405      	bmi.n	8005d6a <_puts_r+0x36>
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	0598      	lsls	r0, r3, #22
 8005d62:	d402      	bmi.n	8005d6a <_puts_r+0x36>
 8005d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d66:	f001 f96e 	bl	8007046 <__retarget_lock_acquire_recursive>
 8005d6a:	89a3      	ldrh	r3, [r4, #12]
 8005d6c:	0719      	lsls	r1, r3, #28
 8005d6e:	d51d      	bpl.n	8005dac <_puts_r+0x78>
 8005d70:	6923      	ldr	r3, [r4, #16]
 8005d72:	b1db      	cbz	r3, 8005dac <_puts_r+0x78>
 8005d74:	3e01      	subs	r6, #1
 8005d76:	68a3      	ldr	r3, [r4, #8]
 8005d78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	60a3      	str	r3, [r4, #8]
 8005d80:	bb39      	cbnz	r1, 8005dd2 <_puts_r+0x9e>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	da38      	bge.n	8005df8 <_puts_r+0xc4>
 8005d86:	4622      	mov	r2, r4
 8005d88:	210a      	movs	r1, #10
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f000 f868 	bl	8005e60 <__swbuf_r>
 8005d90:	3001      	adds	r0, #1
 8005d92:	d011      	beq.n	8005db8 <_puts_r+0x84>
 8005d94:	250a      	movs	r5, #10
 8005d96:	e011      	b.n	8005dbc <_puts_r+0x88>
 8005d98:	4b1b      	ldr	r3, [pc, #108]	; (8005e08 <_puts_r+0xd4>)
 8005d9a:	429c      	cmp	r4, r3
 8005d9c:	d101      	bne.n	8005da2 <_puts_r+0x6e>
 8005d9e:	68ac      	ldr	r4, [r5, #8]
 8005da0:	e7da      	b.n	8005d58 <_puts_r+0x24>
 8005da2:	4b1a      	ldr	r3, [pc, #104]	; (8005e0c <_puts_r+0xd8>)
 8005da4:	429c      	cmp	r4, r3
 8005da6:	bf08      	it	eq
 8005da8:	68ec      	ldreq	r4, [r5, #12]
 8005daa:	e7d5      	b.n	8005d58 <_puts_r+0x24>
 8005dac:	4621      	mov	r1, r4
 8005dae:	4628      	mov	r0, r5
 8005db0:	f000 f8a8 	bl	8005f04 <__swsetup_r>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d0dd      	beq.n	8005d74 <_puts_r+0x40>
 8005db8:	f04f 35ff 	mov.w	r5, #4294967295
 8005dbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dbe:	07da      	lsls	r2, r3, #31
 8005dc0:	d405      	bmi.n	8005dce <_puts_r+0x9a>
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	059b      	lsls	r3, r3, #22
 8005dc6:	d402      	bmi.n	8005dce <_puts_r+0x9a>
 8005dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dca:	f001 f93d 	bl	8007048 <__retarget_lock_release_recursive>
 8005dce:	4628      	mov	r0, r5
 8005dd0:	bd70      	pop	{r4, r5, r6, pc}
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	da04      	bge.n	8005de0 <_puts_r+0xac>
 8005dd6:	69a2      	ldr	r2, [r4, #24]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	dc06      	bgt.n	8005dea <_puts_r+0xb6>
 8005ddc:	290a      	cmp	r1, #10
 8005dde:	d004      	beq.n	8005dea <_puts_r+0xb6>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	6022      	str	r2, [r4, #0]
 8005de6:	7019      	strb	r1, [r3, #0]
 8005de8:	e7c5      	b.n	8005d76 <_puts_r+0x42>
 8005dea:	4622      	mov	r2, r4
 8005dec:	4628      	mov	r0, r5
 8005dee:	f000 f837 	bl	8005e60 <__swbuf_r>
 8005df2:	3001      	adds	r0, #1
 8005df4:	d1bf      	bne.n	8005d76 <_puts_r+0x42>
 8005df6:	e7df      	b.n	8005db8 <_puts_r+0x84>
 8005df8:	250a      	movs	r5, #10
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	6022      	str	r2, [r4, #0]
 8005e00:	701d      	strb	r5, [r3, #0]
 8005e02:	e7db      	b.n	8005dbc <_puts_r+0x88>
 8005e04:	08008820 	.word	0x08008820
 8005e08:	08008840 	.word	0x08008840
 8005e0c:	08008800 	.word	0x08008800

08005e10 <puts>:
 8005e10:	4b02      	ldr	r3, [pc, #8]	; (8005e1c <puts+0xc>)
 8005e12:	4601      	mov	r1, r0
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	f7ff bf8d 	b.w	8005d34 <_puts_r>
 8005e1a:	bf00      	nop
 8005e1c:	2000002c 	.word	0x2000002c

08005e20 <siprintf>:
 8005e20:	b40e      	push	{r1, r2, r3}
 8005e22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e26:	b500      	push	{lr}
 8005e28:	b09c      	sub	sp, #112	; 0x70
 8005e2a:	ab1d      	add	r3, sp, #116	; 0x74
 8005e2c:	9002      	str	r0, [sp, #8]
 8005e2e:	9006      	str	r0, [sp, #24]
 8005e30:	9107      	str	r1, [sp, #28]
 8005e32:	9104      	str	r1, [sp, #16]
 8005e34:	4808      	ldr	r0, [pc, #32]	; (8005e58 <siprintf+0x38>)
 8005e36:	4909      	ldr	r1, [pc, #36]	; (8005e5c <siprintf+0x3c>)
 8005e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e3c:	9105      	str	r1, [sp, #20]
 8005e3e:	6800      	ldr	r0, [r0, #0]
 8005e40:	a902      	add	r1, sp, #8
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	f001 fe4a 	bl	8007adc <_svfiprintf_r>
 8005e48:	2200      	movs	r2, #0
 8005e4a:	9b02      	ldr	r3, [sp, #8]
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	b01c      	add	sp, #112	; 0x70
 8005e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e54:	b003      	add	sp, #12
 8005e56:	4770      	bx	lr
 8005e58:	2000002c 	.word	0x2000002c
 8005e5c:	ffff0208 	.word	0xffff0208

08005e60 <__swbuf_r>:
 8005e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e62:	460e      	mov	r6, r1
 8005e64:	4614      	mov	r4, r2
 8005e66:	4605      	mov	r5, r0
 8005e68:	b118      	cbz	r0, 8005e72 <__swbuf_r+0x12>
 8005e6a:	6983      	ldr	r3, [r0, #24]
 8005e6c:	b90b      	cbnz	r3, 8005e72 <__swbuf_r+0x12>
 8005e6e:	f001 f847 	bl	8006f00 <__sinit>
 8005e72:	4b21      	ldr	r3, [pc, #132]	; (8005ef8 <__swbuf_r+0x98>)
 8005e74:	429c      	cmp	r4, r3
 8005e76:	d12b      	bne.n	8005ed0 <__swbuf_r+0x70>
 8005e78:	686c      	ldr	r4, [r5, #4]
 8005e7a:	69a3      	ldr	r3, [r4, #24]
 8005e7c:	60a3      	str	r3, [r4, #8]
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	071a      	lsls	r2, r3, #28
 8005e82:	d52f      	bpl.n	8005ee4 <__swbuf_r+0x84>
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	b36b      	cbz	r3, 8005ee4 <__swbuf_r+0x84>
 8005e88:	6923      	ldr	r3, [r4, #16]
 8005e8a:	6820      	ldr	r0, [r4, #0]
 8005e8c:	b2f6      	uxtb	r6, r6
 8005e8e:	1ac0      	subs	r0, r0, r3
 8005e90:	6963      	ldr	r3, [r4, #20]
 8005e92:	4637      	mov	r7, r6
 8005e94:	4283      	cmp	r3, r0
 8005e96:	dc04      	bgt.n	8005ea2 <__swbuf_r+0x42>
 8005e98:	4621      	mov	r1, r4
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	f000 ff9c 	bl	8006dd8 <_fflush_r>
 8005ea0:	bb30      	cbnz	r0, 8005ef0 <__swbuf_r+0x90>
 8005ea2:	68a3      	ldr	r3, [r4, #8]
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	60a3      	str	r3, [r4, #8]
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	6022      	str	r2, [r4, #0]
 8005eb0:	701e      	strb	r6, [r3, #0]
 8005eb2:	6963      	ldr	r3, [r4, #20]
 8005eb4:	4283      	cmp	r3, r0
 8005eb6:	d004      	beq.n	8005ec2 <__swbuf_r+0x62>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	07db      	lsls	r3, r3, #31
 8005ebc:	d506      	bpl.n	8005ecc <__swbuf_r+0x6c>
 8005ebe:	2e0a      	cmp	r6, #10
 8005ec0:	d104      	bne.n	8005ecc <__swbuf_r+0x6c>
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	f000 ff87 	bl	8006dd8 <_fflush_r>
 8005eca:	b988      	cbnz	r0, 8005ef0 <__swbuf_r+0x90>
 8005ecc:	4638      	mov	r0, r7
 8005ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <__swbuf_r+0x9c>)
 8005ed2:	429c      	cmp	r4, r3
 8005ed4:	d101      	bne.n	8005eda <__swbuf_r+0x7a>
 8005ed6:	68ac      	ldr	r4, [r5, #8]
 8005ed8:	e7cf      	b.n	8005e7a <__swbuf_r+0x1a>
 8005eda:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <__swbuf_r+0xa0>)
 8005edc:	429c      	cmp	r4, r3
 8005ede:	bf08      	it	eq
 8005ee0:	68ec      	ldreq	r4, [r5, #12]
 8005ee2:	e7ca      	b.n	8005e7a <__swbuf_r+0x1a>
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 f80c 	bl	8005f04 <__swsetup_r>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	d0cb      	beq.n	8005e88 <__swbuf_r+0x28>
 8005ef0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ef4:	e7ea      	b.n	8005ecc <__swbuf_r+0x6c>
 8005ef6:	bf00      	nop
 8005ef8:	08008820 	.word	0x08008820
 8005efc:	08008840 	.word	0x08008840
 8005f00:	08008800 	.word	0x08008800

08005f04 <__swsetup_r>:
 8005f04:	4b32      	ldr	r3, [pc, #200]	; (8005fd0 <__swsetup_r+0xcc>)
 8005f06:	b570      	push	{r4, r5, r6, lr}
 8005f08:	681d      	ldr	r5, [r3, #0]
 8005f0a:	4606      	mov	r6, r0
 8005f0c:	460c      	mov	r4, r1
 8005f0e:	b125      	cbz	r5, 8005f1a <__swsetup_r+0x16>
 8005f10:	69ab      	ldr	r3, [r5, #24]
 8005f12:	b913      	cbnz	r3, 8005f1a <__swsetup_r+0x16>
 8005f14:	4628      	mov	r0, r5
 8005f16:	f000 fff3 	bl	8006f00 <__sinit>
 8005f1a:	4b2e      	ldr	r3, [pc, #184]	; (8005fd4 <__swsetup_r+0xd0>)
 8005f1c:	429c      	cmp	r4, r3
 8005f1e:	d10f      	bne.n	8005f40 <__swsetup_r+0x3c>
 8005f20:	686c      	ldr	r4, [r5, #4]
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f28:	0719      	lsls	r1, r3, #28
 8005f2a:	d42c      	bmi.n	8005f86 <__swsetup_r+0x82>
 8005f2c:	06dd      	lsls	r5, r3, #27
 8005f2e:	d411      	bmi.n	8005f54 <__swsetup_r+0x50>
 8005f30:	2309      	movs	r3, #9
 8005f32:	6033      	str	r3, [r6, #0]
 8005f34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f38:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3c:	81a3      	strh	r3, [r4, #12]
 8005f3e:	e03e      	b.n	8005fbe <__swsetup_r+0xba>
 8005f40:	4b25      	ldr	r3, [pc, #148]	; (8005fd8 <__swsetup_r+0xd4>)
 8005f42:	429c      	cmp	r4, r3
 8005f44:	d101      	bne.n	8005f4a <__swsetup_r+0x46>
 8005f46:	68ac      	ldr	r4, [r5, #8]
 8005f48:	e7eb      	b.n	8005f22 <__swsetup_r+0x1e>
 8005f4a:	4b24      	ldr	r3, [pc, #144]	; (8005fdc <__swsetup_r+0xd8>)
 8005f4c:	429c      	cmp	r4, r3
 8005f4e:	bf08      	it	eq
 8005f50:	68ec      	ldreq	r4, [r5, #12]
 8005f52:	e7e6      	b.n	8005f22 <__swsetup_r+0x1e>
 8005f54:	0758      	lsls	r0, r3, #29
 8005f56:	d512      	bpl.n	8005f7e <__swsetup_r+0x7a>
 8005f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f5a:	b141      	cbz	r1, 8005f6e <__swsetup_r+0x6a>
 8005f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f60:	4299      	cmp	r1, r3
 8005f62:	d002      	beq.n	8005f6a <__swsetup_r+0x66>
 8005f64:	4630      	mov	r0, r6
 8005f66:	f001 fc81 	bl	800786c <_free_r>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	6363      	str	r3, [r4, #52]	; 0x34
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f74:	81a3      	strh	r3, [r4, #12]
 8005f76:	2300      	movs	r3, #0
 8005f78:	6063      	str	r3, [r4, #4]
 8005f7a:	6923      	ldr	r3, [r4, #16]
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	f043 0308 	orr.w	r3, r3, #8
 8005f84:	81a3      	strh	r3, [r4, #12]
 8005f86:	6923      	ldr	r3, [r4, #16]
 8005f88:	b94b      	cbnz	r3, 8005f9e <__swsetup_r+0x9a>
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f94:	d003      	beq.n	8005f9e <__swsetup_r+0x9a>
 8005f96:	4621      	mov	r1, r4
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f001 f87b 	bl	8007094 <__smakebuf_r>
 8005f9e:	89a0      	ldrh	r0, [r4, #12]
 8005fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fa4:	f010 0301 	ands.w	r3, r0, #1
 8005fa8:	d00a      	beq.n	8005fc0 <__swsetup_r+0xbc>
 8005faa:	2300      	movs	r3, #0
 8005fac:	60a3      	str	r3, [r4, #8]
 8005fae:	6963      	ldr	r3, [r4, #20]
 8005fb0:	425b      	negs	r3, r3
 8005fb2:	61a3      	str	r3, [r4, #24]
 8005fb4:	6923      	ldr	r3, [r4, #16]
 8005fb6:	b943      	cbnz	r3, 8005fca <__swsetup_r+0xc6>
 8005fb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005fbc:	d1ba      	bne.n	8005f34 <__swsetup_r+0x30>
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
 8005fc0:	0781      	lsls	r1, r0, #30
 8005fc2:	bf58      	it	pl
 8005fc4:	6963      	ldrpl	r3, [r4, #20]
 8005fc6:	60a3      	str	r3, [r4, #8]
 8005fc8:	e7f4      	b.n	8005fb4 <__swsetup_r+0xb0>
 8005fca:	2000      	movs	r0, #0
 8005fcc:	e7f7      	b.n	8005fbe <__swsetup_r+0xba>
 8005fce:	bf00      	nop
 8005fd0:	2000002c 	.word	0x2000002c
 8005fd4:	08008820 	.word	0x08008820
 8005fd8:	08008840 	.word	0x08008840
 8005fdc:	08008800 	.word	0x08008800

08005fe0 <quorem>:
 8005fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	6903      	ldr	r3, [r0, #16]
 8005fe6:	690c      	ldr	r4, [r1, #16]
 8005fe8:	4607      	mov	r7, r0
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	f2c0 8082 	blt.w	80060f4 <quorem+0x114>
 8005ff0:	3c01      	subs	r4, #1
 8005ff2:	f100 0514 	add.w	r5, r0, #20
 8005ff6:	f101 0814 	add.w	r8, r1, #20
 8005ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006004:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006008:	3301      	adds	r3, #1
 800600a:	429a      	cmp	r2, r3
 800600c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006010:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006014:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006018:	d331      	bcc.n	800607e <quorem+0x9e>
 800601a:	f04f 0e00 	mov.w	lr, #0
 800601e:	4640      	mov	r0, r8
 8006020:	46ac      	mov	ip, r5
 8006022:	46f2      	mov	sl, lr
 8006024:	f850 2b04 	ldr.w	r2, [r0], #4
 8006028:	b293      	uxth	r3, r2
 800602a:	fb06 e303 	mla	r3, r6, r3, lr
 800602e:	0c12      	lsrs	r2, r2, #16
 8006030:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006034:	b29b      	uxth	r3, r3
 8006036:	fb06 e202 	mla	r2, r6, r2, lr
 800603a:	ebaa 0303 	sub.w	r3, sl, r3
 800603e:	f8dc a000 	ldr.w	sl, [ip]
 8006042:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006046:	fa1f fa8a 	uxth.w	sl, sl
 800604a:	4453      	add	r3, sl
 800604c:	f8dc a000 	ldr.w	sl, [ip]
 8006050:	b292      	uxth	r2, r2
 8006052:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006056:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800605a:	b29b      	uxth	r3, r3
 800605c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006060:	4581      	cmp	r9, r0
 8006062:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006066:	f84c 3b04 	str.w	r3, [ip], #4
 800606a:	d2db      	bcs.n	8006024 <quorem+0x44>
 800606c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006070:	b92b      	cbnz	r3, 800607e <quorem+0x9e>
 8006072:	9b01      	ldr	r3, [sp, #4]
 8006074:	3b04      	subs	r3, #4
 8006076:	429d      	cmp	r5, r3
 8006078:	461a      	mov	r2, r3
 800607a:	d32f      	bcc.n	80060dc <quorem+0xfc>
 800607c:	613c      	str	r4, [r7, #16]
 800607e:	4638      	mov	r0, r7
 8006080:	f001 fadc 	bl	800763c <__mcmp>
 8006084:	2800      	cmp	r0, #0
 8006086:	db25      	blt.n	80060d4 <quorem+0xf4>
 8006088:	4628      	mov	r0, r5
 800608a:	f04f 0c00 	mov.w	ip, #0
 800608e:	3601      	adds	r6, #1
 8006090:	f858 1b04 	ldr.w	r1, [r8], #4
 8006094:	f8d0 e000 	ldr.w	lr, [r0]
 8006098:	b28b      	uxth	r3, r1
 800609a:	ebac 0303 	sub.w	r3, ip, r3
 800609e:	fa1f f28e 	uxth.w	r2, lr
 80060a2:	4413      	add	r3, r2
 80060a4:	0c0a      	lsrs	r2, r1, #16
 80060a6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060b4:	45c1      	cmp	r9, r8
 80060b6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060ba:	f840 3b04 	str.w	r3, [r0], #4
 80060be:	d2e7      	bcs.n	8006090 <quorem+0xb0>
 80060c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060c8:	b922      	cbnz	r2, 80060d4 <quorem+0xf4>
 80060ca:	3b04      	subs	r3, #4
 80060cc:	429d      	cmp	r5, r3
 80060ce:	461a      	mov	r2, r3
 80060d0:	d30a      	bcc.n	80060e8 <quorem+0x108>
 80060d2:	613c      	str	r4, [r7, #16]
 80060d4:	4630      	mov	r0, r6
 80060d6:	b003      	add	sp, #12
 80060d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060dc:	6812      	ldr	r2, [r2, #0]
 80060de:	3b04      	subs	r3, #4
 80060e0:	2a00      	cmp	r2, #0
 80060e2:	d1cb      	bne.n	800607c <quorem+0x9c>
 80060e4:	3c01      	subs	r4, #1
 80060e6:	e7c6      	b.n	8006076 <quorem+0x96>
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	3b04      	subs	r3, #4
 80060ec:	2a00      	cmp	r2, #0
 80060ee:	d1f0      	bne.n	80060d2 <quorem+0xf2>
 80060f0:	3c01      	subs	r4, #1
 80060f2:	e7eb      	b.n	80060cc <quorem+0xec>
 80060f4:	2000      	movs	r0, #0
 80060f6:	e7ee      	b.n	80060d6 <quorem+0xf6>

080060f8 <_dtoa_r>:
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	4616      	mov	r6, r2
 80060fe:	461f      	mov	r7, r3
 8006100:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006102:	b099      	sub	sp, #100	; 0x64
 8006104:	4605      	mov	r5, r0
 8006106:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800610a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800610e:	b974      	cbnz	r4, 800612e <_dtoa_r+0x36>
 8006110:	2010      	movs	r0, #16
 8006112:	f000 ffff 	bl	8007114 <malloc>
 8006116:	4602      	mov	r2, r0
 8006118:	6268      	str	r0, [r5, #36]	; 0x24
 800611a:	b920      	cbnz	r0, 8006126 <_dtoa_r+0x2e>
 800611c:	21ea      	movs	r1, #234	; 0xea
 800611e:	4ba8      	ldr	r3, [pc, #672]	; (80063c0 <_dtoa_r+0x2c8>)
 8006120:	48a8      	ldr	r0, [pc, #672]	; (80063c4 <_dtoa_r+0x2cc>)
 8006122:	f001 ff99 	bl	8008058 <__assert_func>
 8006126:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800612a:	6004      	str	r4, [r0, #0]
 800612c:	60c4      	str	r4, [r0, #12]
 800612e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006130:	6819      	ldr	r1, [r3, #0]
 8006132:	b151      	cbz	r1, 800614a <_dtoa_r+0x52>
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	2301      	movs	r3, #1
 8006138:	4093      	lsls	r3, r2
 800613a:	604a      	str	r2, [r1, #4]
 800613c:	608b      	str	r3, [r1, #8]
 800613e:	4628      	mov	r0, r5
 8006140:	f001 f83e 	bl	80071c0 <_Bfree>
 8006144:	2200      	movs	r2, #0
 8006146:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	1e3b      	subs	r3, r7, #0
 800614c:	bfaf      	iteee	ge
 800614e:	2300      	movge	r3, #0
 8006150:	2201      	movlt	r2, #1
 8006152:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006156:	9305      	strlt	r3, [sp, #20]
 8006158:	bfa8      	it	ge
 800615a:	f8c8 3000 	strge.w	r3, [r8]
 800615e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006162:	4b99      	ldr	r3, [pc, #612]	; (80063c8 <_dtoa_r+0x2d0>)
 8006164:	bfb8      	it	lt
 8006166:	f8c8 2000 	strlt.w	r2, [r8]
 800616a:	ea33 0309 	bics.w	r3, r3, r9
 800616e:	d119      	bne.n	80061a4 <_dtoa_r+0xac>
 8006170:	f242 730f 	movw	r3, #9999	; 0x270f
 8006174:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800617c:	4333      	orrs	r3, r6
 800617e:	f000 857f 	beq.w	8006c80 <_dtoa_r+0xb88>
 8006182:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006184:	b953      	cbnz	r3, 800619c <_dtoa_r+0xa4>
 8006186:	4b91      	ldr	r3, [pc, #580]	; (80063cc <_dtoa_r+0x2d4>)
 8006188:	e022      	b.n	80061d0 <_dtoa_r+0xd8>
 800618a:	4b91      	ldr	r3, [pc, #580]	; (80063d0 <_dtoa_r+0x2d8>)
 800618c:	9303      	str	r3, [sp, #12]
 800618e:	3308      	adds	r3, #8
 8006190:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006192:	6013      	str	r3, [r2, #0]
 8006194:	9803      	ldr	r0, [sp, #12]
 8006196:	b019      	add	sp, #100	; 0x64
 8006198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619c:	4b8b      	ldr	r3, [pc, #556]	; (80063cc <_dtoa_r+0x2d4>)
 800619e:	9303      	str	r3, [sp, #12]
 80061a0:	3303      	adds	r3, #3
 80061a2:	e7f5      	b.n	8006190 <_dtoa_r+0x98>
 80061a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80061a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80061ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061b0:	2200      	movs	r2, #0
 80061b2:	2300      	movs	r3, #0
 80061b4:	f7fa fbf8 	bl	80009a8 <__aeabi_dcmpeq>
 80061b8:	4680      	mov	r8, r0
 80061ba:	b158      	cbz	r0, 80061d4 <_dtoa_r+0xdc>
 80061bc:	2301      	movs	r3, #1
 80061be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 8558 	beq.w	8006c7a <_dtoa_r+0xb82>
 80061ca:	4882      	ldr	r0, [pc, #520]	; (80063d4 <_dtoa_r+0x2dc>)
 80061cc:	6018      	str	r0, [r3, #0]
 80061ce:	1e43      	subs	r3, r0, #1
 80061d0:	9303      	str	r3, [sp, #12]
 80061d2:	e7df      	b.n	8006194 <_dtoa_r+0x9c>
 80061d4:	ab16      	add	r3, sp, #88	; 0x58
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	ab17      	add	r3, sp, #92	; 0x5c
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	4628      	mov	r0, r5
 80061de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80061e2:	f001 fad3 	bl	800778c <__d2b>
 80061e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80061ea:	4683      	mov	fp, r0
 80061ec:	2c00      	cmp	r4, #0
 80061ee:	d07f      	beq.n	80062f0 <_dtoa_r+0x1f8>
 80061f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061f6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80061fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061fe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006202:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006206:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800620a:	2200      	movs	r2, #0
 800620c:	4b72      	ldr	r3, [pc, #456]	; (80063d8 <_dtoa_r+0x2e0>)
 800620e:	f7f9 ffab 	bl	8000168 <__aeabi_dsub>
 8006212:	a365      	add	r3, pc, #404	; (adr r3, 80063a8 <_dtoa_r+0x2b0>)
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	f7fa f95e 	bl	80004d8 <__aeabi_dmul>
 800621c:	a364      	add	r3, pc, #400	; (adr r3, 80063b0 <_dtoa_r+0x2b8>)
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	f7f9 ffa3 	bl	800016c <__adddf3>
 8006226:	4606      	mov	r6, r0
 8006228:	4620      	mov	r0, r4
 800622a:	460f      	mov	r7, r1
 800622c:	f7fa f8ea 	bl	8000404 <__aeabi_i2d>
 8006230:	a361      	add	r3, pc, #388	; (adr r3, 80063b8 <_dtoa_r+0x2c0>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	f7fa f94f 	bl	80004d8 <__aeabi_dmul>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4630      	mov	r0, r6
 8006240:	4639      	mov	r1, r7
 8006242:	f7f9 ff93 	bl	800016c <__adddf3>
 8006246:	4606      	mov	r6, r0
 8006248:	460f      	mov	r7, r1
 800624a:	f7fa fbf5 	bl	8000a38 <__aeabi_d2iz>
 800624e:	2200      	movs	r2, #0
 8006250:	4682      	mov	sl, r0
 8006252:	2300      	movs	r3, #0
 8006254:	4630      	mov	r0, r6
 8006256:	4639      	mov	r1, r7
 8006258:	f7fa fbb0 	bl	80009bc <__aeabi_dcmplt>
 800625c:	b148      	cbz	r0, 8006272 <_dtoa_r+0x17a>
 800625e:	4650      	mov	r0, sl
 8006260:	f7fa f8d0 	bl	8000404 <__aeabi_i2d>
 8006264:	4632      	mov	r2, r6
 8006266:	463b      	mov	r3, r7
 8006268:	f7fa fb9e 	bl	80009a8 <__aeabi_dcmpeq>
 800626c:	b908      	cbnz	r0, 8006272 <_dtoa_r+0x17a>
 800626e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006272:	f1ba 0f16 	cmp.w	sl, #22
 8006276:	d858      	bhi.n	800632a <_dtoa_r+0x232>
 8006278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800627c:	4b57      	ldr	r3, [pc, #348]	; (80063dc <_dtoa_r+0x2e4>)
 800627e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	f7fa fb99 	bl	80009bc <__aeabi_dcmplt>
 800628a:	2800      	cmp	r0, #0
 800628c:	d04f      	beq.n	800632e <_dtoa_r+0x236>
 800628e:	2300      	movs	r3, #0
 8006290:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006294:	930f      	str	r3, [sp, #60]	; 0x3c
 8006296:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006298:	1b1c      	subs	r4, r3, r4
 800629a:	1e63      	subs	r3, r4, #1
 800629c:	9309      	str	r3, [sp, #36]	; 0x24
 800629e:	bf49      	itett	mi
 80062a0:	f1c4 0301 	rsbmi	r3, r4, #1
 80062a4:	2300      	movpl	r3, #0
 80062a6:	9306      	strmi	r3, [sp, #24]
 80062a8:	2300      	movmi	r3, #0
 80062aa:	bf54      	ite	pl
 80062ac:	9306      	strpl	r3, [sp, #24]
 80062ae:	9309      	strmi	r3, [sp, #36]	; 0x24
 80062b0:	f1ba 0f00 	cmp.w	sl, #0
 80062b4:	db3d      	blt.n	8006332 <_dtoa_r+0x23a>
 80062b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80062bc:	4453      	add	r3, sl
 80062be:	9309      	str	r3, [sp, #36]	; 0x24
 80062c0:	2300      	movs	r3, #0
 80062c2:	930a      	str	r3, [sp, #40]	; 0x28
 80062c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062c6:	2b09      	cmp	r3, #9
 80062c8:	f200 808c 	bhi.w	80063e4 <_dtoa_r+0x2ec>
 80062cc:	2b05      	cmp	r3, #5
 80062ce:	bfc4      	itt	gt
 80062d0:	3b04      	subgt	r3, #4
 80062d2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80062d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062d6:	bfc8      	it	gt
 80062d8:	2400      	movgt	r4, #0
 80062da:	f1a3 0302 	sub.w	r3, r3, #2
 80062de:	bfd8      	it	le
 80062e0:	2401      	movle	r4, #1
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	f200 808a 	bhi.w	80063fc <_dtoa_r+0x304>
 80062e8:	e8df f003 	tbb	[pc, r3]
 80062ec:	5b4d4f2d 	.word	0x5b4d4f2d
 80062f0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80062f4:	441c      	add	r4, r3
 80062f6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	bfc3      	ittte	gt
 80062fe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006302:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006306:	fa09 f303 	lslgt.w	r3, r9, r3
 800630a:	f1c3 0320 	rsble	r3, r3, #32
 800630e:	bfc6      	itte	gt
 8006310:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006314:	4318      	orrgt	r0, r3
 8006316:	fa06 f003 	lslle.w	r0, r6, r3
 800631a:	f7fa f863 	bl	80003e4 <__aeabi_ui2d>
 800631e:	2301      	movs	r3, #1
 8006320:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006324:	3c01      	subs	r4, #1
 8006326:	9313      	str	r3, [sp, #76]	; 0x4c
 8006328:	e76f      	b.n	800620a <_dtoa_r+0x112>
 800632a:	2301      	movs	r3, #1
 800632c:	e7b2      	b.n	8006294 <_dtoa_r+0x19c>
 800632e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006330:	e7b1      	b.n	8006296 <_dtoa_r+0x19e>
 8006332:	9b06      	ldr	r3, [sp, #24]
 8006334:	eba3 030a 	sub.w	r3, r3, sl
 8006338:	9306      	str	r3, [sp, #24]
 800633a:	f1ca 0300 	rsb	r3, sl, #0
 800633e:	930a      	str	r3, [sp, #40]	; 0x28
 8006340:	2300      	movs	r3, #0
 8006342:	930e      	str	r3, [sp, #56]	; 0x38
 8006344:	e7be      	b.n	80062c4 <_dtoa_r+0x1cc>
 8006346:	2300      	movs	r3, #0
 8006348:	930b      	str	r3, [sp, #44]	; 0x2c
 800634a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800634c:	2b00      	cmp	r3, #0
 800634e:	dc58      	bgt.n	8006402 <_dtoa_r+0x30a>
 8006350:	f04f 0901 	mov.w	r9, #1
 8006354:	464b      	mov	r3, r9
 8006356:	f8cd 9020 	str.w	r9, [sp, #32]
 800635a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800635e:	2200      	movs	r2, #0
 8006360:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006362:	6042      	str	r2, [r0, #4]
 8006364:	2204      	movs	r2, #4
 8006366:	f102 0614 	add.w	r6, r2, #20
 800636a:	429e      	cmp	r6, r3
 800636c:	6841      	ldr	r1, [r0, #4]
 800636e:	d94e      	bls.n	800640e <_dtoa_r+0x316>
 8006370:	4628      	mov	r0, r5
 8006372:	f000 fee5 	bl	8007140 <_Balloc>
 8006376:	9003      	str	r0, [sp, #12]
 8006378:	2800      	cmp	r0, #0
 800637a:	d14c      	bne.n	8006416 <_dtoa_r+0x31e>
 800637c:	4602      	mov	r2, r0
 800637e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006382:	4b17      	ldr	r3, [pc, #92]	; (80063e0 <_dtoa_r+0x2e8>)
 8006384:	e6cc      	b.n	8006120 <_dtoa_r+0x28>
 8006386:	2301      	movs	r3, #1
 8006388:	e7de      	b.n	8006348 <_dtoa_r+0x250>
 800638a:	2300      	movs	r3, #0
 800638c:	930b      	str	r3, [sp, #44]	; 0x2c
 800638e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006390:	eb0a 0903 	add.w	r9, sl, r3
 8006394:	f109 0301 	add.w	r3, r9, #1
 8006398:	2b01      	cmp	r3, #1
 800639a:	9308      	str	r3, [sp, #32]
 800639c:	bfb8      	it	lt
 800639e:	2301      	movlt	r3, #1
 80063a0:	e7dd      	b.n	800635e <_dtoa_r+0x266>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e7f2      	b.n	800638c <_dtoa_r+0x294>
 80063a6:	bf00      	nop
 80063a8:	636f4361 	.word	0x636f4361
 80063ac:	3fd287a7 	.word	0x3fd287a7
 80063b0:	8b60c8b3 	.word	0x8b60c8b3
 80063b4:	3fc68a28 	.word	0x3fc68a28
 80063b8:	509f79fb 	.word	0x509f79fb
 80063bc:	3fd34413 	.word	0x3fd34413
 80063c0:	0800877d 	.word	0x0800877d
 80063c4:	08008794 	.word	0x08008794
 80063c8:	7ff00000 	.word	0x7ff00000
 80063cc:	08008779 	.word	0x08008779
 80063d0:	08008770 	.word	0x08008770
 80063d4:	0800874d 	.word	0x0800874d
 80063d8:	3ff80000 	.word	0x3ff80000
 80063dc:	080088e8 	.word	0x080088e8
 80063e0:	080087ef 	.word	0x080087ef
 80063e4:	2401      	movs	r4, #1
 80063e6:	2300      	movs	r3, #0
 80063e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80063ea:	9322      	str	r3, [sp, #136]	; 0x88
 80063ec:	f04f 39ff 	mov.w	r9, #4294967295
 80063f0:	2200      	movs	r2, #0
 80063f2:	2312      	movs	r3, #18
 80063f4:	f8cd 9020 	str.w	r9, [sp, #32]
 80063f8:	9223      	str	r2, [sp, #140]	; 0x8c
 80063fa:	e7b0      	b.n	800635e <_dtoa_r+0x266>
 80063fc:	2301      	movs	r3, #1
 80063fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006400:	e7f4      	b.n	80063ec <_dtoa_r+0x2f4>
 8006402:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006406:	464b      	mov	r3, r9
 8006408:	f8cd 9020 	str.w	r9, [sp, #32]
 800640c:	e7a7      	b.n	800635e <_dtoa_r+0x266>
 800640e:	3101      	adds	r1, #1
 8006410:	6041      	str	r1, [r0, #4]
 8006412:	0052      	lsls	r2, r2, #1
 8006414:	e7a7      	b.n	8006366 <_dtoa_r+0x26e>
 8006416:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006418:	9a03      	ldr	r2, [sp, #12]
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	9b08      	ldr	r3, [sp, #32]
 800641e:	2b0e      	cmp	r3, #14
 8006420:	f200 80a8 	bhi.w	8006574 <_dtoa_r+0x47c>
 8006424:	2c00      	cmp	r4, #0
 8006426:	f000 80a5 	beq.w	8006574 <_dtoa_r+0x47c>
 800642a:	f1ba 0f00 	cmp.w	sl, #0
 800642e:	dd34      	ble.n	800649a <_dtoa_r+0x3a2>
 8006430:	4a9a      	ldr	r2, [pc, #616]	; (800669c <_dtoa_r+0x5a4>)
 8006432:	f00a 030f 	and.w	r3, sl, #15
 8006436:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800643a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800643e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006442:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006446:	ea4f 142a 	mov.w	r4, sl, asr #4
 800644a:	d016      	beq.n	800647a <_dtoa_r+0x382>
 800644c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006450:	4b93      	ldr	r3, [pc, #588]	; (80066a0 <_dtoa_r+0x5a8>)
 8006452:	2703      	movs	r7, #3
 8006454:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006458:	f7fa f968 	bl	800072c <__aeabi_ddiv>
 800645c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006460:	f004 040f 	and.w	r4, r4, #15
 8006464:	4e8e      	ldr	r6, [pc, #568]	; (80066a0 <_dtoa_r+0x5a8>)
 8006466:	b954      	cbnz	r4, 800647e <_dtoa_r+0x386>
 8006468:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800646c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006470:	f7fa f95c 	bl	800072c <__aeabi_ddiv>
 8006474:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006478:	e029      	b.n	80064ce <_dtoa_r+0x3d6>
 800647a:	2702      	movs	r7, #2
 800647c:	e7f2      	b.n	8006464 <_dtoa_r+0x36c>
 800647e:	07e1      	lsls	r1, r4, #31
 8006480:	d508      	bpl.n	8006494 <_dtoa_r+0x39c>
 8006482:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006486:	e9d6 2300 	ldrd	r2, r3, [r6]
 800648a:	f7fa f825 	bl	80004d8 <__aeabi_dmul>
 800648e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006492:	3701      	adds	r7, #1
 8006494:	1064      	asrs	r4, r4, #1
 8006496:	3608      	adds	r6, #8
 8006498:	e7e5      	b.n	8006466 <_dtoa_r+0x36e>
 800649a:	f000 80a5 	beq.w	80065e8 <_dtoa_r+0x4f0>
 800649e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064a2:	f1ca 0400 	rsb	r4, sl, #0
 80064a6:	4b7d      	ldr	r3, [pc, #500]	; (800669c <_dtoa_r+0x5a4>)
 80064a8:	f004 020f 	and.w	r2, r4, #15
 80064ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	f7fa f810 	bl	80004d8 <__aeabi_dmul>
 80064b8:	2702      	movs	r7, #2
 80064ba:	2300      	movs	r3, #0
 80064bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064c0:	4e77      	ldr	r6, [pc, #476]	; (80066a0 <_dtoa_r+0x5a8>)
 80064c2:	1124      	asrs	r4, r4, #4
 80064c4:	2c00      	cmp	r4, #0
 80064c6:	f040 8084 	bne.w	80065d2 <_dtoa_r+0x4da>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1d2      	bne.n	8006474 <_dtoa_r+0x37c>
 80064ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 808b 	beq.w	80065ec <_dtoa_r+0x4f4>
 80064d6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80064da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80064de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064e2:	2200      	movs	r2, #0
 80064e4:	4b6f      	ldr	r3, [pc, #444]	; (80066a4 <_dtoa_r+0x5ac>)
 80064e6:	f7fa fa69 	bl	80009bc <__aeabi_dcmplt>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d07e      	beq.n	80065ec <_dtoa_r+0x4f4>
 80064ee:	9b08      	ldr	r3, [sp, #32]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d07b      	beq.n	80065ec <_dtoa_r+0x4f4>
 80064f4:	f1b9 0f00 	cmp.w	r9, #0
 80064f8:	dd38      	ble.n	800656c <_dtoa_r+0x474>
 80064fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064fe:	2200      	movs	r2, #0
 8006500:	4b69      	ldr	r3, [pc, #420]	; (80066a8 <_dtoa_r+0x5b0>)
 8006502:	f7f9 ffe9 	bl	80004d8 <__aeabi_dmul>
 8006506:	464c      	mov	r4, r9
 8006508:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800650c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006510:	3701      	adds	r7, #1
 8006512:	4638      	mov	r0, r7
 8006514:	f7f9 ff76 	bl	8000404 <__aeabi_i2d>
 8006518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800651c:	f7f9 ffdc 	bl	80004d8 <__aeabi_dmul>
 8006520:	2200      	movs	r2, #0
 8006522:	4b62      	ldr	r3, [pc, #392]	; (80066ac <_dtoa_r+0x5b4>)
 8006524:	f7f9 fe22 	bl	800016c <__adddf3>
 8006528:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800652c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006530:	9611      	str	r6, [sp, #68]	; 0x44
 8006532:	2c00      	cmp	r4, #0
 8006534:	d15d      	bne.n	80065f2 <_dtoa_r+0x4fa>
 8006536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800653a:	2200      	movs	r2, #0
 800653c:	4b5c      	ldr	r3, [pc, #368]	; (80066b0 <_dtoa_r+0x5b8>)
 800653e:	f7f9 fe13 	bl	8000168 <__aeabi_dsub>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800654a:	4633      	mov	r3, r6
 800654c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800654e:	f7fa fa53 	bl	80009f8 <__aeabi_dcmpgt>
 8006552:	2800      	cmp	r0, #0
 8006554:	f040 829c 	bne.w	8006a90 <_dtoa_r+0x998>
 8006558:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800655c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800655e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006562:	f7fa fa2b 	bl	80009bc <__aeabi_dcmplt>
 8006566:	2800      	cmp	r0, #0
 8006568:	f040 8290 	bne.w	8006a8c <_dtoa_r+0x994>
 800656c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006570:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006574:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006576:	2b00      	cmp	r3, #0
 8006578:	f2c0 8152 	blt.w	8006820 <_dtoa_r+0x728>
 800657c:	f1ba 0f0e 	cmp.w	sl, #14
 8006580:	f300 814e 	bgt.w	8006820 <_dtoa_r+0x728>
 8006584:	4b45      	ldr	r3, [pc, #276]	; (800669c <_dtoa_r+0x5a4>)
 8006586:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800658a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800658e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006592:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006594:	2b00      	cmp	r3, #0
 8006596:	f280 80db 	bge.w	8006750 <_dtoa_r+0x658>
 800659a:	9b08      	ldr	r3, [sp, #32]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f300 80d7 	bgt.w	8006750 <_dtoa_r+0x658>
 80065a2:	f040 8272 	bne.w	8006a8a <_dtoa_r+0x992>
 80065a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065aa:	2200      	movs	r2, #0
 80065ac:	4b40      	ldr	r3, [pc, #256]	; (80066b0 <_dtoa_r+0x5b8>)
 80065ae:	f7f9 ff93 	bl	80004d8 <__aeabi_dmul>
 80065b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065b6:	f7fa fa15 	bl	80009e4 <__aeabi_dcmpge>
 80065ba:	9c08      	ldr	r4, [sp, #32]
 80065bc:	4626      	mov	r6, r4
 80065be:	2800      	cmp	r0, #0
 80065c0:	f040 8248 	bne.w	8006a54 <_dtoa_r+0x95c>
 80065c4:	2331      	movs	r3, #49	; 0x31
 80065c6:	9f03      	ldr	r7, [sp, #12]
 80065c8:	f10a 0a01 	add.w	sl, sl, #1
 80065cc:	f807 3b01 	strb.w	r3, [r7], #1
 80065d0:	e244      	b.n	8006a5c <_dtoa_r+0x964>
 80065d2:	07e2      	lsls	r2, r4, #31
 80065d4:	d505      	bpl.n	80065e2 <_dtoa_r+0x4ea>
 80065d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065da:	f7f9 ff7d 	bl	80004d8 <__aeabi_dmul>
 80065de:	2301      	movs	r3, #1
 80065e0:	3701      	adds	r7, #1
 80065e2:	1064      	asrs	r4, r4, #1
 80065e4:	3608      	adds	r6, #8
 80065e6:	e76d      	b.n	80064c4 <_dtoa_r+0x3cc>
 80065e8:	2702      	movs	r7, #2
 80065ea:	e770      	b.n	80064ce <_dtoa_r+0x3d6>
 80065ec:	46d0      	mov	r8, sl
 80065ee:	9c08      	ldr	r4, [sp, #32]
 80065f0:	e78f      	b.n	8006512 <_dtoa_r+0x41a>
 80065f2:	9903      	ldr	r1, [sp, #12]
 80065f4:	4b29      	ldr	r3, [pc, #164]	; (800669c <_dtoa_r+0x5a4>)
 80065f6:	4421      	add	r1, r4
 80065f8:	9112      	str	r1, [sp, #72]	; 0x48
 80065fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006600:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006604:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006608:	2900      	cmp	r1, #0
 800660a:	d055      	beq.n	80066b8 <_dtoa_r+0x5c0>
 800660c:	2000      	movs	r0, #0
 800660e:	4929      	ldr	r1, [pc, #164]	; (80066b4 <_dtoa_r+0x5bc>)
 8006610:	f7fa f88c 	bl	800072c <__aeabi_ddiv>
 8006614:	463b      	mov	r3, r7
 8006616:	4632      	mov	r2, r6
 8006618:	f7f9 fda6 	bl	8000168 <__aeabi_dsub>
 800661c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006620:	9f03      	ldr	r7, [sp, #12]
 8006622:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006626:	f7fa fa07 	bl	8000a38 <__aeabi_d2iz>
 800662a:	4604      	mov	r4, r0
 800662c:	f7f9 feea 	bl	8000404 <__aeabi_i2d>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006638:	f7f9 fd96 	bl	8000168 <__aeabi_dsub>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	3430      	adds	r4, #48	; 0x30
 8006642:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006646:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800664a:	f807 4b01 	strb.w	r4, [r7], #1
 800664e:	f7fa f9b5 	bl	80009bc <__aeabi_dcmplt>
 8006652:	2800      	cmp	r0, #0
 8006654:	d174      	bne.n	8006740 <_dtoa_r+0x648>
 8006656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800665a:	2000      	movs	r0, #0
 800665c:	4911      	ldr	r1, [pc, #68]	; (80066a4 <_dtoa_r+0x5ac>)
 800665e:	f7f9 fd83 	bl	8000168 <__aeabi_dsub>
 8006662:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006666:	f7fa f9a9 	bl	80009bc <__aeabi_dcmplt>
 800666a:	2800      	cmp	r0, #0
 800666c:	f040 80b7 	bne.w	80067de <_dtoa_r+0x6e6>
 8006670:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006672:	429f      	cmp	r7, r3
 8006674:	f43f af7a 	beq.w	800656c <_dtoa_r+0x474>
 8006678:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800667c:	2200      	movs	r2, #0
 800667e:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <_dtoa_r+0x5b0>)
 8006680:	f7f9 ff2a 	bl	80004d8 <__aeabi_dmul>
 8006684:	2200      	movs	r2, #0
 8006686:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800668a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800668e:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <_dtoa_r+0x5b0>)
 8006690:	f7f9 ff22 	bl	80004d8 <__aeabi_dmul>
 8006694:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006698:	e7c3      	b.n	8006622 <_dtoa_r+0x52a>
 800669a:	bf00      	nop
 800669c:	080088e8 	.word	0x080088e8
 80066a0:	080088c0 	.word	0x080088c0
 80066a4:	3ff00000 	.word	0x3ff00000
 80066a8:	40240000 	.word	0x40240000
 80066ac:	401c0000 	.word	0x401c0000
 80066b0:	40140000 	.word	0x40140000
 80066b4:	3fe00000 	.word	0x3fe00000
 80066b8:	4630      	mov	r0, r6
 80066ba:	4639      	mov	r1, r7
 80066bc:	f7f9 ff0c 	bl	80004d8 <__aeabi_dmul>
 80066c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066c6:	9c03      	ldr	r4, [sp, #12]
 80066c8:	9314      	str	r3, [sp, #80]	; 0x50
 80066ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066ce:	f7fa f9b3 	bl	8000a38 <__aeabi_d2iz>
 80066d2:	9015      	str	r0, [sp, #84]	; 0x54
 80066d4:	f7f9 fe96 	bl	8000404 <__aeabi_i2d>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066e0:	f7f9 fd42 	bl	8000168 <__aeabi_dsub>
 80066e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066e6:	4606      	mov	r6, r0
 80066e8:	3330      	adds	r3, #48	; 0x30
 80066ea:	f804 3b01 	strb.w	r3, [r4], #1
 80066ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066f0:	460f      	mov	r7, r1
 80066f2:	429c      	cmp	r4, r3
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	d124      	bne.n	8006744 <_dtoa_r+0x64c>
 80066fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066fe:	4bb0      	ldr	r3, [pc, #704]	; (80069c0 <_dtoa_r+0x8c8>)
 8006700:	f7f9 fd34 	bl	800016c <__adddf3>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	4630      	mov	r0, r6
 800670a:	4639      	mov	r1, r7
 800670c:	f7fa f974 	bl	80009f8 <__aeabi_dcmpgt>
 8006710:	2800      	cmp	r0, #0
 8006712:	d163      	bne.n	80067dc <_dtoa_r+0x6e4>
 8006714:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006718:	2000      	movs	r0, #0
 800671a:	49a9      	ldr	r1, [pc, #676]	; (80069c0 <_dtoa_r+0x8c8>)
 800671c:	f7f9 fd24 	bl	8000168 <__aeabi_dsub>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4630      	mov	r0, r6
 8006726:	4639      	mov	r1, r7
 8006728:	f7fa f948 	bl	80009bc <__aeabi_dcmplt>
 800672c:	2800      	cmp	r0, #0
 800672e:	f43f af1d 	beq.w	800656c <_dtoa_r+0x474>
 8006732:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006734:	1e7b      	subs	r3, r7, #1
 8006736:	9314      	str	r3, [sp, #80]	; 0x50
 8006738:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800673c:	2b30      	cmp	r3, #48	; 0x30
 800673e:	d0f8      	beq.n	8006732 <_dtoa_r+0x63a>
 8006740:	46c2      	mov	sl, r8
 8006742:	e03b      	b.n	80067bc <_dtoa_r+0x6c4>
 8006744:	4b9f      	ldr	r3, [pc, #636]	; (80069c4 <_dtoa_r+0x8cc>)
 8006746:	f7f9 fec7 	bl	80004d8 <__aeabi_dmul>
 800674a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800674e:	e7bc      	b.n	80066ca <_dtoa_r+0x5d2>
 8006750:	9f03      	ldr	r7, [sp, #12]
 8006752:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006756:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800675a:	4640      	mov	r0, r8
 800675c:	4649      	mov	r1, r9
 800675e:	f7f9 ffe5 	bl	800072c <__aeabi_ddiv>
 8006762:	f7fa f969 	bl	8000a38 <__aeabi_d2iz>
 8006766:	4604      	mov	r4, r0
 8006768:	f7f9 fe4c 	bl	8000404 <__aeabi_i2d>
 800676c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006770:	f7f9 feb2 	bl	80004d8 <__aeabi_dmul>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4640      	mov	r0, r8
 800677a:	4649      	mov	r1, r9
 800677c:	f7f9 fcf4 	bl	8000168 <__aeabi_dsub>
 8006780:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006784:	f807 6b01 	strb.w	r6, [r7], #1
 8006788:	9e03      	ldr	r6, [sp, #12]
 800678a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800678e:	1bbe      	subs	r6, r7, r6
 8006790:	45b4      	cmp	ip, r6
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	d136      	bne.n	8006806 <_dtoa_r+0x70e>
 8006798:	f7f9 fce8 	bl	800016c <__adddf3>
 800679c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067a0:	4680      	mov	r8, r0
 80067a2:	4689      	mov	r9, r1
 80067a4:	f7fa f928 	bl	80009f8 <__aeabi_dcmpgt>
 80067a8:	bb58      	cbnz	r0, 8006802 <_dtoa_r+0x70a>
 80067aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067ae:	4640      	mov	r0, r8
 80067b0:	4649      	mov	r1, r9
 80067b2:	f7fa f8f9 	bl	80009a8 <__aeabi_dcmpeq>
 80067b6:	b108      	cbz	r0, 80067bc <_dtoa_r+0x6c4>
 80067b8:	07e1      	lsls	r1, r4, #31
 80067ba:	d422      	bmi.n	8006802 <_dtoa_r+0x70a>
 80067bc:	4628      	mov	r0, r5
 80067be:	4659      	mov	r1, fp
 80067c0:	f000 fcfe 	bl	80071c0 <_Bfree>
 80067c4:	2300      	movs	r3, #0
 80067c6:	703b      	strb	r3, [r7, #0]
 80067c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80067ca:	f10a 0001 	add.w	r0, sl, #1
 80067ce:	6018      	str	r0, [r3, #0]
 80067d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f43f acde 	beq.w	8006194 <_dtoa_r+0x9c>
 80067d8:	601f      	str	r7, [r3, #0]
 80067da:	e4db      	b.n	8006194 <_dtoa_r+0x9c>
 80067dc:	4627      	mov	r7, r4
 80067de:	463b      	mov	r3, r7
 80067e0:	461f      	mov	r7, r3
 80067e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067e6:	2a39      	cmp	r2, #57	; 0x39
 80067e8:	d107      	bne.n	80067fa <_dtoa_r+0x702>
 80067ea:	9a03      	ldr	r2, [sp, #12]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d1f7      	bne.n	80067e0 <_dtoa_r+0x6e8>
 80067f0:	2230      	movs	r2, #48	; 0x30
 80067f2:	9903      	ldr	r1, [sp, #12]
 80067f4:	f108 0801 	add.w	r8, r8, #1
 80067f8:	700a      	strb	r2, [r1, #0]
 80067fa:	781a      	ldrb	r2, [r3, #0]
 80067fc:	3201      	adds	r2, #1
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	e79e      	b.n	8006740 <_dtoa_r+0x648>
 8006802:	46d0      	mov	r8, sl
 8006804:	e7eb      	b.n	80067de <_dtoa_r+0x6e6>
 8006806:	2200      	movs	r2, #0
 8006808:	4b6e      	ldr	r3, [pc, #440]	; (80069c4 <_dtoa_r+0x8cc>)
 800680a:	f7f9 fe65 	bl	80004d8 <__aeabi_dmul>
 800680e:	2200      	movs	r2, #0
 8006810:	2300      	movs	r3, #0
 8006812:	4680      	mov	r8, r0
 8006814:	4689      	mov	r9, r1
 8006816:	f7fa f8c7 	bl	80009a8 <__aeabi_dcmpeq>
 800681a:	2800      	cmp	r0, #0
 800681c:	d09b      	beq.n	8006756 <_dtoa_r+0x65e>
 800681e:	e7cd      	b.n	80067bc <_dtoa_r+0x6c4>
 8006820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006822:	2a00      	cmp	r2, #0
 8006824:	f000 80d0 	beq.w	80069c8 <_dtoa_r+0x8d0>
 8006828:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800682a:	2a01      	cmp	r2, #1
 800682c:	f300 80ae 	bgt.w	800698c <_dtoa_r+0x894>
 8006830:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006832:	2a00      	cmp	r2, #0
 8006834:	f000 80a6 	beq.w	8006984 <_dtoa_r+0x88c>
 8006838:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800683c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800683e:	9f06      	ldr	r7, [sp, #24]
 8006840:	9a06      	ldr	r2, [sp, #24]
 8006842:	2101      	movs	r1, #1
 8006844:	441a      	add	r2, r3
 8006846:	9206      	str	r2, [sp, #24]
 8006848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800684a:	4628      	mov	r0, r5
 800684c:	441a      	add	r2, r3
 800684e:	9209      	str	r2, [sp, #36]	; 0x24
 8006850:	f000 fd6c 	bl	800732c <__i2b>
 8006854:	4606      	mov	r6, r0
 8006856:	2f00      	cmp	r7, #0
 8006858:	dd0c      	ble.n	8006874 <_dtoa_r+0x77c>
 800685a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800685c:	2b00      	cmp	r3, #0
 800685e:	dd09      	ble.n	8006874 <_dtoa_r+0x77c>
 8006860:	42bb      	cmp	r3, r7
 8006862:	bfa8      	it	ge
 8006864:	463b      	movge	r3, r7
 8006866:	9a06      	ldr	r2, [sp, #24]
 8006868:	1aff      	subs	r7, r7, r3
 800686a:	1ad2      	subs	r2, r2, r3
 800686c:	9206      	str	r2, [sp, #24]
 800686e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	9309      	str	r3, [sp, #36]	; 0x24
 8006874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006876:	b1f3      	cbz	r3, 80068b6 <_dtoa_r+0x7be>
 8006878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 80a8 	beq.w	80069d0 <_dtoa_r+0x8d8>
 8006880:	2c00      	cmp	r4, #0
 8006882:	dd10      	ble.n	80068a6 <_dtoa_r+0x7ae>
 8006884:	4631      	mov	r1, r6
 8006886:	4622      	mov	r2, r4
 8006888:	4628      	mov	r0, r5
 800688a:	f000 fe0d 	bl	80074a8 <__pow5mult>
 800688e:	465a      	mov	r2, fp
 8006890:	4601      	mov	r1, r0
 8006892:	4606      	mov	r6, r0
 8006894:	4628      	mov	r0, r5
 8006896:	f000 fd5f 	bl	8007358 <__multiply>
 800689a:	4680      	mov	r8, r0
 800689c:	4659      	mov	r1, fp
 800689e:	4628      	mov	r0, r5
 80068a0:	f000 fc8e 	bl	80071c0 <_Bfree>
 80068a4:	46c3      	mov	fp, r8
 80068a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a8:	1b1a      	subs	r2, r3, r4
 80068aa:	d004      	beq.n	80068b6 <_dtoa_r+0x7be>
 80068ac:	4659      	mov	r1, fp
 80068ae:	4628      	mov	r0, r5
 80068b0:	f000 fdfa 	bl	80074a8 <__pow5mult>
 80068b4:	4683      	mov	fp, r0
 80068b6:	2101      	movs	r1, #1
 80068b8:	4628      	mov	r0, r5
 80068ba:	f000 fd37 	bl	800732c <__i2b>
 80068be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068c0:	4604      	mov	r4, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f340 8086 	ble.w	80069d4 <_dtoa_r+0x8dc>
 80068c8:	461a      	mov	r2, r3
 80068ca:	4601      	mov	r1, r0
 80068cc:	4628      	mov	r0, r5
 80068ce:	f000 fdeb 	bl	80074a8 <__pow5mult>
 80068d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068d4:	4604      	mov	r4, r0
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	dd7f      	ble.n	80069da <_dtoa_r+0x8e2>
 80068da:	f04f 0800 	mov.w	r8, #0
 80068de:	6923      	ldr	r3, [r4, #16]
 80068e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068e4:	6918      	ldr	r0, [r3, #16]
 80068e6:	f000 fcd3 	bl	8007290 <__hi0bits>
 80068ea:	f1c0 0020 	rsb	r0, r0, #32
 80068ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f0:	4418      	add	r0, r3
 80068f2:	f010 001f 	ands.w	r0, r0, #31
 80068f6:	f000 8092 	beq.w	8006a1e <_dtoa_r+0x926>
 80068fa:	f1c0 0320 	rsb	r3, r0, #32
 80068fe:	2b04      	cmp	r3, #4
 8006900:	f340 808a 	ble.w	8006a18 <_dtoa_r+0x920>
 8006904:	f1c0 001c 	rsb	r0, r0, #28
 8006908:	9b06      	ldr	r3, [sp, #24]
 800690a:	4407      	add	r7, r0
 800690c:	4403      	add	r3, r0
 800690e:	9306      	str	r3, [sp, #24]
 8006910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006912:	4403      	add	r3, r0
 8006914:	9309      	str	r3, [sp, #36]	; 0x24
 8006916:	9b06      	ldr	r3, [sp, #24]
 8006918:	2b00      	cmp	r3, #0
 800691a:	dd05      	ble.n	8006928 <_dtoa_r+0x830>
 800691c:	4659      	mov	r1, fp
 800691e:	461a      	mov	r2, r3
 8006920:	4628      	mov	r0, r5
 8006922:	f000 fe1b 	bl	800755c <__lshift>
 8006926:	4683      	mov	fp, r0
 8006928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692a:	2b00      	cmp	r3, #0
 800692c:	dd05      	ble.n	800693a <_dtoa_r+0x842>
 800692e:	4621      	mov	r1, r4
 8006930:	461a      	mov	r2, r3
 8006932:	4628      	mov	r0, r5
 8006934:	f000 fe12 	bl	800755c <__lshift>
 8006938:	4604      	mov	r4, r0
 800693a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800693c:	2b00      	cmp	r3, #0
 800693e:	d070      	beq.n	8006a22 <_dtoa_r+0x92a>
 8006940:	4621      	mov	r1, r4
 8006942:	4658      	mov	r0, fp
 8006944:	f000 fe7a 	bl	800763c <__mcmp>
 8006948:	2800      	cmp	r0, #0
 800694a:	da6a      	bge.n	8006a22 <_dtoa_r+0x92a>
 800694c:	2300      	movs	r3, #0
 800694e:	4659      	mov	r1, fp
 8006950:	220a      	movs	r2, #10
 8006952:	4628      	mov	r0, r5
 8006954:	f000 fc56 	bl	8007204 <__multadd>
 8006958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800695a:	4683      	mov	fp, r0
 800695c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 8194 	beq.w	8006c8e <_dtoa_r+0xb96>
 8006966:	4631      	mov	r1, r6
 8006968:	2300      	movs	r3, #0
 800696a:	220a      	movs	r2, #10
 800696c:	4628      	mov	r0, r5
 800696e:	f000 fc49 	bl	8007204 <__multadd>
 8006972:	f1b9 0f00 	cmp.w	r9, #0
 8006976:	4606      	mov	r6, r0
 8006978:	f300 8093 	bgt.w	8006aa2 <_dtoa_r+0x9aa>
 800697c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800697e:	2b02      	cmp	r3, #2
 8006980:	dc57      	bgt.n	8006a32 <_dtoa_r+0x93a>
 8006982:	e08e      	b.n	8006aa2 <_dtoa_r+0x9aa>
 8006984:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006986:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800698a:	e757      	b.n	800683c <_dtoa_r+0x744>
 800698c:	9b08      	ldr	r3, [sp, #32]
 800698e:	1e5c      	subs	r4, r3, #1
 8006990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006992:	42a3      	cmp	r3, r4
 8006994:	bfb7      	itett	lt
 8006996:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006998:	1b1c      	subge	r4, r3, r4
 800699a:	1ae2      	sublt	r2, r4, r3
 800699c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800699e:	bfbe      	ittt	lt
 80069a0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80069a2:	189b      	addlt	r3, r3, r2
 80069a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80069a6:	9b08      	ldr	r3, [sp, #32]
 80069a8:	bfb8      	it	lt
 80069aa:	2400      	movlt	r4, #0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	bfbb      	ittet	lt
 80069b0:	9b06      	ldrlt	r3, [sp, #24]
 80069b2:	9a08      	ldrlt	r2, [sp, #32]
 80069b4:	9f06      	ldrge	r7, [sp, #24]
 80069b6:	1a9f      	sublt	r7, r3, r2
 80069b8:	bfac      	ite	ge
 80069ba:	9b08      	ldrge	r3, [sp, #32]
 80069bc:	2300      	movlt	r3, #0
 80069be:	e73f      	b.n	8006840 <_dtoa_r+0x748>
 80069c0:	3fe00000 	.word	0x3fe00000
 80069c4:	40240000 	.word	0x40240000
 80069c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80069ca:	9f06      	ldr	r7, [sp, #24]
 80069cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80069ce:	e742      	b.n	8006856 <_dtoa_r+0x75e>
 80069d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069d2:	e76b      	b.n	80068ac <_dtoa_r+0x7b4>
 80069d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	dc19      	bgt.n	8006a0e <_dtoa_r+0x916>
 80069da:	9b04      	ldr	r3, [sp, #16]
 80069dc:	b9bb      	cbnz	r3, 8006a0e <_dtoa_r+0x916>
 80069de:	9b05      	ldr	r3, [sp, #20]
 80069e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069e4:	b99b      	cbnz	r3, 8006a0e <_dtoa_r+0x916>
 80069e6:	9b05      	ldr	r3, [sp, #20]
 80069e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069ec:	0d1b      	lsrs	r3, r3, #20
 80069ee:	051b      	lsls	r3, r3, #20
 80069f0:	b183      	cbz	r3, 8006a14 <_dtoa_r+0x91c>
 80069f2:	f04f 0801 	mov.w	r8, #1
 80069f6:	9b06      	ldr	r3, [sp, #24]
 80069f8:	3301      	adds	r3, #1
 80069fa:	9306      	str	r3, [sp, #24]
 80069fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069fe:	3301      	adds	r3, #1
 8006a00:	9309      	str	r3, [sp, #36]	; 0x24
 8006a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f47f af6a 	bne.w	80068de <_dtoa_r+0x7e6>
 8006a0a:	2001      	movs	r0, #1
 8006a0c:	e76f      	b.n	80068ee <_dtoa_r+0x7f6>
 8006a0e:	f04f 0800 	mov.w	r8, #0
 8006a12:	e7f6      	b.n	8006a02 <_dtoa_r+0x90a>
 8006a14:	4698      	mov	r8, r3
 8006a16:	e7f4      	b.n	8006a02 <_dtoa_r+0x90a>
 8006a18:	f43f af7d 	beq.w	8006916 <_dtoa_r+0x81e>
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	301c      	adds	r0, #28
 8006a20:	e772      	b.n	8006908 <_dtoa_r+0x810>
 8006a22:	9b08      	ldr	r3, [sp, #32]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	dc36      	bgt.n	8006a96 <_dtoa_r+0x99e>
 8006a28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	dd33      	ble.n	8006a96 <_dtoa_r+0x99e>
 8006a2e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a32:	f1b9 0f00 	cmp.w	r9, #0
 8006a36:	d10d      	bne.n	8006a54 <_dtoa_r+0x95c>
 8006a38:	4621      	mov	r1, r4
 8006a3a:	464b      	mov	r3, r9
 8006a3c:	2205      	movs	r2, #5
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f000 fbe0 	bl	8007204 <__multadd>
 8006a44:	4601      	mov	r1, r0
 8006a46:	4604      	mov	r4, r0
 8006a48:	4658      	mov	r0, fp
 8006a4a:	f000 fdf7 	bl	800763c <__mcmp>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	f73f adb8 	bgt.w	80065c4 <_dtoa_r+0x4cc>
 8006a54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a56:	9f03      	ldr	r7, [sp, #12]
 8006a58:	ea6f 0a03 	mvn.w	sl, r3
 8006a5c:	f04f 0800 	mov.w	r8, #0
 8006a60:	4621      	mov	r1, r4
 8006a62:	4628      	mov	r0, r5
 8006a64:	f000 fbac 	bl	80071c0 <_Bfree>
 8006a68:	2e00      	cmp	r6, #0
 8006a6a:	f43f aea7 	beq.w	80067bc <_dtoa_r+0x6c4>
 8006a6e:	f1b8 0f00 	cmp.w	r8, #0
 8006a72:	d005      	beq.n	8006a80 <_dtoa_r+0x988>
 8006a74:	45b0      	cmp	r8, r6
 8006a76:	d003      	beq.n	8006a80 <_dtoa_r+0x988>
 8006a78:	4641      	mov	r1, r8
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f000 fba0 	bl	80071c0 <_Bfree>
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	f000 fb9c 	bl	80071c0 <_Bfree>
 8006a88:	e698      	b.n	80067bc <_dtoa_r+0x6c4>
 8006a8a:	2400      	movs	r4, #0
 8006a8c:	4626      	mov	r6, r4
 8006a8e:	e7e1      	b.n	8006a54 <_dtoa_r+0x95c>
 8006a90:	46c2      	mov	sl, r8
 8006a92:	4626      	mov	r6, r4
 8006a94:	e596      	b.n	80065c4 <_dtoa_r+0x4cc>
 8006a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 80fd 	beq.w	8006c9c <_dtoa_r+0xba4>
 8006aa2:	2f00      	cmp	r7, #0
 8006aa4:	dd05      	ble.n	8006ab2 <_dtoa_r+0x9ba>
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	463a      	mov	r2, r7
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f000 fd56 	bl	800755c <__lshift>
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	f1b8 0f00 	cmp.w	r8, #0
 8006ab6:	d05c      	beq.n	8006b72 <_dtoa_r+0xa7a>
 8006ab8:	4628      	mov	r0, r5
 8006aba:	6871      	ldr	r1, [r6, #4]
 8006abc:	f000 fb40 	bl	8007140 <_Balloc>
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	b928      	cbnz	r0, 8006ad0 <_dtoa_r+0x9d8>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006aca:	4b7f      	ldr	r3, [pc, #508]	; (8006cc8 <_dtoa_r+0xbd0>)
 8006acc:	f7ff bb28 	b.w	8006120 <_dtoa_r+0x28>
 8006ad0:	6932      	ldr	r2, [r6, #16]
 8006ad2:	f106 010c 	add.w	r1, r6, #12
 8006ad6:	3202      	adds	r2, #2
 8006ad8:	0092      	lsls	r2, r2, #2
 8006ada:	300c      	adds	r0, #12
 8006adc:	f7fe fc9c 	bl	8005418 <memcpy>
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	4639      	mov	r1, r7
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	f000 fd39 	bl	800755c <__lshift>
 8006aea:	46b0      	mov	r8, r6
 8006aec:	4606      	mov	r6, r0
 8006aee:	9b03      	ldr	r3, [sp, #12]
 8006af0:	3301      	adds	r3, #1
 8006af2:	9308      	str	r3, [sp, #32]
 8006af4:	9b03      	ldr	r3, [sp, #12]
 8006af6:	444b      	add	r3, r9
 8006af8:	930a      	str	r3, [sp, #40]	; 0x28
 8006afa:	9b04      	ldr	r3, [sp, #16]
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	9309      	str	r3, [sp, #36]	; 0x24
 8006b02:	9b08      	ldr	r3, [sp, #32]
 8006b04:	4621      	mov	r1, r4
 8006b06:	3b01      	subs	r3, #1
 8006b08:	4658      	mov	r0, fp
 8006b0a:	9304      	str	r3, [sp, #16]
 8006b0c:	f7ff fa68 	bl	8005fe0 <quorem>
 8006b10:	4603      	mov	r3, r0
 8006b12:	4641      	mov	r1, r8
 8006b14:	3330      	adds	r3, #48	; 0x30
 8006b16:	9006      	str	r0, [sp, #24]
 8006b18:	4658      	mov	r0, fp
 8006b1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b1c:	f000 fd8e 	bl	800763c <__mcmp>
 8006b20:	4632      	mov	r2, r6
 8006b22:	4681      	mov	r9, r0
 8006b24:	4621      	mov	r1, r4
 8006b26:	4628      	mov	r0, r5
 8006b28:	f000 fda4 	bl	8007674 <__mdiff>
 8006b2c:	68c2      	ldr	r2, [r0, #12]
 8006b2e:	4607      	mov	r7, r0
 8006b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b32:	bb02      	cbnz	r2, 8006b76 <_dtoa_r+0xa7e>
 8006b34:	4601      	mov	r1, r0
 8006b36:	4658      	mov	r0, fp
 8006b38:	f000 fd80 	bl	800763c <__mcmp>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b40:	4639      	mov	r1, r7
 8006b42:	4628      	mov	r0, r5
 8006b44:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006b48:	f000 fb3a 	bl	80071c0 <_Bfree>
 8006b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b50:	9f08      	ldr	r7, [sp, #32]
 8006b52:	ea43 0102 	orr.w	r1, r3, r2
 8006b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b5c:	d10d      	bne.n	8006b7a <_dtoa_r+0xa82>
 8006b5e:	2b39      	cmp	r3, #57	; 0x39
 8006b60:	d029      	beq.n	8006bb6 <_dtoa_r+0xabe>
 8006b62:	f1b9 0f00 	cmp.w	r9, #0
 8006b66:	dd01      	ble.n	8006b6c <_dtoa_r+0xa74>
 8006b68:	9b06      	ldr	r3, [sp, #24]
 8006b6a:	3331      	adds	r3, #49	; 0x31
 8006b6c:	9a04      	ldr	r2, [sp, #16]
 8006b6e:	7013      	strb	r3, [r2, #0]
 8006b70:	e776      	b.n	8006a60 <_dtoa_r+0x968>
 8006b72:	4630      	mov	r0, r6
 8006b74:	e7b9      	b.n	8006aea <_dtoa_r+0x9f2>
 8006b76:	2201      	movs	r2, #1
 8006b78:	e7e2      	b.n	8006b40 <_dtoa_r+0xa48>
 8006b7a:	f1b9 0f00 	cmp.w	r9, #0
 8006b7e:	db06      	blt.n	8006b8e <_dtoa_r+0xa96>
 8006b80:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006b82:	ea41 0909 	orr.w	r9, r1, r9
 8006b86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b88:	ea59 0101 	orrs.w	r1, r9, r1
 8006b8c:	d120      	bne.n	8006bd0 <_dtoa_r+0xad8>
 8006b8e:	2a00      	cmp	r2, #0
 8006b90:	ddec      	ble.n	8006b6c <_dtoa_r+0xa74>
 8006b92:	4659      	mov	r1, fp
 8006b94:	2201      	movs	r2, #1
 8006b96:	4628      	mov	r0, r5
 8006b98:	9308      	str	r3, [sp, #32]
 8006b9a:	f000 fcdf 	bl	800755c <__lshift>
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	4683      	mov	fp, r0
 8006ba2:	f000 fd4b 	bl	800763c <__mcmp>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	9b08      	ldr	r3, [sp, #32]
 8006baa:	dc02      	bgt.n	8006bb2 <_dtoa_r+0xaba>
 8006bac:	d1de      	bne.n	8006b6c <_dtoa_r+0xa74>
 8006bae:	07da      	lsls	r2, r3, #31
 8006bb0:	d5dc      	bpl.n	8006b6c <_dtoa_r+0xa74>
 8006bb2:	2b39      	cmp	r3, #57	; 0x39
 8006bb4:	d1d8      	bne.n	8006b68 <_dtoa_r+0xa70>
 8006bb6:	2339      	movs	r3, #57	; 0x39
 8006bb8:	9a04      	ldr	r2, [sp, #16]
 8006bba:	7013      	strb	r3, [r2, #0]
 8006bbc:	463b      	mov	r3, r7
 8006bbe:	461f      	mov	r7, r3
 8006bc0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	2a39      	cmp	r2, #57	; 0x39
 8006bc8:	d050      	beq.n	8006c6c <_dtoa_r+0xb74>
 8006bca:	3201      	adds	r2, #1
 8006bcc:	701a      	strb	r2, [r3, #0]
 8006bce:	e747      	b.n	8006a60 <_dtoa_r+0x968>
 8006bd0:	2a00      	cmp	r2, #0
 8006bd2:	dd03      	ble.n	8006bdc <_dtoa_r+0xae4>
 8006bd4:	2b39      	cmp	r3, #57	; 0x39
 8006bd6:	d0ee      	beq.n	8006bb6 <_dtoa_r+0xabe>
 8006bd8:	3301      	adds	r3, #1
 8006bda:	e7c7      	b.n	8006b6c <_dtoa_r+0xa74>
 8006bdc:	9a08      	ldr	r2, [sp, #32]
 8006bde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006be0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006be4:	428a      	cmp	r2, r1
 8006be6:	d02a      	beq.n	8006c3e <_dtoa_r+0xb46>
 8006be8:	4659      	mov	r1, fp
 8006bea:	2300      	movs	r3, #0
 8006bec:	220a      	movs	r2, #10
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f000 fb08 	bl	8007204 <__multadd>
 8006bf4:	45b0      	cmp	r8, r6
 8006bf6:	4683      	mov	fp, r0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	f04f 020a 	mov.w	r2, #10
 8006c00:	4641      	mov	r1, r8
 8006c02:	4628      	mov	r0, r5
 8006c04:	d107      	bne.n	8006c16 <_dtoa_r+0xb1e>
 8006c06:	f000 fafd 	bl	8007204 <__multadd>
 8006c0a:	4680      	mov	r8, r0
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	9b08      	ldr	r3, [sp, #32]
 8006c10:	3301      	adds	r3, #1
 8006c12:	9308      	str	r3, [sp, #32]
 8006c14:	e775      	b.n	8006b02 <_dtoa_r+0xa0a>
 8006c16:	f000 faf5 	bl	8007204 <__multadd>
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	4680      	mov	r8, r0
 8006c1e:	2300      	movs	r3, #0
 8006c20:	220a      	movs	r2, #10
 8006c22:	4628      	mov	r0, r5
 8006c24:	f000 faee 	bl	8007204 <__multadd>
 8006c28:	4606      	mov	r6, r0
 8006c2a:	e7f0      	b.n	8006c0e <_dtoa_r+0xb16>
 8006c2c:	f1b9 0f00 	cmp.w	r9, #0
 8006c30:	bfcc      	ite	gt
 8006c32:	464f      	movgt	r7, r9
 8006c34:	2701      	movle	r7, #1
 8006c36:	f04f 0800 	mov.w	r8, #0
 8006c3a:	9a03      	ldr	r2, [sp, #12]
 8006c3c:	4417      	add	r7, r2
 8006c3e:	4659      	mov	r1, fp
 8006c40:	2201      	movs	r2, #1
 8006c42:	4628      	mov	r0, r5
 8006c44:	9308      	str	r3, [sp, #32]
 8006c46:	f000 fc89 	bl	800755c <__lshift>
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	4683      	mov	fp, r0
 8006c4e:	f000 fcf5 	bl	800763c <__mcmp>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	dcb2      	bgt.n	8006bbc <_dtoa_r+0xac4>
 8006c56:	d102      	bne.n	8006c5e <_dtoa_r+0xb66>
 8006c58:	9b08      	ldr	r3, [sp, #32]
 8006c5a:	07db      	lsls	r3, r3, #31
 8006c5c:	d4ae      	bmi.n	8006bbc <_dtoa_r+0xac4>
 8006c5e:	463b      	mov	r3, r7
 8006c60:	461f      	mov	r7, r3
 8006c62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c66:	2a30      	cmp	r2, #48	; 0x30
 8006c68:	d0fa      	beq.n	8006c60 <_dtoa_r+0xb68>
 8006c6a:	e6f9      	b.n	8006a60 <_dtoa_r+0x968>
 8006c6c:	9a03      	ldr	r2, [sp, #12]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d1a5      	bne.n	8006bbe <_dtoa_r+0xac6>
 8006c72:	2331      	movs	r3, #49	; 0x31
 8006c74:	f10a 0a01 	add.w	sl, sl, #1
 8006c78:	e779      	b.n	8006b6e <_dtoa_r+0xa76>
 8006c7a:	4b14      	ldr	r3, [pc, #80]	; (8006ccc <_dtoa_r+0xbd4>)
 8006c7c:	f7ff baa8 	b.w	80061d0 <_dtoa_r+0xd8>
 8006c80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f47f aa81 	bne.w	800618a <_dtoa_r+0x92>
 8006c88:	4b11      	ldr	r3, [pc, #68]	; (8006cd0 <_dtoa_r+0xbd8>)
 8006c8a:	f7ff baa1 	b.w	80061d0 <_dtoa_r+0xd8>
 8006c8e:	f1b9 0f00 	cmp.w	r9, #0
 8006c92:	dc03      	bgt.n	8006c9c <_dtoa_r+0xba4>
 8006c94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	f73f aecb 	bgt.w	8006a32 <_dtoa_r+0x93a>
 8006c9c:	9f03      	ldr	r7, [sp, #12]
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	4658      	mov	r0, fp
 8006ca2:	f7ff f99d 	bl	8005fe0 <quorem>
 8006ca6:	9a03      	ldr	r2, [sp, #12]
 8006ca8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006cac:	f807 3b01 	strb.w	r3, [r7], #1
 8006cb0:	1aba      	subs	r2, r7, r2
 8006cb2:	4591      	cmp	r9, r2
 8006cb4:	ddba      	ble.n	8006c2c <_dtoa_r+0xb34>
 8006cb6:	4659      	mov	r1, fp
 8006cb8:	2300      	movs	r3, #0
 8006cba:	220a      	movs	r2, #10
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	f000 faa1 	bl	8007204 <__multadd>
 8006cc2:	4683      	mov	fp, r0
 8006cc4:	e7eb      	b.n	8006c9e <_dtoa_r+0xba6>
 8006cc6:	bf00      	nop
 8006cc8:	080087ef 	.word	0x080087ef
 8006ccc:	0800874c 	.word	0x0800874c
 8006cd0:	08008770 	.word	0x08008770

08006cd4 <__sflush_r>:
 8006cd4:	898a      	ldrh	r2, [r1, #12]
 8006cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd8:	4605      	mov	r5, r0
 8006cda:	0710      	lsls	r0, r2, #28
 8006cdc:	460c      	mov	r4, r1
 8006cde:	d457      	bmi.n	8006d90 <__sflush_r+0xbc>
 8006ce0:	684b      	ldr	r3, [r1, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dc04      	bgt.n	8006cf0 <__sflush_r+0x1c>
 8006ce6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	dc01      	bgt.n	8006cf0 <__sflush_r+0x1c>
 8006cec:	2000      	movs	r0, #0
 8006cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cf2:	2e00      	cmp	r6, #0
 8006cf4:	d0fa      	beq.n	8006cec <__sflush_r+0x18>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cfc:	682f      	ldr	r7, [r5, #0]
 8006cfe:	602b      	str	r3, [r5, #0]
 8006d00:	d032      	beq.n	8006d68 <__sflush_r+0x94>
 8006d02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	075a      	lsls	r2, r3, #29
 8006d08:	d505      	bpl.n	8006d16 <__sflush_r+0x42>
 8006d0a:	6863      	ldr	r3, [r4, #4]
 8006d0c:	1ac0      	subs	r0, r0, r3
 8006d0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d10:	b10b      	cbz	r3, 8006d16 <__sflush_r+0x42>
 8006d12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d14:	1ac0      	subs	r0, r0, r3
 8006d16:	2300      	movs	r3, #0
 8006d18:	4602      	mov	r2, r0
 8006d1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	6a21      	ldr	r1, [r4, #32]
 8006d20:	47b0      	blx	r6
 8006d22:	1c43      	adds	r3, r0, #1
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	d106      	bne.n	8006d36 <__sflush_r+0x62>
 8006d28:	6829      	ldr	r1, [r5, #0]
 8006d2a:	291d      	cmp	r1, #29
 8006d2c:	d82c      	bhi.n	8006d88 <__sflush_r+0xb4>
 8006d2e:	4a29      	ldr	r2, [pc, #164]	; (8006dd4 <__sflush_r+0x100>)
 8006d30:	40ca      	lsrs	r2, r1
 8006d32:	07d6      	lsls	r6, r2, #31
 8006d34:	d528      	bpl.n	8006d88 <__sflush_r+0xb4>
 8006d36:	2200      	movs	r2, #0
 8006d38:	6062      	str	r2, [r4, #4]
 8006d3a:	6922      	ldr	r2, [r4, #16]
 8006d3c:	04d9      	lsls	r1, r3, #19
 8006d3e:	6022      	str	r2, [r4, #0]
 8006d40:	d504      	bpl.n	8006d4c <__sflush_r+0x78>
 8006d42:	1c42      	adds	r2, r0, #1
 8006d44:	d101      	bne.n	8006d4a <__sflush_r+0x76>
 8006d46:	682b      	ldr	r3, [r5, #0]
 8006d48:	b903      	cbnz	r3, 8006d4c <__sflush_r+0x78>
 8006d4a:	6560      	str	r0, [r4, #84]	; 0x54
 8006d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d4e:	602f      	str	r7, [r5, #0]
 8006d50:	2900      	cmp	r1, #0
 8006d52:	d0cb      	beq.n	8006cec <__sflush_r+0x18>
 8006d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d58:	4299      	cmp	r1, r3
 8006d5a:	d002      	beq.n	8006d62 <__sflush_r+0x8e>
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f000 fd85 	bl	800786c <_free_r>
 8006d62:	2000      	movs	r0, #0
 8006d64:	6360      	str	r0, [r4, #52]	; 0x34
 8006d66:	e7c2      	b.n	8006cee <__sflush_r+0x1a>
 8006d68:	6a21      	ldr	r1, [r4, #32]
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	47b0      	blx	r6
 8006d70:	1c41      	adds	r1, r0, #1
 8006d72:	d1c7      	bne.n	8006d04 <__sflush_r+0x30>
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0c4      	beq.n	8006d04 <__sflush_r+0x30>
 8006d7a:	2b1d      	cmp	r3, #29
 8006d7c:	d001      	beq.n	8006d82 <__sflush_r+0xae>
 8006d7e:	2b16      	cmp	r3, #22
 8006d80:	d101      	bne.n	8006d86 <__sflush_r+0xb2>
 8006d82:	602f      	str	r7, [r5, #0]
 8006d84:	e7b2      	b.n	8006cec <__sflush_r+0x18>
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d8c:	81a3      	strh	r3, [r4, #12]
 8006d8e:	e7ae      	b.n	8006cee <__sflush_r+0x1a>
 8006d90:	690f      	ldr	r7, [r1, #16]
 8006d92:	2f00      	cmp	r7, #0
 8006d94:	d0aa      	beq.n	8006cec <__sflush_r+0x18>
 8006d96:	0793      	lsls	r3, r2, #30
 8006d98:	bf18      	it	ne
 8006d9a:	2300      	movne	r3, #0
 8006d9c:	680e      	ldr	r6, [r1, #0]
 8006d9e:	bf08      	it	eq
 8006da0:	694b      	ldreq	r3, [r1, #20]
 8006da2:	1bf6      	subs	r6, r6, r7
 8006da4:	600f      	str	r7, [r1, #0]
 8006da6:	608b      	str	r3, [r1, #8]
 8006da8:	2e00      	cmp	r6, #0
 8006daa:	dd9f      	ble.n	8006cec <__sflush_r+0x18>
 8006dac:	4633      	mov	r3, r6
 8006dae:	463a      	mov	r2, r7
 8006db0:	4628      	mov	r0, r5
 8006db2:	6a21      	ldr	r1, [r4, #32]
 8006db4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006db8:	47e0      	blx	ip
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	dc06      	bgt.n	8006dcc <__sflush_r+0xf8>
 8006dbe:	89a3      	ldrh	r3, [r4, #12]
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dc8:	81a3      	strh	r3, [r4, #12]
 8006dca:	e790      	b.n	8006cee <__sflush_r+0x1a>
 8006dcc:	4407      	add	r7, r0
 8006dce:	1a36      	subs	r6, r6, r0
 8006dd0:	e7ea      	b.n	8006da8 <__sflush_r+0xd4>
 8006dd2:	bf00      	nop
 8006dd4:	20400001 	.word	0x20400001

08006dd8 <_fflush_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	690b      	ldr	r3, [r1, #16]
 8006ddc:	4605      	mov	r5, r0
 8006dde:	460c      	mov	r4, r1
 8006de0:	b913      	cbnz	r3, 8006de8 <_fflush_r+0x10>
 8006de2:	2500      	movs	r5, #0
 8006de4:	4628      	mov	r0, r5
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	b118      	cbz	r0, 8006df2 <_fflush_r+0x1a>
 8006dea:	6983      	ldr	r3, [r0, #24]
 8006dec:	b90b      	cbnz	r3, 8006df2 <_fflush_r+0x1a>
 8006dee:	f000 f887 	bl	8006f00 <__sinit>
 8006df2:	4b14      	ldr	r3, [pc, #80]	; (8006e44 <_fflush_r+0x6c>)
 8006df4:	429c      	cmp	r4, r3
 8006df6:	d11b      	bne.n	8006e30 <_fflush_r+0x58>
 8006df8:	686c      	ldr	r4, [r5, #4]
 8006dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0ef      	beq.n	8006de2 <_fflush_r+0xa>
 8006e02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e04:	07d0      	lsls	r0, r2, #31
 8006e06:	d404      	bmi.n	8006e12 <_fflush_r+0x3a>
 8006e08:	0599      	lsls	r1, r3, #22
 8006e0a:	d402      	bmi.n	8006e12 <_fflush_r+0x3a>
 8006e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e0e:	f000 f91a 	bl	8007046 <__retarget_lock_acquire_recursive>
 8006e12:	4628      	mov	r0, r5
 8006e14:	4621      	mov	r1, r4
 8006e16:	f7ff ff5d 	bl	8006cd4 <__sflush_r>
 8006e1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	07da      	lsls	r2, r3, #31
 8006e20:	d4e0      	bmi.n	8006de4 <_fflush_r+0xc>
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	059b      	lsls	r3, r3, #22
 8006e26:	d4dd      	bmi.n	8006de4 <_fflush_r+0xc>
 8006e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e2a:	f000 f90d 	bl	8007048 <__retarget_lock_release_recursive>
 8006e2e:	e7d9      	b.n	8006de4 <_fflush_r+0xc>
 8006e30:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <_fflush_r+0x70>)
 8006e32:	429c      	cmp	r4, r3
 8006e34:	d101      	bne.n	8006e3a <_fflush_r+0x62>
 8006e36:	68ac      	ldr	r4, [r5, #8]
 8006e38:	e7df      	b.n	8006dfa <_fflush_r+0x22>
 8006e3a:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <_fflush_r+0x74>)
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	bf08      	it	eq
 8006e40:	68ec      	ldreq	r4, [r5, #12]
 8006e42:	e7da      	b.n	8006dfa <_fflush_r+0x22>
 8006e44:	08008820 	.word	0x08008820
 8006e48:	08008840 	.word	0x08008840
 8006e4c:	08008800 	.word	0x08008800

08006e50 <std>:
 8006e50:	2300      	movs	r3, #0
 8006e52:	b510      	push	{r4, lr}
 8006e54:	4604      	mov	r4, r0
 8006e56:	e9c0 3300 	strd	r3, r3, [r0]
 8006e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e5e:	6083      	str	r3, [r0, #8]
 8006e60:	8181      	strh	r1, [r0, #12]
 8006e62:	6643      	str	r3, [r0, #100]	; 0x64
 8006e64:	81c2      	strh	r2, [r0, #14]
 8006e66:	6183      	str	r3, [r0, #24]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	2208      	movs	r2, #8
 8006e6c:	305c      	adds	r0, #92	; 0x5c
 8006e6e:	f7fe fae1 	bl	8005434 <memset>
 8006e72:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <std+0x38>)
 8006e74:	6224      	str	r4, [r4, #32]
 8006e76:	6263      	str	r3, [r4, #36]	; 0x24
 8006e78:	4b04      	ldr	r3, [pc, #16]	; (8006e8c <std+0x3c>)
 8006e7a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e7c:	4b04      	ldr	r3, [pc, #16]	; (8006e90 <std+0x40>)
 8006e7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e80:	4b04      	ldr	r3, [pc, #16]	; (8006e94 <std+0x44>)
 8006e82:	6323      	str	r3, [r4, #48]	; 0x30
 8006e84:	bd10      	pop	{r4, pc}
 8006e86:	bf00      	nop
 8006e88:	08007fad 	.word	0x08007fad
 8006e8c:	08007fcf 	.word	0x08007fcf
 8006e90:	08008007 	.word	0x08008007
 8006e94:	0800802b 	.word	0x0800802b

08006e98 <_cleanup_r>:
 8006e98:	4901      	ldr	r1, [pc, #4]	; (8006ea0 <_cleanup_r+0x8>)
 8006e9a:	f000 b8af 	b.w	8006ffc <_fwalk_reent>
 8006e9e:	bf00      	nop
 8006ea0:	08006dd9 	.word	0x08006dd9

08006ea4 <__sfmoreglue>:
 8006ea4:	2268      	movs	r2, #104	; 0x68
 8006ea6:	b570      	push	{r4, r5, r6, lr}
 8006ea8:	1e4d      	subs	r5, r1, #1
 8006eaa:	4355      	muls	r5, r2
 8006eac:	460e      	mov	r6, r1
 8006eae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006eb2:	f000 fd43 	bl	800793c <_malloc_r>
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	b140      	cbz	r0, 8006ecc <__sfmoreglue+0x28>
 8006eba:	2100      	movs	r1, #0
 8006ebc:	e9c0 1600 	strd	r1, r6, [r0]
 8006ec0:	300c      	adds	r0, #12
 8006ec2:	60a0      	str	r0, [r4, #8]
 8006ec4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ec8:	f7fe fab4 	bl	8005434 <memset>
 8006ecc:	4620      	mov	r0, r4
 8006ece:	bd70      	pop	{r4, r5, r6, pc}

08006ed0 <__sfp_lock_acquire>:
 8006ed0:	4801      	ldr	r0, [pc, #4]	; (8006ed8 <__sfp_lock_acquire+0x8>)
 8006ed2:	f000 b8b8 	b.w	8007046 <__retarget_lock_acquire_recursive>
 8006ed6:	bf00      	nop
 8006ed8:	20000389 	.word	0x20000389

08006edc <__sfp_lock_release>:
 8006edc:	4801      	ldr	r0, [pc, #4]	; (8006ee4 <__sfp_lock_release+0x8>)
 8006ede:	f000 b8b3 	b.w	8007048 <__retarget_lock_release_recursive>
 8006ee2:	bf00      	nop
 8006ee4:	20000389 	.word	0x20000389

08006ee8 <__sinit_lock_acquire>:
 8006ee8:	4801      	ldr	r0, [pc, #4]	; (8006ef0 <__sinit_lock_acquire+0x8>)
 8006eea:	f000 b8ac 	b.w	8007046 <__retarget_lock_acquire_recursive>
 8006eee:	bf00      	nop
 8006ef0:	2000038a 	.word	0x2000038a

08006ef4 <__sinit_lock_release>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	; (8006efc <__sinit_lock_release+0x8>)
 8006ef6:	f000 b8a7 	b.w	8007048 <__retarget_lock_release_recursive>
 8006efa:	bf00      	nop
 8006efc:	2000038a 	.word	0x2000038a

08006f00 <__sinit>:
 8006f00:	b510      	push	{r4, lr}
 8006f02:	4604      	mov	r4, r0
 8006f04:	f7ff fff0 	bl	8006ee8 <__sinit_lock_acquire>
 8006f08:	69a3      	ldr	r3, [r4, #24]
 8006f0a:	b11b      	cbz	r3, 8006f14 <__sinit+0x14>
 8006f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f10:	f7ff bff0 	b.w	8006ef4 <__sinit_lock_release>
 8006f14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f18:	6523      	str	r3, [r4, #80]	; 0x50
 8006f1a:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <__sinit+0x68>)
 8006f1c:	4a13      	ldr	r2, [pc, #76]	; (8006f6c <__sinit+0x6c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f22:	42a3      	cmp	r3, r4
 8006f24:	bf08      	it	eq
 8006f26:	2301      	moveq	r3, #1
 8006f28:	4620      	mov	r0, r4
 8006f2a:	bf08      	it	eq
 8006f2c:	61a3      	streq	r3, [r4, #24]
 8006f2e:	f000 f81f 	bl	8006f70 <__sfp>
 8006f32:	6060      	str	r0, [r4, #4]
 8006f34:	4620      	mov	r0, r4
 8006f36:	f000 f81b 	bl	8006f70 <__sfp>
 8006f3a:	60a0      	str	r0, [r4, #8]
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f000 f817 	bl	8006f70 <__sfp>
 8006f42:	2200      	movs	r2, #0
 8006f44:	2104      	movs	r1, #4
 8006f46:	60e0      	str	r0, [r4, #12]
 8006f48:	6860      	ldr	r0, [r4, #4]
 8006f4a:	f7ff ff81 	bl	8006e50 <std>
 8006f4e:	2201      	movs	r2, #1
 8006f50:	2109      	movs	r1, #9
 8006f52:	68a0      	ldr	r0, [r4, #8]
 8006f54:	f7ff ff7c 	bl	8006e50 <std>
 8006f58:	2202      	movs	r2, #2
 8006f5a:	2112      	movs	r1, #18
 8006f5c:	68e0      	ldr	r0, [r4, #12]
 8006f5e:	f7ff ff77 	bl	8006e50 <std>
 8006f62:	2301      	movs	r3, #1
 8006f64:	61a3      	str	r3, [r4, #24]
 8006f66:	e7d1      	b.n	8006f0c <__sinit+0xc>
 8006f68:	08008738 	.word	0x08008738
 8006f6c:	08006e99 	.word	0x08006e99

08006f70 <__sfp>:
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f72:	4607      	mov	r7, r0
 8006f74:	f7ff ffac 	bl	8006ed0 <__sfp_lock_acquire>
 8006f78:	4b1e      	ldr	r3, [pc, #120]	; (8006ff4 <__sfp+0x84>)
 8006f7a:	681e      	ldr	r6, [r3, #0]
 8006f7c:	69b3      	ldr	r3, [r6, #24]
 8006f7e:	b913      	cbnz	r3, 8006f86 <__sfp+0x16>
 8006f80:	4630      	mov	r0, r6
 8006f82:	f7ff ffbd 	bl	8006f00 <__sinit>
 8006f86:	3648      	adds	r6, #72	; 0x48
 8006f88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	d503      	bpl.n	8006f98 <__sfp+0x28>
 8006f90:	6833      	ldr	r3, [r6, #0]
 8006f92:	b30b      	cbz	r3, 8006fd8 <__sfp+0x68>
 8006f94:	6836      	ldr	r6, [r6, #0]
 8006f96:	e7f7      	b.n	8006f88 <__sfp+0x18>
 8006f98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f9c:	b9d5      	cbnz	r5, 8006fd4 <__sfp+0x64>
 8006f9e:	4b16      	ldr	r3, [pc, #88]	; (8006ff8 <__sfp+0x88>)
 8006fa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fa4:	60e3      	str	r3, [r4, #12]
 8006fa6:	6665      	str	r5, [r4, #100]	; 0x64
 8006fa8:	f000 f84c 	bl	8007044 <__retarget_lock_init_recursive>
 8006fac:	f7ff ff96 	bl	8006edc <__sfp_lock_release>
 8006fb0:	2208      	movs	r2, #8
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fbc:	6025      	str	r5, [r4, #0]
 8006fbe:	61a5      	str	r5, [r4, #24]
 8006fc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fc4:	f7fe fa36 	bl	8005434 <memset>
 8006fc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fd4:	3468      	adds	r4, #104	; 0x68
 8006fd6:	e7d9      	b.n	8006f8c <__sfp+0x1c>
 8006fd8:	2104      	movs	r1, #4
 8006fda:	4638      	mov	r0, r7
 8006fdc:	f7ff ff62 	bl	8006ea4 <__sfmoreglue>
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	6030      	str	r0, [r6, #0]
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d1d5      	bne.n	8006f94 <__sfp+0x24>
 8006fe8:	f7ff ff78 	bl	8006edc <__sfp_lock_release>
 8006fec:	230c      	movs	r3, #12
 8006fee:	603b      	str	r3, [r7, #0]
 8006ff0:	e7ee      	b.n	8006fd0 <__sfp+0x60>
 8006ff2:	bf00      	nop
 8006ff4:	08008738 	.word	0x08008738
 8006ff8:	ffff0001 	.word	0xffff0001

08006ffc <_fwalk_reent>:
 8006ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007000:	4606      	mov	r6, r0
 8007002:	4688      	mov	r8, r1
 8007004:	2700      	movs	r7, #0
 8007006:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800700a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800700e:	f1b9 0901 	subs.w	r9, r9, #1
 8007012:	d505      	bpl.n	8007020 <_fwalk_reent+0x24>
 8007014:	6824      	ldr	r4, [r4, #0]
 8007016:	2c00      	cmp	r4, #0
 8007018:	d1f7      	bne.n	800700a <_fwalk_reent+0xe>
 800701a:	4638      	mov	r0, r7
 800701c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007020:	89ab      	ldrh	r3, [r5, #12]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d907      	bls.n	8007036 <_fwalk_reent+0x3a>
 8007026:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800702a:	3301      	adds	r3, #1
 800702c:	d003      	beq.n	8007036 <_fwalk_reent+0x3a>
 800702e:	4629      	mov	r1, r5
 8007030:	4630      	mov	r0, r6
 8007032:	47c0      	blx	r8
 8007034:	4307      	orrs	r7, r0
 8007036:	3568      	adds	r5, #104	; 0x68
 8007038:	e7e9      	b.n	800700e <_fwalk_reent+0x12>
	...

0800703c <_localeconv_r>:
 800703c:	4800      	ldr	r0, [pc, #0]	; (8007040 <_localeconv_r+0x4>)
 800703e:	4770      	bx	lr
 8007040:	20000180 	.word	0x20000180

08007044 <__retarget_lock_init_recursive>:
 8007044:	4770      	bx	lr

08007046 <__retarget_lock_acquire_recursive>:
 8007046:	4770      	bx	lr

08007048 <__retarget_lock_release_recursive>:
 8007048:	4770      	bx	lr

0800704a <__swhatbuf_r>:
 800704a:	b570      	push	{r4, r5, r6, lr}
 800704c:	460e      	mov	r6, r1
 800704e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007052:	4614      	mov	r4, r2
 8007054:	2900      	cmp	r1, #0
 8007056:	461d      	mov	r5, r3
 8007058:	b096      	sub	sp, #88	; 0x58
 800705a:	da08      	bge.n	800706e <__swhatbuf_r+0x24>
 800705c:	2200      	movs	r2, #0
 800705e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007062:	602a      	str	r2, [r5, #0]
 8007064:	061a      	lsls	r2, r3, #24
 8007066:	d410      	bmi.n	800708a <__swhatbuf_r+0x40>
 8007068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800706c:	e00e      	b.n	800708c <__swhatbuf_r+0x42>
 800706e:	466a      	mov	r2, sp
 8007070:	f001 f832 	bl	80080d8 <_fstat_r>
 8007074:	2800      	cmp	r0, #0
 8007076:	dbf1      	blt.n	800705c <__swhatbuf_r+0x12>
 8007078:	9a01      	ldr	r2, [sp, #4]
 800707a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800707e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007082:	425a      	negs	r2, r3
 8007084:	415a      	adcs	r2, r3
 8007086:	602a      	str	r2, [r5, #0]
 8007088:	e7ee      	b.n	8007068 <__swhatbuf_r+0x1e>
 800708a:	2340      	movs	r3, #64	; 0x40
 800708c:	2000      	movs	r0, #0
 800708e:	6023      	str	r3, [r4, #0]
 8007090:	b016      	add	sp, #88	; 0x58
 8007092:	bd70      	pop	{r4, r5, r6, pc}

08007094 <__smakebuf_r>:
 8007094:	898b      	ldrh	r3, [r1, #12]
 8007096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007098:	079d      	lsls	r5, r3, #30
 800709a:	4606      	mov	r6, r0
 800709c:	460c      	mov	r4, r1
 800709e:	d507      	bpl.n	80070b0 <__smakebuf_r+0x1c>
 80070a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	6123      	str	r3, [r4, #16]
 80070a8:	2301      	movs	r3, #1
 80070aa:	6163      	str	r3, [r4, #20]
 80070ac:	b002      	add	sp, #8
 80070ae:	bd70      	pop	{r4, r5, r6, pc}
 80070b0:	466a      	mov	r2, sp
 80070b2:	ab01      	add	r3, sp, #4
 80070b4:	f7ff ffc9 	bl	800704a <__swhatbuf_r>
 80070b8:	9900      	ldr	r1, [sp, #0]
 80070ba:	4605      	mov	r5, r0
 80070bc:	4630      	mov	r0, r6
 80070be:	f000 fc3d 	bl	800793c <_malloc_r>
 80070c2:	b948      	cbnz	r0, 80070d8 <__smakebuf_r+0x44>
 80070c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070c8:	059a      	lsls	r2, r3, #22
 80070ca:	d4ef      	bmi.n	80070ac <__smakebuf_r+0x18>
 80070cc:	f023 0303 	bic.w	r3, r3, #3
 80070d0:	f043 0302 	orr.w	r3, r3, #2
 80070d4:	81a3      	strh	r3, [r4, #12]
 80070d6:	e7e3      	b.n	80070a0 <__smakebuf_r+0xc>
 80070d8:	4b0d      	ldr	r3, [pc, #52]	; (8007110 <__smakebuf_r+0x7c>)
 80070da:	62b3      	str	r3, [r6, #40]	; 0x28
 80070dc:	89a3      	ldrh	r3, [r4, #12]
 80070de:	6020      	str	r0, [r4, #0]
 80070e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070e4:	81a3      	strh	r3, [r4, #12]
 80070e6:	9b00      	ldr	r3, [sp, #0]
 80070e8:	6120      	str	r0, [r4, #16]
 80070ea:	6163      	str	r3, [r4, #20]
 80070ec:	9b01      	ldr	r3, [sp, #4]
 80070ee:	b15b      	cbz	r3, 8007108 <__smakebuf_r+0x74>
 80070f0:	4630      	mov	r0, r6
 80070f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070f6:	f001 f801 	bl	80080fc <_isatty_r>
 80070fa:	b128      	cbz	r0, 8007108 <__smakebuf_r+0x74>
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	f023 0303 	bic.w	r3, r3, #3
 8007102:	f043 0301 	orr.w	r3, r3, #1
 8007106:	81a3      	strh	r3, [r4, #12]
 8007108:	89a0      	ldrh	r0, [r4, #12]
 800710a:	4305      	orrs	r5, r0
 800710c:	81a5      	strh	r5, [r4, #12]
 800710e:	e7cd      	b.n	80070ac <__smakebuf_r+0x18>
 8007110:	08006e99 	.word	0x08006e99

08007114 <malloc>:
 8007114:	4b02      	ldr	r3, [pc, #8]	; (8007120 <malloc+0xc>)
 8007116:	4601      	mov	r1, r0
 8007118:	6818      	ldr	r0, [r3, #0]
 800711a:	f000 bc0f 	b.w	800793c <_malloc_r>
 800711e:	bf00      	nop
 8007120:	2000002c 	.word	0x2000002c

08007124 <memchr>:
 8007124:	4603      	mov	r3, r0
 8007126:	b510      	push	{r4, lr}
 8007128:	b2c9      	uxtb	r1, r1
 800712a:	4402      	add	r2, r0
 800712c:	4293      	cmp	r3, r2
 800712e:	4618      	mov	r0, r3
 8007130:	d101      	bne.n	8007136 <memchr+0x12>
 8007132:	2000      	movs	r0, #0
 8007134:	e003      	b.n	800713e <memchr+0x1a>
 8007136:	7804      	ldrb	r4, [r0, #0]
 8007138:	3301      	adds	r3, #1
 800713a:	428c      	cmp	r4, r1
 800713c:	d1f6      	bne.n	800712c <memchr+0x8>
 800713e:	bd10      	pop	{r4, pc}

08007140 <_Balloc>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007144:	4604      	mov	r4, r0
 8007146:	460d      	mov	r5, r1
 8007148:	b976      	cbnz	r6, 8007168 <_Balloc+0x28>
 800714a:	2010      	movs	r0, #16
 800714c:	f7ff ffe2 	bl	8007114 <malloc>
 8007150:	4602      	mov	r2, r0
 8007152:	6260      	str	r0, [r4, #36]	; 0x24
 8007154:	b920      	cbnz	r0, 8007160 <_Balloc+0x20>
 8007156:	2166      	movs	r1, #102	; 0x66
 8007158:	4b17      	ldr	r3, [pc, #92]	; (80071b8 <_Balloc+0x78>)
 800715a:	4818      	ldr	r0, [pc, #96]	; (80071bc <_Balloc+0x7c>)
 800715c:	f000 ff7c 	bl	8008058 <__assert_func>
 8007160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007164:	6006      	str	r6, [r0, #0]
 8007166:	60c6      	str	r6, [r0, #12]
 8007168:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800716a:	68f3      	ldr	r3, [r6, #12]
 800716c:	b183      	cbz	r3, 8007190 <_Balloc+0x50>
 800716e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007176:	b9b8      	cbnz	r0, 80071a8 <_Balloc+0x68>
 8007178:	2101      	movs	r1, #1
 800717a:	fa01 f605 	lsl.w	r6, r1, r5
 800717e:	1d72      	adds	r2, r6, #5
 8007180:	4620      	mov	r0, r4
 8007182:	0092      	lsls	r2, r2, #2
 8007184:	f000 fb5e 	bl	8007844 <_calloc_r>
 8007188:	b160      	cbz	r0, 80071a4 <_Balloc+0x64>
 800718a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800718e:	e00e      	b.n	80071ae <_Balloc+0x6e>
 8007190:	2221      	movs	r2, #33	; 0x21
 8007192:	2104      	movs	r1, #4
 8007194:	4620      	mov	r0, r4
 8007196:	f000 fb55 	bl	8007844 <_calloc_r>
 800719a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800719c:	60f0      	str	r0, [r6, #12]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1e4      	bne.n	800716e <_Balloc+0x2e>
 80071a4:	2000      	movs	r0, #0
 80071a6:	bd70      	pop	{r4, r5, r6, pc}
 80071a8:	6802      	ldr	r2, [r0, #0]
 80071aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071ae:	2300      	movs	r3, #0
 80071b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071b4:	e7f7      	b.n	80071a6 <_Balloc+0x66>
 80071b6:	bf00      	nop
 80071b8:	0800877d 	.word	0x0800877d
 80071bc:	08008860 	.word	0x08008860

080071c0 <_Bfree>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071c4:	4605      	mov	r5, r0
 80071c6:	460c      	mov	r4, r1
 80071c8:	b976      	cbnz	r6, 80071e8 <_Bfree+0x28>
 80071ca:	2010      	movs	r0, #16
 80071cc:	f7ff ffa2 	bl	8007114 <malloc>
 80071d0:	4602      	mov	r2, r0
 80071d2:	6268      	str	r0, [r5, #36]	; 0x24
 80071d4:	b920      	cbnz	r0, 80071e0 <_Bfree+0x20>
 80071d6:	218a      	movs	r1, #138	; 0x8a
 80071d8:	4b08      	ldr	r3, [pc, #32]	; (80071fc <_Bfree+0x3c>)
 80071da:	4809      	ldr	r0, [pc, #36]	; (8007200 <_Bfree+0x40>)
 80071dc:	f000 ff3c 	bl	8008058 <__assert_func>
 80071e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071e4:	6006      	str	r6, [r0, #0]
 80071e6:	60c6      	str	r6, [r0, #12]
 80071e8:	b13c      	cbz	r4, 80071fa <_Bfree+0x3a>
 80071ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80071ec:	6862      	ldr	r2, [r4, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071f4:	6021      	str	r1, [r4, #0]
 80071f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071fa:	bd70      	pop	{r4, r5, r6, pc}
 80071fc:	0800877d 	.word	0x0800877d
 8007200:	08008860 	.word	0x08008860

08007204 <__multadd>:
 8007204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007208:	4607      	mov	r7, r0
 800720a:	460c      	mov	r4, r1
 800720c:	461e      	mov	r6, r3
 800720e:	2000      	movs	r0, #0
 8007210:	690d      	ldr	r5, [r1, #16]
 8007212:	f101 0c14 	add.w	ip, r1, #20
 8007216:	f8dc 3000 	ldr.w	r3, [ip]
 800721a:	3001      	adds	r0, #1
 800721c:	b299      	uxth	r1, r3
 800721e:	fb02 6101 	mla	r1, r2, r1, r6
 8007222:	0c1e      	lsrs	r6, r3, #16
 8007224:	0c0b      	lsrs	r3, r1, #16
 8007226:	fb02 3306 	mla	r3, r2, r6, r3
 800722a:	b289      	uxth	r1, r1
 800722c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007230:	4285      	cmp	r5, r0
 8007232:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007236:	f84c 1b04 	str.w	r1, [ip], #4
 800723a:	dcec      	bgt.n	8007216 <__multadd+0x12>
 800723c:	b30e      	cbz	r6, 8007282 <__multadd+0x7e>
 800723e:	68a3      	ldr	r3, [r4, #8]
 8007240:	42ab      	cmp	r3, r5
 8007242:	dc19      	bgt.n	8007278 <__multadd+0x74>
 8007244:	6861      	ldr	r1, [r4, #4]
 8007246:	4638      	mov	r0, r7
 8007248:	3101      	adds	r1, #1
 800724a:	f7ff ff79 	bl	8007140 <_Balloc>
 800724e:	4680      	mov	r8, r0
 8007250:	b928      	cbnz	r0, 800725e <__multadd+0x5a>
 8007252:	4602      	mov	r2, r0
 8007254:	21b5      	movs	r1, #181	; 0xb5
 8007256:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <__multadd+0x84>)
 8007258:	480c      	ldr	r0, [pc, #48]	; (800728c <__multadd+0x88>)
 800725a:	f000 fefd 	bl	8008058 <__assert_func>
 800725e:	6922      	ldr	r2, [r4, #16]
 8007260:	f104 010c 	add.w	r1, r4, #12
 8007264:	3202      	adds	r2, #2
 8007266:	0092      	lsls	r2, r2, #2
 8007268:	300c      	adds	r0, #12
 800726a:	f7fe f8d5 	bl	8005418 <memcpy>
 800726e:	4621      	mov	r1, r4
 8007270:	4638      	mov	r0, r7
 8007272:	f7ff ffa5 	bl	80071c0 <_Bfree>
 8007276:	4644      	mov	r4, r8
 8007278:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800727c:	3501      	adds	r5, #1
 800727e:	615e      	str	r6, [r3, #20]
 8007280:	6125      	str	r5, [r4, #16]
 8007282:	4620      	mov	r0, r4
 8007284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007288:	080087ef 	.word	0x080087ef
 800728c:	08008860 	.word	0x08008860

08007290 <__hi0bits>:
 8007290:	0c02      	lsrs	r2, r0, #16
 8007292:	0412      	lsls	r2, r2, #16
 8007294:	4603      	mov	r3, r0
 8007296:	b9ca      	cbnz	r2, 80072cc <__hi0bits+0x3c>
 8007298:	0403      	lsls	r3, r0, #16
 800729a:	2010      	movs	r0, #16
 800729c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80072a0:	bf04      	itt	eq
 80072a2:	021b      	lsleq	r3, r3, #8
 80072a4:	3008      	addeq	r0, #8
 80072a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072aa:	bf04      	itt	eq
 80072ac:	011b      	lsleq	r3, r3, #4
 80072ae:	3004      	addeq	r0, #4
 80072b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80072b4:	bf04      	itt	eq
 80072b6:	009b      	lsleq	r3, r3, #2
 80072b8:	3002      	addeq	r0, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	db05      	blt.n	80072ca <__hi0bits+0x3a>
 80072be:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80072c2:	f100 0001 	add.w	r0, r0, #1
 80072c6:	bf08      	it	eq
 80072c8:	2020      	moveq	r0, #32
 80072ca:	4770      	bx	lr
 80072cc:	2000      	movs	r0, #0
 80072ce:	e7e5      	b.n	800729c <__hi0bits+0xc>

080072d0 <__lo0bits>:
 80072d0:	6803      	ldr	r3, [r0, #0]
 80072d2:	4602      	mov	r2, r0
 80072d4:	f013 0007 	ands.w	r0, r3, #7
 80072d8:	d00b      	beq.n	80072f2 <__lo0bits+0x22>
 80072da:	07d9      	lsls	r1, r3, #31
 80072dc:	d421      	bmi.n	8007322 <__lo0bits+0x52>
 80072de:	0798      	lsls	r0, r3, #30
 80072e0:	bf49      	itett	mi
 80072e2:	085b      	lsrmi	r3, r3, #1
 80072e4:	089b      	lsrpl	r3, r3, #2
 80072e6:	2001      	movmi	r0, #1
 80072e8:	6013      	strmi	r3, [r2, #0]
 80072ea:	bf5c      	itt	pl
 80072ec:	2002      	movpl	r0, #2
 80072ee:	6013      	strpl	r3, [r2, #0]
 80072f0:	4770      	bx	lr
 80072f2:	b299      	uxth	r1, r3
 80072f4:	b909      	cbnz	r1, 80072fa <__lo0bits+0x2a>
 80072f6:	2010      	movs	r0, #16
 80072f8:	0c1b      	lsrs	r3, r3, #16
 80072fa:	b2d9      	uxtb	r1, r3
 80072fc:	b909      	cbnz	r1, 8007302 <__lo0bits+0x32>
 80072fe:	3008      	adds	r0, #8
 8007300:	0a1b      	lsrs	r3, r3, #8
 8007302:	0719      	lsls	r1, r3, #28
 8007304:	bf04      	itt	eq
 8007306:	091b      	lsreq	r3, r3, #4
 8007308:	3004      	addeq	r0, #4
 800730a:	0799      	lsls	r1, r3, #30
 800730c:	bf04      	itt	eq
 800730e:	089b      	lsreq	r3, r3, #2
 8007310:	3002      	addeq	r0, #2
 8007312:	07d9      	lsls	r1, r3, #31
 8007314:	d403      	bmi.n	800731e <__lo0bits+0x4e>
 8007316:	085b      	lsrs	r3, r3, #1
 8007318:	f100 0001 	add.w	r0, r0, #1
 800731c:	d003      	beq.n	8007326 <__lo0bits+0x56>
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	4770      	bx	lr
 8007322:	2000      	movs	r0, #0
 8007324:	4770      	bx	lr
 8007326:	2020      	movs	r0, #32
 8007328:	4770      	bx	lr
	...

0800732c <__i2b>:
 800732c:	b510      	push	{r4, lr}
 800732e:	460c      	mov	r4, r1
 8007330:	2101      	movs	r1, #1
 8007332:	f7ff ff05 	bl	8007140 <_Balloc>
 8007336:	4602      	mov	r2, r0
 8007338:	b928      	cbnz	r0, 8007346 <__i2b+0x1a>
 800733a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800733e:	4b04      	ldr	r3, [pc, #16]	; (8007350 <__i2b+0x24>)
 8007340:	4804      	ldr	r0, [pc, #16]	; (8007354 <__i2b+0x28>)
 8007342:	f000 fe89 	bl	8008058 <__assert_func>
 8007346:	2301      	movs	r3, #1
 8007348:	6144      	str	r4, [r0, #20]
 800734a:	6103      	str	r3, [r0, #16]
 800734c:	bd10      	pop	{r4, pc}
 800734e:	bf00      	nop
 8007350:	080087ef 	.word	0x080087ef
 8007354:	08008860 	.word	0x08008860

08007358 <__multiply>:
 8007358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735c:	4691      	mov	r9, r2
 800735e:	690a      	ldr	r2, [r1, #16]
 8007360:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007364:	460c      	mov	r4, r1
 8007366:	429a      	cmp	r2, r3
 8007368:	bfbe      	ittt	lt
 800736a:	460b      	movlt	r3, r1
 800736c:	464c      	movlt	r4, r9
 800736e:	4699      	movlt	r9, r3
 8007370:	6927      	ldr	r7, [r4, #16]
 8007372:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007376:	68a3      	ldr	r3, [r4, #8]
 8007378:	6861      	ldr	r1, [r4, #4]
 800737a:	eb07 060a 	add.w	r6, r7, sl
 800737e:	42b3      	cmp	r3, r6
 8007380:	b085      	sub	sp, #20
 8007382:	bfb8      	it	lt
 8007384:	3101      	addlt	r1, #1
 8007386:	f7ff fedb 	bl	8007140 <_Balloc>
 800738a:	b930      	cbnz	r0, 800739a <__multiply+0x42>
 800738c:	4602      	mov	r2, r0
 800738e:	f240 115d 	movw	r1, #349	; 0x15d
 8007392:	4b43      	ldr	r3, [pc, #268]	; (80074a0 <__multiply+0x148>)
 8007394:	4843      	ldr	r0, [pc, #268]	; (80074a4 <__multiply+0x14c>)
 8007396:	f000 fe5f 	bl	8008058 <__assert_func>
 800739a:	f100 0514 	add.w	r5, r0, #20
 800739e:	462b      	mov	r3, r5
 80073a0:	2200      	movs	r2, #0
 80073a2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073a6:	4543      	cmp	r3, r8
 80073a8:	d321      	bcc.n	80073ee <__multiply+0x96>
 80073aa:	f104 0314 	add.w	r3, r4, #20
 80073ae:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80073b2:	f109 0314 	add.w	r3, r9, #20
 80073b6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80073ba:	9202      	str	r2, [sp, #8]
 80073bc:	1b3a      	subs	r2, r7, r4
 80073be:	3a15      	subs	r2, #21
 80073c0:	f022 0203 	bic.w	r2, r2, #3
 80073c4:	3204      	adds	r2, #4
 80073c6:	f104 0115 	add.w	r1, r4, #21
 80073ca:	428f      	cmp	r7, r1
 80073cc:	bf38      	it	cc
 80073ce:	2204      	movcc	r2, #4
 80073d0:	9201      	str	r2, [sp, #4]
 80073d2:	9a02      	ldr	r2, [sp, #8]
 80073d4:	9303      	str	r3, [sp, #12]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d80c      	bhi.n	80073f4 <__multiply+0x9c>
 80073da:	2e00      	cmp	r6, #0
 80073dc:	dd03      	ble.n	80073e6 <__multiply+0x8e>
 80073de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d059      	beq.n	800749a <__multiply+0x142>
 80073e6:	6106      	str	r6, [r0, #16]
 80073e8:	b005      	add	sp, #20
 80073ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ee:	f843 2b04 	str.w	r2, [r3], #4
 80073f2:	e7d8      	b.n	80073a6 <__multiply+0x4e>
 80073f4:	f8b3 a000 	ldrh.w	sl, [r3]
 80073f8:	f1ba 0f00 	cmp.w	sl, #0
 80073fc:	d023      	beq.n	8007446 <__multiply+0xee>
 80073fe:	46a9      	mov	r9, r5
 8007400:	f04f 0c00 	mov.w	ip, #0
 8007404:	f104 0e14 	add.w	lr, r4, #20
 8007408:	f85e 2b04 	ldr.w	r2, [lr], #4
 800740c:	f8d9 1000 	ldr.w	r1, [r9]
 8007410:	fa1f fb82 	uxth.w	fp, r2
 8007414:	b289      	uxth	r1, r1
 8007416:	fb0a 110b 	mla	r1, sl, fp, r1
 800741a:	4461      	add	r1, ip
 800741c:	f8d9 c000 	ldr.w	ip, [r9]
 8007420:	0c12      	lsrs	r2, r2, #16
 8007422:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007426:	fb0a c202 	mla	r2, sl, r2, ip
 800742a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800742e:	b289      	uxth	r1, r1
 8007430:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007434:	4577      	cmp	r7, lr
 8007436:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800743a:	f849 1b04 	str.w	r1, [r9], #4
 800743e:	d8e3      	bhi.n	8007408 <__multiply+0xb0>
 8007440:	9a01      	ldr	r2, [sp, #4]
 8007442:	f845 c002 	str.w	ip, [r5, r2]
 8007446:	9a03      	ldr	r2, [sp, #12]
 8007448:	3304      	adds	r3, #4
 800744a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800744e:	f1b9 0f00 	cmp.w	r9, #0
 8007452:	d020      	beq.n	8007496 <__multiply+0x13e>
 8007454:	46ae      	mov	lr, r5
 8007456:	f04f 0a00 	mov.w	sl, #0
 800745a:	6829      	ldr	r1, [r5, #0]
 800745c:	f104 0c14 	add.w	ip, r4, #20
 8007460:	f8bc b000 	ldrh.w	fp, [ip]
 8007464:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007468:	b289      	uxth	r1, r1
 800746a:	fb09 220b 	mla	r2, r9, fp, r2
 800746e:	4492      	add	sl, r2
 8007470:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007474:	f84e 1b04 	str.w	r1, [lr], #4
 8007478:	f85c 2b04 	ldr.w	r2, [ip], #4
 800747c:	f8be 1000 	ldrh.w	r1, [lr]
 8007480:	0c12      	lsrs	r2, r2, #16
 8007482:	fb09 1102 	mla	r1, r9, r2, r1
 8007486:	4567      	cmp	r7, ip
 8007488:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800748c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007490:	d8e6      	bhi.n	8007460 <__multiply+0x108>
 8007492:	9a01      	ldr	r2, [sp, #4]
 8007494:	50a9      	str	r1, [r5, r2]
 8007496:	3504      	adds	r5, #4
 8007498:	e79b      	b.n	80073d2 <__multiply+0x7a>
 800749a:	3e01      	subs	r6, #1
 800749c:	e79d      	b.n	80073da <__multiply+0x82>
 800749e:	bf00      	nop
 80074a0:	080087ef 	.word	0x080087ef
 80074a4:	08008860 	.word	0x08008860

080074a8 <__pow5mult>:
 80074a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074ac:	4615      	mov	r5, r2
 80074ae:	f012 0203 	ands.w	r2, r2, #3
 80074b2:	4606      	mov	r6, r0
 80074b4:	460f      	mov	r7, r1
 80074b6:	d007      	beq.n	80074c8 <__pow5mult+0x20>
 80074b8:	4c25      	ldr	r4, [pc, #148]	; (8007550 <__pow5mult+0xa8>)
 80074ba:	3a01      	subs	r2, #1
 80074bc:	2300      	movs	r3, #0
 80074be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074c2:	f7ff fe9f 	bl	8007204 <__multadd>
 80074c6:	4607      	mov	r7, r0
 80074c8:	10ad      	asrs	r5, r5, #2
 80074ca:	d03d      	beq.n	8007548 <__pow5mult+0xa0>
 80074cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80074ce:	b97c      	cbnz	r4, 80074f0 <__pow5mult+0x48>
 80074d0:	2010      	movs	r0, #16
 80074d2:	f7ff fe1f 	bl	8007114 <malloc>
 80074d6:	4602      	mov	r2, r0
 80074d8:	6270      	str	r0, [r6, #36]	; 0x24
 80074da:	b928      	cbnz	r0, 80074e8 <__pow5mult+0x40>
 80074dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80074e0:	4b1c      	ldr	r3, [pc, #112]	; (8007554 <__pow5mult+0xac>)
 80074e2:	481d      	ldr	r0, [pc, #116]	; (8007558 <__pow5mult+0xb0>)
 80074e4:	f000 fdb8 	bl	8008058 <__assert_func>
 80074e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074ec:	6004      	str	r4, [r0, #0]
 80074ee:	60c4      	str	r4, [r0, #12]
 80074f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074f8:	b94c      	cbnz	r4, 800750e <__pow5mult+0x66>
 80074fa:	f240 2171 	movw	r1, #625	; 0x271
 80074fe:	4630      	mov	r0, r6
 8007500:	f7ff ff14 	bl	800732c <__i2b>
 8007504:	2300      	movs	r3, #0
 8007506:	4604      	mov	r4, r0
 8007508:	f8c8 0008 	str.w	r0, [r8, #8]
 800750c:	6003      	str	r3, [r0, #0]
 800750e:	f04f 0900 	mov.w	r9, #0
 8007512:	07eb      	lsls	r3, r5, #31
 8007514:	d50a      	bpl.n	800752c <__pow5mult+0x84>
 8007516:	4639      	mov	r1, r7
 8007518:	4622      	mov	r2, r4
 800751a:	4630      	mov	r0, r6
 800751c:	f7ff ff1c 	bl	8007358 <__multiply>
 8007520:	4680      	mov	r8, r0
 8007522:	4639      	mov	r1, r7
 8007524:	4630      	mov	r0, r6
 8007526:	f7ff fe4b 	bl	80071c0 <_Bfree>
 800752a:	4647      	mov	r7, r8
 800752c:	106d      	asrs	r5, r5, #1
 800752e:	d00b      	beq.n	8007548 <__pow5mult+0xa0>
 8007530:	6820      	ldr	r0, [r4, #0]
 8007532:	b938      	cbnz	r0, 8007544 <__pow5mult+0x9c>
 8007534:	4622      	mov	r2, r4
 8007536:	4621      	mov	r1, r4
 8007538:	4630      	mov	r0, r6
 800753a:	f7ff ff0d 	bl	8007358 <__multiply>
 800753e:	6020      	str	r0, [r4, #0]
 8007540:	f8c0 9000 	str.w	r9, [r0]
 8007544:	4604      	mov	r4, r0
 8007546:	e7e4      	b.n	8007512 <__pow5mult+0x6a>
 8007548:	4638      	mov	r0, r7
 800754a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800754e:	bf00      	nop
 8007550:	080089b0 	.word	0x080089b0
 8007554:	0800877d 	.word	0x0800877d
 8007558:	08008860 	.word	0x08008860

0800755c <__lshift>:
 800755c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007560:	460c      	mov	r4, r1
 8007562:	4607      	mov	r7, r0
 8007564:	4691      	mov	r9, r2
 8007566:	6923      	ldr	r3, [r4, #16]
 8007568:	6849      	ldr	r1, [r1, #4]
 800756a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800756e:	68a3      	ldr	r3, [r4, #8]
 8007570:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007574:	f108 0601 	add.w	r6, r8, #1
 8007578:	42b3      	cmp	r3, r6
 800757a:	db0b      	blt.n	8007594 <__lshift+0x38>
 800757c:	4638      	mov	r0, r7
 800757e:	f7ff fddf 	bl	8007140 <_Balloc>
 8007582:	4605      	mov	r5, r0
 8007584:	b948      	cbnz	r0, 800759a <__lshift+0x3e>
 8007586:	4602      	mov	r2, r0
 8007588:	f240 11d9 	movw	r1, #473	; 0x1d9
 800758c:	4b29      	ldr	r3, [pc, #164]	; (8007634 <__lshift+0xd8>)
 800758e:	482a      	ldr	r0, [pc, #168]	; (8007638 <__lshift+0xdc>)
 8007590:	f000 fd62 	bl	8008058 <__assert_func>
 8007594:	3101      	adds	r1, #1
 8007596:	005b      	lsls	r3, r3, #1
 8007598:	e7ee      	b.n	8007578 <__lshift+0x1c>
 800759a:	2300      	movs	r3, #0
 800759c:	f100 0114 	add.w	r1, r0, #20
 80075a0:	f100 0210 	add.w	r2, r0, #16
 80075a4:	4618      	mov	r0, r3
 80075a6:	4553      	cmp	r3, sl
 80075a8:	db37      	blt.n	800761a <__lshift+0xbe>
 80075aa:	6920      	ldr	r0, [r4, #16]
 80075ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075b0:	f104 0314 	add.w	r3, r4, #20
 80075b4:	f019 091f 	ands.w	r9, r9, #31
 80075b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80075c0:	d02f      	beq.n	8007622 <__lshift+0xc6>
 80075c2:	468a      	mov	sl, r1
 80075c4:	f04f 0c00 	mov.w	ip, #0
 80075c8:	f1c9 0e20 	rsb	lr, r9, #32
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	fa02 f209 	lsl.w	r2, r2, r9
 80075d2:	ea42 020c 	orr.w	r2, r2, ip
 80075d6:	f84a 2b04 	str.w	r2, [sl], #4
 80075da:	f853 2b04 	ldr.w	r2, [r3], #4
 80075de:	4298      	cmp	r0, r3
 80075e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80075e4:	d8f2      	bhi.n	80075cc <__lshift+0x70>
 80075e6:	1b03      	subs	r3, r0, r4
 80075e8:	3b15      	subs	r3, #21
 80075ea:	f023 0303 	bic.w	r3, r3, #3
 80075ee:	3304      	adds	r3, #4
 80075f0:	f104 0215 	add.w	r2, r4, #21
 80075f4:	4290      	cmp	r0, r2
 80075f6:	bf38      	it	cc
 80075f8:	2304      	movcc	r3, #4
 80075fa:	f841 c003 	str.w	ip, [r1, r3]
 80075fe:	f1bc 0f00 	cmp.w	ip, #0
 8007602:	d001      	beq.n	8007608 <__lshift+0xac>
 8007604:	f108 0602 	add.w	r6, r8, #2
 8007608:	3e01      	subs	r6, #1
 800760a:	4638      	mov	r0, r7
 800760c:	4621      	mov	r1, r4
 800760e:	612e      	str	r6, [r5, #16]
 8007610:	f7ff fdd6 	bl	80071c0 <_Bfree>
 8007614:	4628      	mov	r0, r5
 8007616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800761a:	f842 0f04 	str.w	r0, [r2, #4]!
 800761e:	3301      	adds	r3, #1
 8007620:	e7c1      	b.n	80075a6 <__lshift+0x4a>
 8007622:	3904      	subs	r1, #4
 8007624:	f853 2b04 	ldr.w	r2, [r3], #4
 8007628:	4298      	cmp	r0, r3
 800762a:	f841 2f04 	str.w	r2, [r1, #4]!
 800762e:	d8f9      	bhi.n	8007624 <__lshift+0xc8>
 8007630:	e7ea      	b.n	8007608 <__lshift+0xac>
 8007632:	bf00      	nop
 8007634:	080087ef 	.word	0x080087ef
 8007638:	08008860 	.word	0x08008860

0800763c <__mcmp>:
 800763c:	4603      	mov	r3, r0
 800763e:	690a      	ldr	r2, [r1, #16]
 8007640:	6900      	ldr	r0, [r0, #16]
 8007642:	b530      	push	{r4, r5, lr}
 8007644:	1a80      	subs	r0, r0, r2
 8007646:	d10d      	bne.n	8007664 <__mcmp+0x28>
 8007648:	3314      	adds	r3, #20
 800764a:	3114      	adds	r1, #20
 800764c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007650:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007654:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007658:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800765c:	4295      	cmp	r5, r2
 800765e:	d002      	beq.n	8007666 <__mcmp+0x2a>
 8007660:	d304      	bcc.n	800766c <__mcmp+0x30>
 8007662:	2001      	movs	r0, #1
 8007664:	bd30      	pop	{r4, r5, pc}
 8007666:	42a3      	cmp	r3, r4
 8007668:	d3f4      	bcc.n	8007654 <__mcmp+0x18>
 800766a:	e7fb      	b.n	8007664 <__mcmp+0x28>
 800766c:	f04f 30ff 	mov.w	r0, #4294967295
 8007670:	e7f8      	b.n	8007664 <__mcmp+0x28>
	...

08007674 <__mdiff>:
 8007674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007678:	460d      	mov	r5, r1
 800767a:	4607      	mov	r7, r0
 800767c:	4611      	mov	r1, r2
 800767e:	4628      	mov	r0, r5
 8007680:	4614      	mov	r4, r2
 8007682:	f7ff ffdb 	bl	800763c <__mcmp>
 8007686:	1e06      	subs	r6, r0, #0
 8007688:	d111      	bne.n	80076ae <__mdiff+0x3a>
 800768a:	4631      	mov	r1, r6
 800768c:	4638      	mov	r0, r7
 800768e:	f7ff fd57 	bl	8007140 <_Balloc>
 8007692:	4602      	mov	r2, r0
 8007694:	b928      	cbnz	r0, 80076a2 <__mdiff+0x2e>
 8007696:	f240 2132 	movw	r1, #562	; 0x232
 800769a:	4b3a      	ldr	r3, [pc, #232]	; (8007784 <__mdiff+0x110>)
 800769c:	483a      	ldr	r0, [pc, #232]	; (8007788 <__mdiff+0x114>)
 800769e:	f000 fcdb 	bl	8008058 <__assert_func>
 80076a2:	2301      	movs	r3, #1
 80076a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80076a8:	4610      	mov	r0, r2
 80076aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ae:	bfa4      	itt	ge
 80076b0:	4623      	movge	r3, r4
 80076b2:	462c      	movge	r4, r5
 80076b4:	4638      	mov	r0, r7
 80076b6:	6861      	ldr	r1, [r4, #4]
 80076b8:	bfa6      	itte	ge
 80076ba:	461d      	movge	r5, r3
 80076bc:	2600      	movge	r6, #0
 80076be:	2601      	movlt	r6, #1
 80076c0:	f7ff fd3e 	bl	8007140 <_Balloc>
 80076c4:	4602      	mov	r2, r0
 80076c6:	b918      	cbnz	r0, 80076d0 <__mdiff+0x5c>
 80076c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80076cc:	4b2d      	ldr	r3, [pc, #180]	; (8007784 <__mdiff+0x110>)
 80076ce:	e7e5      	b.n	800769c <__mdiff+0x28>
 80076d0:	f102 0814 	add.w	r8, r2, #20
 80076d4:	46c2      	mov	sl, r8
 80076d6:	f04f 0c00 	mov.w	ip, #0
 80076da:	6927      	ldr	r7, [r4, #16]
 80076dc:	60c6      	str	r6, [r0, #12]
 80076de:	692e      	ldr	r6, [r5, #16]
 80076e0:	f104 0014 	add.w	r0, r4, #20
 80076e4:	f105 0914 	add.w	r9, r5, #20
 80076e8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80076ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076f0:	3410      	adds	r4, #16
 80076f2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80076f6:	f859 3b04 	ldr.w	r3, [r9], #4
 80076fa:	fa1f f18b 	uxth.w	r1, fp
 80076fe:	448c      	add	ip, r1
 8007700:	b299      	uxth	r1, r3
 8007702:	0c1b      	lsrs	r3, r3, #16
 8007704:	ebac 0101 	sub.w	r1, ip, r1
 8007708:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800770c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007710:	b289      	uxth	r1, r1
 8007712:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007716:	454e      	cmp	r6, r9
 8007718:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800771c:	f84a 3b04 	str.w	r3, [sl], #4
 8007720:	d8e7      	bhi.n	80076f2 <__mdiff+0x7e>
 8007722:	1b73      	subs	r3, r6, r5
 8007724:	3b15      	subs	r3, #21
 8007726:	f023 0303 	bic.w	r3, r3, #3
 800772a:	3515      	adds	r5, #21
 800772c:	3304      	adds	r3, #4
 800772e:	42ae      	cmp	r6, r5
 8007730:	bf38      	it	cc
 8007732:	2304      	movcc	r3, #4
 8007734:	4418      	add	r0, r3
 8007736:	4443      	add	r3, r8
 8007738:	461e      	mov	r6, r3
 800773a:	4605      	mov	r5, r0
 800773c:	4575      	cmp	r5, lr
 800773e:	d30e      	bcc.n	800775e <__mdiff+0xea>
 8007740:	f10e 0103 	add.w	r1, lr, #3
 8007744:	1a09      	subs	r1, r1, r0
 8007746:	f021 0103 	bic.w	r1, r1, #3
 800774a:	3803      	subs	r0, #3
 800774c:	4586      	cmp	lr, r0
 800774e:	bf38      	it	cc
 8007750:	2100      	movcc	r1, #0
 8007752:	4419      	add	r1, r3
 8007754:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007758:	b18b      	cbz	r3, 800777e <__mdiff+0x10a>
 800775a:	6117      	str	r7, [r2, #16]
 800775c:	e7a4      	b.n	80076a8 <__mdiff+0x34>
 800775e:	f855 8b04 	ldr.w	r8, [r5], #4
 8007762:	fa1f f188 	uxth.w	r1, r8
 8007766:	4461      	add	r1, ip
 8007768:	140c      	asrs	r4, r1, #16
 800776a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800776e:	b289      	uxth	r1, r1
 8007770:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007774:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007778:	f846 1b04 	str.w	r1, [r6], #4
 800777c:	e7de      	b.n	800773c <__mdiff+0xc8>
 800777e:	3f01      	subs	r7, #1
 8007780:	e7e8      	b.n	8007754 <__mdiff+0xe0>
 8007782:	bf00      	nop
 8007784:	080087ef 	.word	0x080087ef
 8007788:	08008860 	.word	0x08008860

0800778c <__d2b>:
 800778c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007790:	2101      	movs	r1, #1
 8007792:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007796:	4690      	mov	r8, r2
 8007798:	461d      	mov	r5, r3
 800779a:	f7ff fcd1 	bl	8007140 <_Balloc>
 800779e:	4604      	mov	r4, r0
 80077a0:	b930      	cbnz	r0, 80077b0 <__d2b+0x24>
 80077a2:	4602      	mov	r2, r0
 80077a4:	f240 310a 	movw	r1, #778	; 0x30a
 80077a8:	4b24      	ldr	r3, [pc, #144]	; (800783c <__d2b+0xb0>)
 80077aa:	4825      	ldr	r0, [pc, #148]	; (8007840 <__d2b+0xb4>)
 80077ac:	f000 fc54 	bl	8008058 <__assert_func>
 80077b0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80077b4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80077b8:	bb2d      	cbnz	r5, 8007806 <__d2b+0x7a>
 80077ba:	9301      	str	r3, [sp, #4]
 80077bc:	f1b8 0300 	subs.w	r3, r8, #0
 80077c0:	d026      	beq.n	8007810 <__d2b+0x84>
 80077c2:	4668      	mov	r0, sp
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	f7ff fd83 	bl	80072d0 <__lo0bits>
 80077ca:	9900      	ldr	r1, [sp, #0]
 80077cc:	b1f0      	cbz	r0, 800780c <__d2b+0x80>
 80077ce:	9a01      	ldr	r2, [sp, #4]
 80077d0:	f1c0 0320 	rsb	r3, r0, #32
 80077d4:	fa02 f303 	lsl.w	r3, r2, r3
 80077d8:	430b      	orrs	r3, r1
 80077da:	40c2      	lsrs	r2, r0
 80077dc:	6163      	str	r3, [r4, #20]
 80077de:	9201      	str	r2, [sp, #4]
 80077e0:	9b01      	ldr	r3, [sp, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	bf14      	ite	ne
 80077e6:	2102      	movne	r1, #2
 80077e8:	2101      	moveq	r1, #1
 80077ea:	61a3      	str	r3, [r4, #24]
 80077ec:	6121      	str	r1, [r4, #16]
 80077ee:	b1c5      	cbz	r5, 8007822 <__d2b+0x96>
 80077f0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80077f4:	4405      	add	r5, r0
 80077f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077fa:	603d      	str	r5, [r7, #0]
 80077fc:	6030      	str	r0, [r6, #0]
 80077fe:	4620      	mov	r0, r4
 8007800:	b002      	add	sp, #8
 8007802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800780a:	e7d6      	b.n	80077ba <__d2b+0x2e>
 800780c:	6161      	str	r1, [r4, #20]
 800780e:	e7e7      	b.n	80077e0 <__d2b+0x54>
 8007810:	a801      	add	r0, sp, #4
 8007812:	f7ff fd5d 	bl	80072d0 <__lo0bits>
 8007816:	2101      	movs	r1, #1
 8007818:	9b01      	ldr	r3, [sp, #4]
 800781a:	6121      	str	r1, [r4, #16]
 800781c:	6163      	str	r3, [r4, #20]
 800781e:	3020      	adds	r0, #32
 8007820:	e7e5      	b.n	80077ee <__d2b+0x62>
 8007822:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007826:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800782a:	6038      	str	r0, [r7, #0]
 800782c:	6918      	ldr	r0, [r3, #16]
 800782e:	f7ff fd2f 	bl	8007290 <__hi0bits>
 8007832:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007836:	6031      	str	r1, [r6, #0]
 8007838:	e7e1      	b.n	80077fe <__d2b+0x72>
 800783a:	bf00      	nop
 800783c:	080087ef 	.word	0x080087ef
 8007840:	08008860 	.word	0x08008860

08007844 <_calloc_r>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	fba1 5402 	umull	r5, r4, r1, r2
 800784a:	b934      	cbnz	r4, 800785a <_calloc_r+0x16>
 800784c:	4629      	mov	r1, r5
 800784e:	f000 f875 	bl	800793c <_malloc_r>
 8007852:	4606      	mov	r6, r0
 8007854:	b928      	cbnz	r0, 8007862 <_calloc_r+0x1e>
 8007856:	4630      	mov	r0, r6
 8007858:	bd70      	pop	{r4, r5, r6, pc}
 800785a:	220c      	movs	r2, #12
 800785c:	2600      	movs	r6, #0
 800785e:	6002      	str	r2, [r0, #0]
 8007860:	e7f9      	b.n	8007856 <_calloc_r+0x12>
 8007862:	462a      	mov	r2, r5
 8007864:	4621      	mov	r1, r4
 8007866:	f7fd fde5 	bl	8005434 <memset>
 800786a:	e7f4      	b.n	8007856 <_calloc_r+0x12>

0800786c <_free_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	4605      	mov	r5, r0
 8007870:	2900      	cmp	r1, #0
 8007872:	d040      	beq.n	80078f6 <_free_r+0x8a>
 8007874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007878:	1f0c      	subs	r4, r1, #4
 800787a:	2b00      	cmp	r3, #0
 800787c:	bfb8      	it	lt
 800787e:	18e4      	addlt	r4, r4, r3
 8007880:	f000 fc8a 	bl	8008198 <__malloc_lock>
 8007884:	4a1c      	ldr	r2, [pc, #112]	; (80078f8 <_free_r+0x8c>)
 8007886:	6813      	ldr	r3, [r2, #0]
 8007888:	b933      	cbnz	r3, 8007898 <_free_r+0x2c>
 800788a:	6063      	str	r3, [r4, #4]
 800788c:	6014      	str	r4, [r2, #0]
 800788e:	4628      	mov	r0, r5
 8007890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007894:	f000 bc86 	b.w	80081a4 <__malloc_unlock>
 8007898:	42a3      	cmp	r3, r4
 800789a:	d908      	bls.n	80078ae <_free_r+0x42>
 800789c:	6820      	ldr	r0, [r4, #0]
 800789e:	1821      	adds	r1, r4, r0
 80078a0:	428b      	cmp	r3, r1
 80078a2:	bf01      	itttt	eq
 80078a4:	6819      	ldreq	r1, [r3, #0]
 80078a6:	685b      	ldreq	r3, [r3, #4]
 80078a8:	1809      	addeq	r1, r1, r0
 80078aa:	6021      	streq	r1, [r4, #0]
 80078ac:	e7ed      	b.n	800788a <_free_r+0x1e>
 80078ae:	461a      	mov	r2, r3
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	b10b      	cbz	r3, 80078b8 <_free_r+0x4c>
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	d9fa      	bls.n	80078ae <_free_r+0x42>
 80078b8:	6811      	ldr	r1, [r2, #0]
 80078ba:	1850      	adds	r0, r2, r1
 80078bc:	42a0      	cmp	r0, r4
 80078be:	d10b      	bne.n	80078d8 <_free_r+0x6c>
 80078c0:	6820      	ldr	r0, [r4, #0]
 80078c2:	4401      	add	r1, r0
 80078c4:	1850      	adds	r0, r2, r1
 80078c6:	4283      	cmp	r3, r0
 80078c8:	6011      	str	r1, [r2, #0]
 80078ca:	d1e0      	bne.n	800788e <_free_r+0x22>
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	4401      	add	r1, r0
 80078d2:	6011      	str	r1, [r2, #0]
 80078d4:	6053      	str	r3, [r2, #4]
 80078d6:	e7da      	b.n	800788e <_free_r+0x22>
 80078d8:	d902      	bls.n	80078e0 <_free_r+0x74>
 80078da:	230c      	movs	r3, #12
 80078dc:	602b      	str	r3, [r5, #0]
 80078de:	e7d6      	b.n	800788e <_free_r+0x22>
 80078e0:	6820      	ldr	r0, [r4, #0]
 80078e2:	1821      	adds	r1, r4, r0
 80078e4:	428b      	cmp	r3, r1
 80078e6:	bf01      	itttt	eq
 80078e8:	6819      	ldreq	r1, [r3, #0]
 80078ea:	685b      	ldreq	r3, [r3, #4]
 80078ec:	1809      	addeq	r1, r1, r0
 80078ee:	6021      	streq	r1, [r4, #0]
 80078f0:	6063      	str	r3, [r4, #4]
 80078f2:	6054      	str	r4, [r2, #4]
 80078f4:	e7cb      	b.n	800788e <_free_r+0x22>
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	2000038c 	.word	0x2000038c

080078fc <sbrk_aligned>:
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	4e0e      	ldr	r6, [pc, #56]	; (8007938 <sbrk_aligned+0x3c>)
 8007900:	460c      	mov	r4, r1
 8007902:	6831      	ldr	r1, [r6, #0]
 8007904:	4605      	mov	r5, r0
 8007906:	b911      	cbnz	r1, 800790e <sbrk_aligned+0x12>
 8007908:	f000 fb40 	bl	8007f8c <_sbrk_r>
 800790c:	6030      	str	r0, [r6, #0]
 800790e:	4621      	mov	r1, r4
 8007910:	4628      	mov	r0, r5
 8007912:	f000 fb3b 	bl	8007f8c <_sbrk_r>
 8007916:	1c43      	adds	r3, r0, #1
 8007918:	d00a      	beq.n	8007930 <sbrk_aligned+0x34>
 800791a:	1cc4      	adds	r4, r0, #3
 800791c:	f024 0403 	bic.w	r4, r4, #3
 8007920:	42a0      	cmp	r0, r4
 8007922:	d007      	beq.n	8007934 <sbrk_aligned+0x38>
 8007924:	1a21      	subs	r1, r4, r0
 8007926:	4628      	mov	r0, r5
 8007928:	f000 fb30 	bl	8007f8c <_sbrk_r>
 800792c:	3001      	adds	r0, #1
 800792e:	d101      	bne.n	8007934 <sbrk_aligned+0x38>
 8007930:	f04f 34ff 	mov.w	r4, #4294967295
 8007934:	4620      	mov	r0, r4
 8007936:	bd70      	pop	{r4, r5, r6, pc}
 8007938:	20000390 	.word	0x20000390

0800793c <_malloc_r>:
 800793c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007940:	1ccd      	adds	r5, r1, #3
 8007942:	f025 0503 	bic.w	r5, r5, #3
 8007946:	3508      	adds	r5, #8
 8007948:	2d0c      	cmp	r5, #12
 800794a:	bf38      	it	cc
 800794c:	250c      	movcc	r5, #12
 800794e:	2d00      	cmp	r5, #0
 8007950:	4607      	mov	r7, r0
 8007952:	db01      	blt.n	8007958 <_malloc_r+0x1c>
 8007954:	42a9      	cmp	r1, r5
 8007956:	d905      	bls.n	8007964 <_malloc_r+0x28>
 8007958:	230c      	movs	r3, #12
 800795a:	2600      	movs	r6, #0
 800795c:	603b      	str	r3, [r7, #0]
 800795e:	4630      	mov	r0, r6
 8007960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007964:	4e2e      	ldr	r6, [pc, #184]	; (8007a20 <_malloc_r+0xe4>)
 8007966:	f000 fc17 	bl	8008198 <__malloc_lock>
 800796a:	6833      	ldr	r3, [r6, #0]
 800796c:	461c      	mov	r4, r3
 800796e:	bb34      	cbnz	r4, 80079be <_malloc_r+0x82>
 8007970:	4629      	mov	r1, r5
 8007972:	4638      	mov	r0, r7
 8007974:	f7ff ffc2 	bl	80078fc <sbrk_aligned>
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	4604      	mov	r4, r0
 800797c:	d14d      	bne.n	8007a1a <_malloc_r+0xde>
 800797e:	6834      	ldr	r4, [r6, #0]
 8007980:	4626      	mov	r6, r4
 8007982:	2e00      	cmp	r6, #0
 8007984:	d140      	bne.n	8007a08 <_malloc_r+0xcc>
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	4631      	mov	r1, r6
 800798a:	4638      	mov	r0, r7
 800798c:	eb04 0803 	add.w	r8, r4, r3
 8007990:	f000 fafc 	bl	8007f8c <_sbrk_r>
 8007994:	4580      	cmp	r8, r0
 8007996:	d13a      	bne.n	8007a0e <_malloc_r+0xd2>
 8007998:	6821      	ldr	r1, [r4, #0]
 800799a:	3503      	adds	r5, #3
 800799c:	1a6d      	subs	r5, r5, r1
 800799e:	f025 0503 	bic.w	r5, r5, #3
 80079a2:	3508      	adds	r5, #8
 80079a4:	2d0c      	cmp	r5, #12
 80079a6:	bf38      	it	cc
 80079a8:	250c      	movcc	r5, #12
 80079aa:	4638      	mov	r0, r7
 80079ac:	4629      	mov	r1, r5
 80079ae:	f7ff ffa5 	bl	80078fc <sbrk_aligned>
 80079b2:	3001      	adds	r0, #1
 80079b4:	d02b      	beq.n	8007a0e <_malloc_r+0xd2>
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	442b      	add	r3, r5
 80079ba:	6023      	str	r3, [r4, #0]
 80079bc:	e00e      	b.n	80079dc <_malloc_r+0xa0>
 80079be:	6822      	ldr	r2, [r4, #0]
 80079c0:	1b52      	subs	r2, r2, r5
 80079c2:	d41e      	bmi.n	8007a02 <_malloc_r+0xc6>
 80079c4:	2a0b      	cmp	r2, #11
 80079c6:	d916      	bls.n	80079f6 <_malloc_r+0xba>
 80079c8:	1961      	adds	r1, r4, r5
 80079ca:	42a3      	cmp	r3, r4
 80079cc:	6025      	str	r5, [r4, #0]
 80079ce:	bf18      	it	ne
 80079d0:	6059      	strne	r1, [r3, #4]
 80079d2:	6863      	ldr	r3, [r4, #4]
 80079d4:	bf08      	it	eq
 80079d6:	6031      	streq	r1, [r6, #0]
 80079d8:	5162      	str	r2, [r4, r5]
 80079da:	604b      	str	r3, [r1, #4]
 80079dc:	4638      	mov	r0, r7
 80079de:	f104 060b 	add.w	r6, r4, #11
 80079e2:	f000 fbdf 	bl	80081a4 <__malloc_unlock>
 80079e6:	f026 0607 	bic.w	r6, r6, #7
 80079ea:	1d23      	adds	r3, r4, #4
 80079ec:	1af2      	subs	r2, r6, r3
 80079ee:	d0b6      	beq.n	800795e <_malloc_r+0x22>
 80079f0:	1b9b      	subs	r3, r3, r6
 80079f2:	50a3      	str	r3, [r4, r2]
 80079f4:	e7b3      	b.n	800795e <_malloc_r+0x22>
 80079f6:	6862      	ldr	r2, [r4, #4]
 80079f8:	42a3      	cmp	r3, r4
 80079fa:	bf0c      	ite	eq
 80079fc:	6032      	streq	r2, [r6, #0]
 80079fe:	605a      	strne	r2, [r3, #4]
 8007a00:	e7ec      	b.n	80079dc <_malloc_r+0xa0>
 8007a02:	4623      	mov	r3, r4
 8007a04:	6864      	ldr	r4, [r4, #4]
 8007a06:	e7b2      	b.n	800796e <_malloc_r+0x32>
 8007a08:	4634      	mov	r4, r6
 8007a0a:	6876      	ldr	r6, [r6, #4]
 8007a0c:	e7b9      	b.n	8007982 <_malloc_r+0x46>
 8007a0e:	230c      	movs	r3, #12
 8007a10:	4638      	mov	r0, r7
 8007a12:	603b      	str	r3, [r7, #0]
 8007a14:	f000 fbc6 	bl	80081a4 <__malloc_unlock>
 8007a18:	e7a1      	b.n	800795e <_malloc_r+0x22>
 8007a1a:	6025      	str	r5, [r4, #0]
 8007a1c:	e7de      	b.n	80079dc <_malloc_r+0xa0>
 8007a1e:	bf00      	nop
 8007a20:	2000038c 	.word	0x2000038c

08007a24 <__ssputs_r>:
 8007a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a28:	688e      	ldr	r6, [r1, #8]
 8007a2a:	4682      	mov	sl, r0
 8007a2c:	429e      	cmp	r6, r3
 8007a2e:	460c      	mov	r4, r1
 8007a30:	4690      	mov	r8, r2
 8007a32:	461f      	mov	r7, r3
 8007a34:	d838      	bhi.n	8007aa8 <__ssputs_r+0x84>
 8007a36:	898a      	ldrh	r2, [r1, #12]
 8007a38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a3c:	d032      	beq.n	8007aa4 <__ssputs_r+0x80>
 8007a3e:	6825      	ldr	r5, [r4, #0]
 8007a40:	6909      	ldr	r1, [r1, #16]
 8007a42:	3301      	adds	r3, #1
 8007a44:	eba5 0901 	sub.w	r9, r5, r1
 8007a48:	6965      	ldr	r5, [r4, #20]
 8007a4a:	444b      	add	r3, r9
 8007a4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a54:	106d      	asrs	r5, r5, #1
 8007a56:	429d      	cmp	r5, r3
 8007a58:	bf38      	it	cc
 8007a5a:	461d      	movcc	r5, r3
 8007a5c:	0553      	lsls	r3, r2, #21
 8007a5e:	d531      	bpl.n	8007ac4 <__ssputs_r+0xa0>
 8007a60:	4629      	mov	r1, r5
 8007a62:	f7ff ff6b 	bl	800793c <_malloc_r>
 8007a66:	4606      	mov	r6, r0
 8007a68:	b950      	cbnz	r0, 8007a80 <__ssputs_r+0x5c>
 8007a6a:	230c      	movs	r3, #12
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	f8ca 3000 	str.w	r3, [sl]
 8007a74:	89a3      	ldrh	r3, [r4, #12]
 8007a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a7a:	81a3      	strh	r3, [r4, #12]
 8007a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a80:	464a      	mov	r2, r9
 8007a82:	6921      	ldr	r1, [r4, #16]
 8007a84:	f7fd fcc8 	bl	8005418 <memcpy>
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a92:	81a3      	strh	r3, [r4, #12]
 8007a94:	6126      	str	r6, [r4, #16]
 8007a96:	444e      	add	r6, r9
 8007a98:	6026      	str	r6, [r4, #0]
 8007a9a:	463e      	mov	r6, r7
 8007a9c:	6165      	str	r5, [r4, #20]
 8007a9e:	eba5 0509 	sub.w	r5, r5, r9
 8007aa2:	60a5      	str	r5, [r4, #8]
 8007aa4:	42be      	cmp	r6, r7
 8007aa6:	d900      	bls.n	8007aaa <__ssputs_r+0x86>
 8007aa8:	463e      	mov	r6, r7
 8007aaa:	4632      	mov	r2, r6
 8007aac:	4641      	mov	r1, r8
 8007aae:	6820      	ldr	r0, [r4, #0]
 8007ab0:	f000 fb58 	bl	8008164 <memmove>
 8007ab4:	68a3      	ldr	r3, [r4, #8]
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	1b9b      	subs	r3, r3, r6
 8007aba:	60a3      	str	r3, [r4, #8]
 8007abc:	6823      	ldr	r3, [r4, #0]
 8007abe:	4433      	add	r3, r6
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	e7db      	b.n	8007a7c <__ssputs_r+0x58>
 8007ac4:	462a      	mov	r2, r5
 8007ac6:	f000 fb73 	bl	80081b0 <_realloc_r>
 8007aca:	4606      	mov	r6, r0
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d1e1      	bne.n	8007a94 <__ssputs_r+0x70>
 8007ad0:	4650      	mov	r0, sl
 8007ad2:	6921      	ldr	r1, [r4, #16]
 8007ad4:	f7ff feca 	bl	800786c <_free_r>
 8007ad8:	e7c7      	b.n	8007a6a <__ssputs_r+0x46>
	...

08007adc <_svfiprintf_r>:
 8007adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae0:	4698      	mov	r8, r3
 8007ae2:	898b      	ldrh	r3, [r1, #12]
 8007ae4:	4607      	mov	r7, r0
 8007ae6:	061b      	lsls	r3, r3, #24
 8007ae8:	460d      	mov	r5, r1
 8007aea:	4614      	mov	r4, r2
 8007aec:	b09d      	sub	sp, #116	; 0x74
 8007aee:	d50e      	bpl.n	8007b0e <_svfiprintf_r+0x32>
 8007af0:	690b      	ldr	r3, [r1, #16]
 8007af2:	b963      	cbnz	r3, 8007b0e <_svfiprintf_r+0x32>
 8007af4:	2140      	movs	r1, #64	; 0x40
 8007af6:	f7ff ff21 	bl	800793c <_malloc_r>
 8007afa:	6028      	str	r0, [r5, #0]
 8007afc:	6128      	str	r0, [r5, #16]
 8007afe:	b920      	cbnz	r0, 8007b0a <_svfiprintf_r+0x2e>
 8007b00:	230c      	movs	r3, #12
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	f04f 30ff 	mov.w	r0, #4294967295
 8007b08:	e0d1      	b.n	8007cae <_svfiprintf_r+0x1d2>
 8007b0a:	2340      	movs	r3, #64	; 0x40
 8007b0c:	616b      	str	r3, [r5, #20]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	9309      	str	r3, [sp, #36]	; 0x24
 8007b12:	2320      	movs	r3, #32
 8007b14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b18:	2330      	movs	r3, #48	; 0x30
 8007b1a:	f04f 0901 	mov.w	r9, #1
 8007b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007cc8 <_svfiprintf_r+0x1ec>
 8007b26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b2a:	4623      	mov	r3, r4
 8007b2c:	469a      	mov	sl, r3
 8007b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b32:	b10a      	cbz	r2, 8007b38 <_svfiprintf_r+0x5c>
 8007b34:	2a25      	cmp	r2, #37	; 0x25
 8007b36:	d1f9      	bne.n	8007b2c <_svfiprintf_r+0x50>
 8007b38:	ebba 0b04 	subs.w	fp, sl, r4
 8007b3c:	d00b      	beq.n	8007b56 <_svfiprintf_r+0x7a>
 8007b3e:	465b      	mov	r3, fp
 8007b40:	4622      	mov	r2, r4
 8007b42:	4629      	mov	r1, r5
 8007b44:	4638      	mov	r0, r7
 8007b46:	f7ff ff6d 	bl	8007a24 <__ssputs_r>
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	f000 80aa 	beq.w	8007ca4 <_svfiprintf_r+0x1c8>
 8007b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b52:	445a      	add	r2, fp
 8007b54:	9209      	str	r2, [sp, #36]	; 0x24
 8007b56:	f89a 3000 	ldrb.w	r3, [sl]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 80a2 	beq.w	8007ca4 <_svfiprintf_r+0x1c8>
 8007b60:	2300      	movs	r3, #0
 8007b62:	f04f 32ff 	mov.w	r2, #4294967295
 8007b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b6a:	f10a 0a01 	add.w	sl, sl, #1
 8007b6e:	9304      	str	r3, [sp, #16]
 8007b70:	9307      	str	r3, [sp, #28]
 8007b72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b76:	931a      	str	r3, [sp, #104]	; 0x68
 8007b78:	4654      	mov	r4, sl
 8007b7a:	2205      	movs	r2, #5
 8007b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b80:	4851      	ldr	r0, [pc, #324]	; (8007cc8 <_svfiprintf_r+0x1ec>)
 8007b82:	f7ff facf 	bl	8007124 <memchr>
 8007b86:	9a04      	ldr	r2, [sp, #16]
 8007b88:	b9d8      	cbnz	r0, 8007bc2 <_svfiprintf_r+0xe6>
 8007b8a:	06d0      	lsls	r0, r2, #27
 8007b8c:	bf44      	itt	mi
 8007b8e:	2320      	movmi	r3, #32
 8007b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b94:	0711      	lsls	r1, r2, #28
 8007b96:	bf44      	itt	mi
 8007b98:	232b      	movmi	r3, #43	; 0x2b
 8007b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ba4:	d015      	beq.n	8007bd2 <_svfiprintf_r+0xf6>
 8007ba6:	4654      	mov	r4, sl
 8007ba8:	2000      	movs	r0, #0
 8007baa:	f04f 0c0a 	mov.w	ip, #10
 8007bae:	9a07      	ldr	r2, [sp, #28]
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bb6:	3b30      	subs	r3, #48	; 0x30
 8007bb8:	2b09      	cmp	r3, #9
 8007bba:	d94e      	bls.n	8007c5a <_svfiprintf_r+0x17e>
 8007bbc:	b1b0      	cbz	r0, 8007bec <_svfiprintf_r+0x110>
 8007bbe:	9207      	str	r2, [sp, #28]
 8007bc0:	e014      	b.n	8007bec <_svfiprintf_r+0x110>
 8007bc2:	eba0 0308 	sub.w	r3, r0, r8
 8007bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	46a2      	mov	sl, r4
 8007bce:	9304      	str	r3, [sp, #16]
 8007bd0:	e7d2      	b.n	8007b78 <_svfiprintf_r+0x9c>
 8007bd2:	9b03      	ldr	r3, [sp, #12]
 8007bd4:	1d19      	adds	r1, r3, #4
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	9103      	str	r1, [sp, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	bfbb      	ittet	lt
 8007bde:	425b      	neglt	r3, r3
 8007be0:	f042 0202 	orrlt.w	r2, r2, #2
 8007be4:	9307      	strge	r3, [sp, #28]
 8007be6:	9307      	strlt	r3, [sp, #28]
 8007be8:	bfb8      	it	lt
 8007bea:	9204      	strlt	r2, [sp, #16]
 8007bec:	7823      	ldrb	r3, [r4, #0]
 8007bee:	2b2e      	cmp	r3, #46	; 0x2e
 8007bf0:	d10c      	bne.n	8007c0c <_svfiprintf_r+0x130>
 8007bf2:	7863      	ldrb	r3, [r4, #1]
 8007bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8007bf6:	d135      	bne.n	8007c64 <_svfiprintf_r+0x188>
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	3402      	adds	r4, #2
 8007bfc:	1d1a      	adds	r2, r3, #4
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	9203      	str	r2, [sp, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	bfb8      	it	lt
 8007c06:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c0a:	9305      	str	r3, [sp, #20]
 8007c0c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007ccc <_svfiprintf_r+0x1f0>
 8007c10:	2203      	movs	r2, #3
 8007c12:	4650      	mov	r0, sl
 8007c14:	7821      	ldrb	r1, [r4, #0]
 8007c16:	f7ff fa85 	bl	8007124 <memchr>
 8007c1a:	b140      	cbz	r0, 8007c2e <_svfiprintf_r+0x152>
 8007c1c:	2340      	movs	r3, #64	; 0x40
 8007c1e:	eba0 000a 	sub.w	r0, r0, sl
 8007c22:	fa03 f000 	lsl.w	r0, r3, r0
 8007c26:	9b04      	ldr	r3, [sp, #16]
 8007c28:	3401      	adds	r4, #1
 8007c2a:	4303      	orrs	r3, r0
 8007c2c:	9304      	str	r3, [sp, #16]
 8007c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c32:	2206      	movs	r2, #6
 8007c34:	4826      	ldr	r0, [pc, #152]	; (8007cd0 <_svfiprintf_r+0x1f4>)
 8007c36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c3a:	f7ff fa73 	bl	8007124 <memchr>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d038      	beq.n	8007cb4 <_svfiprintf_r+0x1d8>
 8007c42:	4b24      	ldr	r3, [pc, #144]	; (8007cd4 <_svfiprintf_r+0x1f8>)
 8007c44:	bb1b      	cbnz	r3, 8007c8e <_svfiprintf_r+0x1b2>
 8007c46:	9b03      	ldr	r3, [sp, #12]
 8007c48:	3307      	adds	r3, #7
 8007c4a:	f023 0307 	bic.w	r3, r3, #7
 8007c4e:	3308      	adds	r3, #8
 8007c50:	9303      	str	r3, [sp, #12]
 8007c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c54:	4433      	add	r3, r6
 8007c56:	9309      	str	r3, [sp, #36]	; 0x24
 8007c58:	e767      	b.n	8007b2a <_svfiprintf_r+0x4e>
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	2001      	movs	r0, #1
 8007c5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c62:	e7a5      	b.n	8007bb0 <_svfiprintf_r+0xd4>
 8007c64:	2300      	movs	r3, #0
 8007c66:	f04f 0c0a 	mov.w	ip, #10
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	3401      	adds	r4, #1
 8007c6e:	9305      	str	r3, [sp, #20]
 8007c70:	4620      	mov	r0, r4
 8007c72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c76:	3a30      	subs	r2, #48	; 0x30
 8007c78:	2a09      	cmp	r2, #9
 8007c7a:	d903      	bls.n	8007c84 <_svfiprintf_r+0x1a8>
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d0c5      	beq.n	8007c0c <_svfiprintf_r+0x130>
 8007c80:	9105      	str	r1, [sp, #20]
 8007c82:	e7c3      	b.n	8007c0c <_svfiprintf_r+0x130>
 8007c84:	4604      	mov	r4, r0
 8007c86:	2301      	movs	r3, #1
 8007c88:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c8c:	e7f0      	b.n	8007c70 <_svfiprintf_r+0x194>
 8007c8e:	ab03      	add	r3, sp, #12
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	462a      	mov	r2, r5
 8007c94:	4638      	mov	r0, r7
 8007c96:	4b10      	ldr	r3, [pc, #64]	; (8007cd8 <_svfiprintf_r+0x1fc>)
 8007c98:	a904      	add	r1, sp, #16
 8007c9a:	f7fd fc71 	bl	8005580 <_printf_float>
 8007c9e:	1c42      	adds	r2, r0, #1
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	d1d6      	bne.n	8007c52 <_svfiprintf_r+0x176>
 8007ca4:	89ab      	ldrh	r3, [r5, #12]
 8007ca6:	065b      	lsls	r3, r3, #25
 8007ca8:	f53f af2c 	bmi.w	8007b04 <_svfiprintf_r+0x28>
 8007cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cae:	b01d      	add	sp, #116	; 0x74
 8007cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb4:	ab03      	add	r3, sp, #12
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	462a      	mov	r2, r5
 8007cba:	4638      	mov	r0, r7
 8007cbc:	4b06      	ldr	r3, [pc, #24]	; (8007cd8 <_svfiprintf_r+0x1fc>)
 8007cbe:	a904      	add	r1, sp, #16
 8007cc0:	f7fd fefa 	bl	8005ab8 <_printf_i>
 8007cc4:	e7eb      	b.n	8007c9e <_svfiprintf_r+0x1c2>
 8007cc6:	bf00      	nop
 8007cc8:	080089bc 	.word	0x080089bc
 8007ccc:	080089c2 	.word	0x080089c2
 8007cd0:	080089c6 	.word	0x080089c6
 8007cd4:	08005581 	.word	0x08005581
 8007cd8:	08007a25 	.word	0x08007a25

08007cdc <__sfputc_r>:
 8007cdc:	6893      	ldr	r3, [r2, #8]
 8007cde:	b410      	push	{r4}
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	6093      	str	r3, [r2, #8]
 8007ce6:	da07      	bge.n	8007cf8 <__sfputc_r+0x1c>
 8007ce8:	6994      	ldr	r4, [r2, #24]
 8007cea:	42a3      	cmp	r3, r4
 8007cec:	db01      	blt.n	8007cf2 <__sfputc_r+0x16>
 8007cee:	290a      	cmp	r1, #10
 8007cf0:	d102      	bne.n	8007cf8 <__sfputc_r+0x1c>
 8007cf2:	bc10      	pop	{r4}
 8007cf4:	f7fe b8b4 	b.w	8005e60 <__swbuf_r>
 8007cf8:	6813      	ldr	r3, [r2, #0]
 8007cfa:	1c58      	adds	r0, r3, #1
 8007cfc:	6010      	str	r0, [r2, #0]
 8007cfe:	7019      	strb	r1, [r3, #0]
 8007d00:	4608      	mov	r0, r1
 8007d02:	bc10      	pop	{r4}
 8007d04:	4770      	bx	lr

08007d06 <__sfputs_r>:
 8007d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d08:	4606      	mov	r6, r0
 8007d0a:	460f      	mov	r7, r1
 8007d0c:	4614      	mov	r4, r2
 8007d0e:	18d5      	adds	r5, r2, r3
 8007d10:	42ac      	cmp	r4, r5
 8007d12:	d101      	bne.n	8007d18 <__sfputs_r+0x12>
 8007d14:	2000      	movs	r0, #0
 8007d16:	e007      	b.n	8007d28 <__sfputs_r+0x22>
 8007d18:	463a      	mov	r2, r7
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d20:	f7ff ffdc 	bl	8007cdc <__sfputc_r>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d1f3      	bne.n	8007d10 <__sfputs_r+0xa>
 8007d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d2c <_vfiprintf_r>:
 8007d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d30:	460d      	mov	r5, r1
 8007d32:	4614      	mov	r4, r2
 8007d34:	4698      	mov	r8, r3
 8007d36:	4606      	mov	r6, r0
 8007d38:	b09d      	sub	sp, #116	; 0x74
 8007d3a:	b118      	cbz	r0, 8007d44 <_vfiprintf_r+0x18>
 8007d3c:	6983      	ldr	r3, [r0, #24]
 8007d3e:	b90b      	cbnz	r3, 8007d44 <_vfiprintf_r+0x18>
 8007d40:	f7ff f8de 	bl	8006f00 <__sinit>
 8007d44:	4b89      	ldr	r3, [pc, #548]	; (8007f6c <_vfiprintf_r+0x240>)
 8007d46:	429d      	cmp	r5, r3
 8007d48:	d11b      	bne.n	8007d82 <_vfiprintf_r+0x56>
 8007d4a:	6875      	ldr	r5, [r6, #4]
 8007d4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d4e:	07d9      	lsls	r1, r3, #31
 8007d50:	d405      	bmi.n	8007d5e <_vfiprintf_r+0x32>
 8007d52:	89ab      	ldrh	r3, [r5, #12]
 8007d54:	059a      	lsls	r2, r3, #22
 8007d56:	d402      	bmi.n	8007d5e <_vfiprintf_r+0x32>
 8007d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d5a:	f7ff f974 	bl	8007046 <__retarget_lock_acquire_recursive>
 8007d5e:	89ab      	ldrh	r3, [r5, #12]
 8007d60:	071b      	lsls	r3, r3, #28
 8007d62:	d501      	bpl.n	8007d68 <_vfiprintf_r+0x3c>
 8007d64:	692b      	ldr	r3, [r5, #16]
 8007d66:	b9eb      	cbnz	r3, 8007da4 <_vfiprintf_r+0x78>
 8007d68:	4629      	mov	r1, r5
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f7fe f8ca 	bl	8005f04 <__swsetup_r>
 8007d70:	b1c0      	cbz	r0, 8007da4 <_vfiprintf_r+0x78>
 8007d72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d74:	07dc      	lsls	r4, r3, #31
 8007d76:	d50e      	bpl.n	8007d96 <_vfiprintf_r+0x6a>
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	b01d      	add	sp, #116	; 0x74
 8007d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d82:	4b7b      	ldr	r3, [pc, #492]	; (8007f70 <_vfiprintf_r+0x244>)
 8007d84:	429d      	cmp	r5, r3
 8007d86:	d101      	bne.n	8007d8c <_vfiprintf_r+0x60>
 8007d88:	68b5      	ldr	r5, [r6, #8]
 8007d8a:	e7df      	b.n	8007d4c <_vfiprintf_r+0x20>
 8007d8c:	4b79      	ldr	r3, [pc, #484]	; (8007f74 <_vfiprintf_r+0x248>)
 8007d8e:	429d      	cmp	r5, r3
 8007d90:	bf08      	it	eq
 8007d92:	68f5      	ldreq	r5, [r6, #12]
 8007d94:	e7da      	b.n	8007d4c <_vfiprintf_r+0x20>
 8007d96:	89ab      	ldrh	r3, [r5, #12]
 8007d98:	0598      	lsls	r0, r3, #22
 8007d9a:	d4ed      	bmi.n	8007d78 <_vfiprintf_r+0x4c>
 8007d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d9e:	f7ff f953 	bl	8007048 <__retarget_lock_release_recursive>
 8007da2:	e7e9      	b.n	8007d78 <_vfiprintf_r+0x4c>
 8007da4:	2300      	movs	r3, #0
 8007da6:	9309      	str	r3, [sp, #36]	; 0x24
 8007da8:	2320      	movs	r3, #32
 8007daa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dae:	2330      	movs	r3, #48	; 0x30
 8007db0:	f04f 0901 	mov.w	r9, #1
 8007db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007db8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007f78 <_vfiprintf_r+0x24c>
 8007dbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dc0:	4623      	mov	r3, r4
 8007dc2:	469a      	mov	sl, r3
 8007dc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dc8:	b10a      	cbz	r2, 8007dce <_vfiprintf_r+0xa2>
 8007dca:	2a25      	cmp	r2, #37	; 0x25
 8007dcc:	d1f9      	bne.n	8007dc2 <_vfiprintf_r+0x96>
 8007dce:	ebba 0b04 	subs.w	fp, sl, r4
 8007dd2:	d00b      	beq.n	8007dec <_vfiprintf_r+0xc0>
 8007dd4:	465b      	mov	r3, fp
 8007dd6:	4622      	mov	r2, r4
 8007dd8:	4629      	mov	r1, r5
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f7ff ff93 	bl	8007d06 <__sfputs_r>
 8007de0:	3001      	adds	r0, #1
 8007de2:	f000 80aa 	beq.w	8007f3a <_vfiprintf_r+0x20e>
 8007de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007de8:	445a      	add	r2, fp
 8007dea:	9209      	str	r2, [sp, #36]	; 0x24
 8007dec:	f89a 3000 	ldrb.w	r3, [sl]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 80a2 	beq.w	8007f3a <_vfiprintf_r+0x20e>
 8007df6:	2300      	movs	r3, #0
 8007df8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e00:	f10a 0a01 	add.w	sl, sl, #1
 8007e04:	9304      	str	r3, [sp, #16]
 8007e06:	9307      	str	r3, [sp, #28]
 8007e08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e0c:	931a      	str	r3, [sp, #104]	; 0x68
 8007e0e:	4654      	mov	r4, sl
 8007e10:	2205      	movs	r2, #5
 8007e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e16:	4858      	ldr	r0, [pc, #352]	; (8007f78 <_vfiprintf_r+0x24c>)
 8007e18:	f7ff f984 	bl	8007124 <memchr>
 8007e1c:	9a04      	ldr	r2, [sp, #16]
 8007e1e:	b9d8      	cbnz	r0, 8007e58 <_vfiprintf_r+0x12c>
 8007e20:	06d1      	lsls	r1, r2, #27
 8007e22:	bf44      	itt	mi
 8007e24:	2320      	movmi	r3, #32
 8007e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e2a:	0713      	lsls	r3, r2, #28
 8007e2c:	bf44      	itt	mi
 8007e2e:	232b      	movmi	r3, #43	; 0x2b
 8007e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e34:	f89a 3000 	ldrb.w	r3, [sl]
 8007e38:	2b2a      	cmp	r3, #42	; 0x2a
 8007e3a:	d015      	beq.n	8007e68 <_vfiprintf_r+0x13c>
 8007e3c:	4654      	mov	r4, sl
 8007e3e:	2000      	movs	r0, #0
 8007e40:	f04f 0c0a 	mov.w	ip, #10
 8007e44:	9a07      	ldr	r2, [sp, #28]
 8007e46:	4621      	mov	r1, r4
 8007e48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e4c:	3b30      	subs	r3, #48	; 0x30
 8007e4e:	2b09      	cmp	r3, #9
 8007e50:	d94e      	bls.n	8007ef0 <_vfiprintf_r+0x1c4>
 8007e52:	b1b0      	cbz	r0, 8007e82 <_vfiprintf_r+0x156>
 8007e54:	9207      	str	r2, [sp, #28]
 8007e56:	e014      	b.n	8007e82 <_vfiprintf_r+0x156>
 8007e58:	eba0 0308 	sub.w	r3, r0, r8
 8007e5c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e60:	4313      	orrs	r3, r2
 8007e62:	46a2      	mov	sl, r4
 8007e64:	9304      	str	r3, [sp, #16]
 8007e66:	e7d2      	b.n	8007e0e <_vfiprintf_r+0xe2>
 8007e68:	9b03      	ldr	r3, [sp, #12]
 8007e6a:	1d19      	adds	r1, r3, #4
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	9103      	str	r1, [sp, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bfbb      	ittet	lt
 8007e74:	425b      	neglt	r3, r3
 8007e76:	f042 0202 	orrlt.w	r2, r2, #2
 8007e7a:	9307      	strge	r3, [sp, #28]
 8007e7c:	9307      	strlt	r3, [sp, #28]
 8007e7e:	bfb8      	it	lt
 8007e80:	9204      	strlt	r2, [sp, #16]
 8007e82:	7823      	ldrb	r3, [r4, #0]
 8007e84:	2b2e      	cmp	r3, #46	; 0x2e
 8007e86:	d10c      	bne.n	8007ea2 <_vfiprintf_r+0x176>
 8007e88:	7863      	ldrb	r3, [r4, #1]
 8007e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e8c:	d135      	bne.n	8007efa <_vfiprintf_r+0x1ce>
 8007e8e:	9b03      	ldr	r3, [sp, #12]
 8007e90:	3402      	adds	r4, #2
 8007e92:	1d1a      	adds	r2, r3, #4
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	9203      	str	r2, [sp, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	bfb8      	it	lt
 8007e9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ea0:	9305      	str	r3, [sp, #20]
 8007ea2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007f7c <_vfiprintf_r+0x250>
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	4650      	mov	r0, sl
 8007eaa:	7821      	ldrb	r1, [r4, #0]
 8007eac:	f7ff f93a 	bl	8007124 <memchr>
 8007eb0:	b140      	cbz	r0, 8007ec4 <_vfiprintf_r+0x198>
 8007eb2:	2340      	movs	r3, #64	; 0x40
 8007eb4:	eba0 000a 	sub.w	r0, r0, sl
 8007eb8:	fa03 f000 	lsl.w	r0, r3, r0
 8007ebc:	9b04      	ldr	r3, [sp, #16]
 8007ebe:	3401      	adds	r4, #1
 8007ec0:	4303      	orrs	r3, r0
 8007ec2:	9304      	str	r3, [sp, #16]
 8007ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec8:	2206      	movs	r2, #6
 8007eca:	482d      	ldr	r0, [pc, #180]	; (8007f80 <_vfiprintf_r+0x254>)
 8007ecc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ed0:	f7ff f928 	bl	8007124 <memchr>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	d03f      	beq.n	8007f58 <_vfiprintf_r+0x22c>
 8007ed8:	4b2a      	ldr	r3, [pc, #168]	; (8007f84 <_vfiprintf_r+0x258>)
 8007eda:	bb1b      	cbnz	r3, 8007f24 <_vfiprintf_r+0x1f8>
 8007edc:	9b03      	ldr	r3, [sp, #12]
 8007ede:	3307      	adds	r3, #7
 8007ee0:	f023 0307 	bic.w	r3, r3, #7
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	9303      	str	r3, [sp, #12]
 8007ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eea:	443b      	add	r3, r7
 8007eec:	9309      	str	r3, [sp, #36]	; 0x24
 8007eee:	e767      	b.n	8007dc0 <_vfiprintf_r+0x94>
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ef8:	e7a5      	b.n	8007e46 <_vfiprintf_r+0x11a>
 8007efa:	2300      	movs	r3, #0
 8007efc:	f04f 0c0a 	mov.w	ip, #10
 8007f00:	4619      	mov	r1, r3
 8007f02:	3401      	adds	r4, #1
 8007f04:	9305      	str	r3, [sp, #20]
 8007f06:	4620      	mov	r0, r4
 8007f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f0c:	3a30      	subs	r2, #48	; 0x30
 8007f0e:	2a09      	cmp	r2, #9
 8007f10:	d903      	bls.n	8007f1a <_vfiprintf_r+0x1ee>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0c5      	beq.n	8007ea2 <_vfiprintf_r+0x176>
 8007f16:	9105      	str	r1, [sp, #20]
 8007f18:	e7c3      	b.n	8007ea2 <_vfiprintf_r+0x176>
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f22:	e7f0      	b.n	8007f06 <_vfiprintf_r+0x1da>
 8007f24:	ab03      	add	r3, sp, #12
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	462a      	mov	r2, r5
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	4b16      	ldr	r3, [pc, #88]	; (8007f88 <_vfiprintf_r+0x25c>)
 8007f2e:	a904      	add	r1, sp, #16
 8007f30:	f7fd fb26 	bl	8005580 <_printf_float>
 8007f34:	4607      	mov	r7, r0
 8007f36:	1c78      	adds	r0, r7, #1
 8007f38:	d1d6      	bne.n	8007ee8 <_vfiprintf_r+0x1bc>
 8007f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f3c:	07d9      	lsls	r1, r3, #31
 8007f3e:	d405      	bmi.n	8007f4c <_vfiprintf_r+0x220>
 8007f40:	89ab      	ldrh	r3, [r5, #12]
 8007f42:	059a      	lsls	r2, r3, #22
 8007f44:	d402      	bmi.n	8007f4c <_vfiprintf_r+0x220>
 8007f46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f48:	f7ff f87e 	bl	8007048 <__retarget_lock_release_recursive>
 8007f4c:	89ab      	ldrh	r3, [r5, #12]
 8007f4e:	065b      	lsls	r3, r3, #25
 8007f50:	f53f af12 	bmi.w	8007d78 <_vfiprintf_r+0x4c>
 8007f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f56:	e711      	b.n	8007d7c <_vfiprintf_r+0x50>
 8007f58:	ab03      	add	r3, sp, #12
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	462a      	mov	r2, r5
 8007f5e:	4630      	mov	r0, r6
 8007f60:	4b09      	ldr	r3, [pc, #36]	; (8007f88 <_vfiprintf_r+0x25c>)
 8007f62:	a904      	add	r1, sp, #16
 8007f64:	f7fd fda8 	bl	8005ab8 <_printf_i>
 8007f68:	e7e4      	b.n	8007f34 <_vfiprintf_r+0x208>
 8007f6a:	bf00      	nop
 8007f6c:	08008820 	.word	0x08008820
 8007f70:	08008840 	.word	0x08008840
 8007f74:	08008800 	.word	0x08008800
 8007f78:	080089bc 	.word	0x080089bc
 8007f7c:	080089c2 	.word	0x080089c2
 8007f80:	080089c6 	.word	0x080089c6
 8007f84:	08005581 	.word	0x08005581
 8007f88:	08007d07 	.word	0x08007d07

08007f8c <_sbrk_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	2300      	movs	r3, #0
 8007f90:	4d05      	ldr	r5, [pc, #20]	; (8007fa8 <_sbrk_r+0x1c>)
 8007f92:	4604      	mov	r4, r0
 8007f94:	4608      	mov	r0, r1
 8007f96:	602b      	str	r3, [r5, #0]
 8007f98:	f7fa fb84 	bl	80026a4 <_sbrk>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d102      	bne.n	8007fa6 <_sbrk_r+0x1a>
 8007fa0:	682b      	ldr	r3, [r5, #0]
 8007fa2:	b103      	cbz	r3, 8007fa6 <_sbrk_r+0x1a>
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	bd38      	pop	{r3, r4, r5, pc}
 8007fa8:	20000394 	.word	0x20000394

08007fac <__sread>:
 8007fac:	b510      	push	{r4, lr}
 8007fae:	460c      	mov	r4, r1
 8007fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb4:	f000 f92c 	bl	8008210 <_read_r>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	bfab      	itete	ge
 8007fbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fbe:	89a3      	ldrhlt	r3, [r4, #12]
 8007fc0:	181b      	addge	r3, r3, r0
 8007fc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fc6:	bfac      	ite	ge
 8007fc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fca:	81a3      	strhlt	r3, [r4, #12]
 8007fcc:	bd10      	pop	{r4, pc}

08007fce <__swrite>:
 8007fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd2:	461f      	mov	r7, r3
 8007fd4:	898b      	ldrh	r3, [r1, #12]
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	05db      	lsls	r3, r3, #23
 8007fda:	460c      	mov	r4, r1
 8007fdc:	4616      	mov	r6, r2
 8007fde:	d505      	bpl.n	8007fec <__swrite+0x1e>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe8:	f000 f898 	bl	800811c <_lseek_r>
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	4632      	mov	r2, r6
 8007ff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ff4:	81a3      	strh	r3, [r4, #12]
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	463b      	mov	r3, r7
 8007ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008002:	f000 b817 	b.w	8008034 <_write_r>

08008006 <__sseek>:
 8008006:	b510      	push	{r4, lr}
 8008008:	460c      	mov	r4, r1
 800800a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800800e:	f000 f885 	bl	800811c <_lseek_r>
 8008012:	1c43      	adds	r3, r0, #1
 8008014:	89a3      	ldrh	r3, [r4, #12]
 8008016:	bf15      	itete	ne
 8008018:	6560      	strne	r0, [r4, #84]	; 0x54
 800801a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800801e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008022:	81a3      	strheq	r3, [r4, #12]
 8008024:	bf18      	it	ne
 8008026:	81a3      	strhne	r3, [r4, #12]
 8008028:	bd10      	pop	{r4, pc}

0800802a <__sclose>:
 800802a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800802e:	f000 b831 	b.w	8008094 <_close_r>
	...

08008034 <_write_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	4604      	mov	r4, r0
 8008038:	4608      	mov	r0, r1
 800803a:	4611      	mov	r1, r2
 800803c:	2200      	movs	r2, #0
 800803e:	4d05      	ldr	r5, [pc, #20]	; (8008054 <_write_r+0x20>)
 8008040:	602a      	str	r2, [r5, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	f7fa fae2 	bl	800260c <_write>
 8008048:	1c43      	adds	r3, r0, #1
 800804a:	d102      	bne.n	8008052 <_write_r+0x1e>
 800804c:	682b      	ldr	r3, [r5, #0]
 800804e:	b103      	cbz	r3, 8008052 <_write_r+0x1e>
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	bd38      	pop	{r3, r4, r5, pc}
 8008054:	20000394 	.word	0x20000394

08008058 <__assert_func>:
 8008058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800805a:	4614      	mov	r4, r2
 800805c:	461a      	mov	r2, r3
 800805e:	4b09      	ldr	r3, [pc, #36]	; (8008084 <__assert_func+0x2c>)
 8008060:	4605      	mov	r5, r0
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68d8      	ldr	r0, [r3, #12]
 8008066:	b14c      	cbz	r4, 800807c <__assert_func+0x24>
 8008068:	4b07      	ldr	r3, [pc, #28]	; (8008088 <__assert_func+0x30>)
 800806a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800806e:	9100      	str	r1, [sp, #0]
 8008070:	462b      	mov	r3, r5
 8008072:	4906      	ldr	r1, [pc, #24]	; (800808c <__assert_func+0x34>)
 8008074:	f000 f81e 	bl	80080b4 <fiprintf>
 8008078:	f000 f8e9 	bl	800824e <abort>
 800807c:	4b04      	ldr	r3, [pc, #16]	; (8008090 <__assert_func+0x38>)
 800807e:	461c      	mov	r4, r3
 8008080:	e7f3      	b.n	800806a <__assert_func+0x12>
 8008082:	bf00      	nop
 8008084:	2000002c 	.word	0x2000002c
 8008088:	080089cd 	.word	0x080089cd
 800808c:	080089da 	.word	0x080089da
 8008090:	08008a08 	.word	0x08008a08

08008094 <_close_r>:
 8008094:	b538      	push	{r3, r4, r5, lr}
 8008096:	2300      	movs	r3, #0
 8008098:	4d05      	ldr	r5, [pc, #20]	; (80080b0 <_close_r+0x1c>)
 800809a:	4604      	mov	r4, r0
 800809c:	4608      	mov	r0, r1
 800809e:	602b      	str	r3, [r5, #0]
 80080a0:	f7fa fad0 	bl	8002644 <_close>
 80080a4:	1c43      	adds	r3, r0, #1
 80080a6:	d102      	bne.n	80080ae <_close_r+0x1a>
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	b103      	cbz	r3, 80080ae <_close_r+0x1a>
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	bd38      	pop	{r3, r4, r5, pc}
 80080b0:	20000394 	.word	0x20000394

080080b4 <fiprintf>:
 80080b4:	b40e      	push	{r1, r2, r3}
 80080b6:	b503      	push	{r0, r1, lr}
 80080b8:	4601      	mov	r1, r0
 80080ba:	ab03      	add	r3, sp, #12
 80080bc:	4805      	ldr	r0, [pc, #20]	; (80080d4 <fiprintf+0x20>)
 80080be:	f853 2b04 	ldr.w	r2, [r3], #4
 80080c2:	6800      	ldr	r0, [r0, #0]
 80080c4:	9301      	str	r3, [sp, #4]
 80080c6:	f7ff fe31 	bl	8007d2c <_vfiprintf_r>
 80080ca:	b002      	add	sp, #8
 80080cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80080d0:	b003      	add	sp, #12
 80080d2:	4770      	bx	lr
 80080d4:	2000002c 	.word	0x2000002c

080080d8 <_fstat_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	2300      	movs	r3, #0
 80080dc:	4d06      	ldr	r5, [pc, #24]	; (80080f8 <_fstat_r+0x20>)
 80080de:	4604      	mov	r4, r0
 80080e0:	4608      	mov	r0, r1
 80080e2:	4611      	mov	r1, r2
 80080e4:	602b      	str	r3, [r5, #0]
 80080e6:	f7fa fab8 	bl	800265a <_fstat>
 80080ea:	1c43      	adds	r3, r0, #1
 80080ec:	d102      	bne.n	80080f4 <_fstat_r+0x1c>
 80080ee:	682b      	ldr	r3, [r5, #0]
 80080f0:	b103      	cbz	r3, 80080f4 <_fstat_r+0x1c>
 80080f2:	6023      	str	r3, [r4, #0]
 80080f4:	bd38      	pop	{r3, r4, r5, pc}
 80080f6:	bf00      	nop
 80080f8:	20000394 	.word	0x20000394

080080fc <_isatty_r>:
 80080fc:	b538      	push	{r3, r4, r5, lr}
 80080fe:	2300      	movs	r3, #0
 8008100:	4d05      	ldr	r5, [pc, #20]	; (8008118 <_isatty_r+0x1c>)
 8008102:	4604      	mov	r4, r0
 8008104:	4608      	mov	r0, r1
 8008106:	602b      	str	r3, [r5, #0]
 8008108:	f7fa fab6 	bl	8002678 <_isatty>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d102      	bne.n	8008116 <_isatty_r+0x1a>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	b103      	cbz	r3, 8008116 <_isatty_r+0x1a>
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	20000394 	.word	0x20000394

0800811c <_lseek_r>:
 800811c:	b538      	push	{r3, r4, r5, lr}
 800811e:	4604      	mov	r4, r0
 8008120:	4608      	mov	r0, r1
 8008122:	4611      	mov	r1, r2
 8008124:	2200      	movs	r2, #0
 8008126:	4d05      	ldr	r5, [pc, #20]	; (800813c <_lseek_r+0x20>)
 8008128:	602a      	str	r2, [r5, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	f7fa faae 	bl	800268c <_lseek>
 8008130:	1c43      	adds	r3, r0, #1
 8008132:	d102      	bne.n	800813a <_lseek_r+0x1e>
 8008134:	682b      	ldr	r3, [r5, #0]
 8008136:	b103      	cbz	r3, 800813a <_lseek_r+0x1e>
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	bd38      	pop	{r3, r4, r5, pc}
 800813c:	20000394 	.word	0x20000394

08008140 <__ascii_mbtowc>:
 8008140:	b082      	sub	sp, #8
 8008142:	b901      	cbnz	r1, 8008146 <__ascii_mbtowc+0x6>
 8008144:	a901      	add	r1, sp, #4
 8008146:	b142      	cbz	r2, 800815a <__ascii_mbtowc+0x1a>
 8008148:	b14b      	cbz	r3, 800815e <__ascii_mbtowc+0x1e>
 800814a:	7813      	ldrb	r3, [r2, #0]
 800814c:	600b      	str	r3, [r1, #0]
 800814e:	7812      	ldrb	r2, [r2, #0]
 8008150:	1e10      	subs	r0, r2, #0
 8008152:	bf18      	it	ne
 8008154:	2001      	movne	r0, #1
 8008156:	b002      	add	sp, #8
 8008158:	4770      	bx	lr
 800815a:	4610      	mov	r0, r2
 800815c:	e7fb      	b.n	8008156 <__ascii_mbtowc+0x16>
 800815e:	f06f 0001 	mvn.w	r0, #1
 8008162:	e7f8      	b.n	8008156 <__ascii_mbtowc+0x16>

08008164 <memmove>:
 8008164:	4288      	cmp	r0, r1
 8008166:	b510      	push	{r4, lr}
 8008168:	eb01 0402 	add.w	r4, r1, r2
 800816c:	d902      	bls.n	8008174 <memmove+0x10>
 800816e:	4284      	cmp	r4, r0
 8008170:	4623      	mov	r3, r4
 8008172:	d807      	bhi.n	8008184 <memmove+0x20>
 8008174:	1e43      	subs	r3, r0, #1
 8008176:	42a1      	cmp	r1, r4
 8008178:	d008      	beq.n	800818c <memmove+0x28>
 800817a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800817e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008182:	e7f8      	b.n	8008176 <memmove+0x12>
 8008184:	4601      	mov	r1, r0
 8008186:	4402      	add	r2, r0
 8008188:	428a      	cmp	r2, r1
 800818a:	d100      	bne.n	800818e <memmove+0x2a>
 800818c:	bd10      	pop	{r4, pc}
 800818e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008196:	e7f7      	b.n	8008188 <memmove+0x24>

08008198 <__malloc_lock>:
 8008198:	4801      	ldr	r0, [pc, #4]	; (80081a0 <__malloc_lock+0x8>)
 800819a:	f7fe bf54 	b.w	8007046 <__retarget_lock_acquire_recursive>
 800819e:	bf00      	nop
 80081a0:	20000388 	.word	0x20000388

080081a4 <__malloc_unlock>:
 80081a4:	4801      	ldr	r0, [pc, #4]	; (80081ac <__malloc_unlock+0x8>)
 80081a6:	f7fe bf4f 	b.w	8007048 <__retarget_lock_release_recursive>
 80081aa:	bf00      	nop
 80081ac:	20000388 	.word	0x20000388

080081b0 <_realloc_r>:
 80081b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b4:	4680      	mov	r8, r0
 80081b6:	4614      	mov	r4, r2
 80081b8:	460e      	mov	r6, r1
 80081ba:	b921      	cbnz	r1, 80081c6 <_realloc_r+0x16>
 80081bc:	4611      	mov	r1, r2
 80081be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081c2:	f7ff bbbb 	b.w	800793c <_malloc_r>
 80081c6:	b92a      	cbnz	r2, 80081d4 <_realloc_r+0x24>
 80081c8:	f7ff fb50 	bl	800786c <_free_r>
 80081cc:	4625      	mov	r5, r4
 80081ce:	4628      	mov	r0, r5
 80081d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d4:	f000 f842 	bl	800825c <_malloc_usable_size_r>
 80081d8:	4284      	cmp	r4, r0
 80081da:	4607      	mov	r7, r0
 80081dc:	d802      	bhi.n	80081e4 <_realloc_r+0x34>
 80081de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081e2:	d812      	bhi.n	800820a <_realloc_r+0x5a>
 80081e4:	4621      	mov	r1, r4
 80081e6:	4640      	mov	r0, r8
 80081e8:	f7ff fba8 	bl	800793c <_malloc_r>
 80081ec:	4605      	mov	r5, r0
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d0ed      	beq.n	80081ce <_realloc_r+0x1e>
 80081f2:	42bc      	cmp	r4, r7
 80081f4:	4622      	mov	r2, r4
 80081f6:	4631      	mov	r1, r6
 80081f8:	bf28      	it	cs
 80081fa:	463a      	movcs	r2, r7
 80081fc:	f7fd f90c 	bl	8005418 <memcpy>
 8008200:	4631      	mov	r1, r6
 8008202:	4640      	mov	r0, r8
 8008204:	f7ff fb32 	bl	800786c <_free_r>
 8008208:	e7e1      	b.n	80081ce <_realloc_r+0x1e>
 800820a:	4635      	mov	r5, r6
 800820c:	e7df      	b.n	80081ce <_realloc_r+0x1e>
	...

08008210 <_read_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	4604      	mov	r4, r0
 8008214:	4608      	mov	r0, r1
 8008216:	4611      	mov	r1, r2
 8008218:	2200      	movs	r2, #0
 800821a:	4d05      	ldr	r5, [pc, #20]	; (8008230 <_read_r+0x20>)
 800821c:	602a      	str	r2, [r5, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	f7fa f9d7 	bl	80025d2 <_read>
 8008224:	1c43      	adds	r3, r0, #1
 8008226:	d102      	bne.n	800822e <_read_r+0x1e>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	b103      	cbz	r3, 800822e <_read_r+0x1e>
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	bd38      	pop	{r3, r4, r5, pc}
 8008230:	20000394 	.word	0x20000394

08008234 <__ascii_wctomb>:
 8008234:	4603      	mov	r3, r0
 8008236:	4608      	mov	r0, r1
 8008238:	b141      	cbz	r1, 800824c <__ascii_wctomb+0x18>
 800823a:	2aff      	cmp	r2, #255	; 0xff
 800823c:	d904      	bls.n	8008248 <__ascii_wctomb+0x14>
 800823e:	228a      	movs	r2, #138	; 0x8a
 8008240:	f04f 30ff 	mov.w	r0, #4294967295
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	4770      	bx	lr
 8008248:	2001      	movs	r0, #1
 800824a:	700a      	strb	r2, [r1, #0]
 800824c:	4770      	bx	lr

0800824e <abort>:
 800824e:	2006      	movs	r0, #6
 8008250:	b508      	push	{r3, lr}
 8008252:	f000 f833 	bl	80082bc <raise>
 8008256:	2001      	movs	r0, #1
 8008258:	f7fa f9b1 	bl	80025be <_exit>

0800825c <_malloc_usable_size_r>:
 800825c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008260:	1f18      	subs	r0, r3, #4
 8008262:	2b00      	cmp	r3, #0
 8008264:	bfbc      	itt	lt
 8008266:	580b      	ldrlt	r3, [r1, r0]
 8008268:	18c0      	addlt	r0, r0, r3
 800826a:	4770      	bx	lr

0800826c <_raise_r>:
 800826c:	291f      	cmp	r1, #31
 800826e:	b538      	push	{r3, r4, r5, lr}
 8008270:	4604      	mov	r4, r0
 8008272:	460d      	mov	r5, r1
 8008274:	d904      	bls.n	8008280 <_raise_r+0x14>
 8008276:	2316      	movs	r3, #22
 8008278:	6003      	str	r3, [r0, #0]
 800827a:	f04f 30ff 	mov.w	r0, #4294967295
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008282:	b112      	cbz	r2, 800828a <_raise_r+0x1e>
 8008284:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008288:	b94b      	cbnz	r3, 800829e <_raise_r+0x32>
 800828a:	4620      	mov	r0, r4
 800828c:	f000 f830 	bl	80082f0 <_getpid_r>
 8008290:	462a      	mov	r2, r5
 8008292:	4601      	mov	r1, r0
 8008294:	4620      	mov	r0, r4
 8008296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800829a:	f000 b817 	b.w	80082cc <_kill_r>
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d00a      	beq.n	80082b8 <_raise_r+0x4c>
 80082a2:	1c59      	adds	r1, r3, #1
 80082a4:	d103      	bne.n	80082ae <_raise_r+0x42>
 80082a6:	2316      	movs	r3, #22
 80082a8:	6003      	str	r3, [r0, #0]
 80082aa:	2001      	movs	r0, #1
 80082ac:	e7e7      	b.n	800827e <_raise_r+0x12>
 80082ae:	2400      	movs	r4, #0
 80082b0:	4628      	mov	r0, r5
 80082b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082b6:	4798      	blx	r3
 80082b8:	2000      	movs	r0, #0
 80082ba:	e7e0      	b.n	800827e <_raise_r+0x12>

080082bc <raise>:
 80082bc:	4b02      	ldr	r3, [pc, #8]	; (80082c8 <raise+0xc>)
 80082be:	4601      	mov	r1, r0
 80082c0:	6818      	ldr	r0, [r3, #0]
 80082c2:	f7ff bfd3 	b.w	800826c <_raise_r>
 80082c6:	bf00      	nop
 80082c8:	2000002c 	.word	0x2000002c

080082cc <_kill_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	2300      	movs	r3, #0
 80082d0:	4d06      	ldr	r5, [pc, #24]	; (80082ec <_kill_r+0x20>)
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	4611      	mov	r1, r2
 80082d8:	602b      	str	r3, [r5, #0]
 80082da:	f7fa f960 	bl	800259e <_kill>
 80082de:	1c43      	adds	r3, r0, #1
 80082e0:	d102      	bne.n	80082e8 <_kill_r+0x1c>
 80082e2:	682b      	ldr	r3, [r5, #0]
 80082e4:	b103      	cbz	r3, 80082e8 <_kill_r+0x1c>
 80082e6:	6023      	str	r3, [r4, #0]
 80082e8:	bd38      	pop	{r3, r4, r5, pc}
 80082ea:	bf00      	nop
 80082ec:	20000394 	.word	0x20000394

080082f0 <_getpid_r>:
 80082f0:	f7fa b94e 	b.w	8002590 <_getpid>

080082f4 <sqrt>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	4606      	mov	r6, r0
 80082f8:	460f      	mov	r7, r1
 80082fa:	f000 f81f 	bl	800833c <__ieee754_sqrt>
 80082fe:	4632      	mov	r2, r6
 8008300:	4604      	mov	r4, r0
 8008302:	460d      	mov	r5, r1
 8008304:	463b      	mov	r3, r7
 8008306:	4630      	mov	r0, r6
 8008308:	4639      	mov	r1, r7
 800830a:	f7f8 fb7f 	bl	8000a0c <__aeabi_dcmpun>
 800830e:	b990      	cbnz	r0, 8008336 <sqrt+0x42>
 8008310:	2200      	movs	r2, #0
 8008312:	2300      	movs	r3, #0
 8008314:	4630      	mov	r0, r6
 8008316:	4639      	mov	r1, r7
 8008318:	f7f8 fb50 	bl	80009bc <__aeabi_dcmplt>
 800831c:	b158      	cbz	r0, 8008336 <sqrt+0x42>
 800831e:	f7fd f851 	bl	80053c4 <__errno>
 8008322:	2321      	movs	r3, #33	; 0x21
 8008324:	2200      	movs	r2, #0
 8008326:	6003      	str	r3, [r0, #0]
 8008328:	2300      	movs	r3, #0
 800832a:	4610      	mov	r0, r2
 800832c:	4619      	mov	r1, r3
 800832e:	f7f8 f9fd 	bl	800072c <__aeabi_ddiv>
 8008332:	4604      	mov	r4, r0
 8008334:	460d      	mov	r5, r1
 8008336:	4620      	mov	r0, r4
 8008338:	4629      	mov	r1, r5
 800833a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800833c <__ieee754_sqrt>:
 800833c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008498 <__ieee754_sqrt+0x15c>
 8008340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008344:	ea3c 0c01 	bics.w	ip, ip, r1
 8008348:	4606      	mov	r6, r0
 800834a:	460d      	mov	r5, r1
 800834c:	460c      	mov	r4, r1
 800834e:	460a      	mov	r2, r1
 8008350:	4607      	mov	r7, r0
 8008352:	4603      	mov	r3, r0
 8008354:	d10f      	bne.n	8008376 <__ieee754_sqrt+0x3a>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	f7f8 f8bd 	bl	80004d8 <__aeabi_dmul>
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	4630      	mov	r0, r6
 8008364:	4629      	mov	r1, r5
 8008366:	f7f7 ff01 	bl	800016c <__adddf3>
 800836a:	4606      	mov	r6, r0
 800836c:	460d      	mov	r5, r1
 800836e:	4630      	mov	r0, r6
 8008370:	4629      	mov	r1, r5
 8008372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008376:	2900      	cmp	r1, #0
 8008378:	dc0e      	bgt.n	8008398 <__ieee754_sqrt+0x5c>
 800837a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800837e:	ea5c 0707 	orrs.w	r7, ip, r7
 8008382:	d0f4      	beq.n	800836e <__ieee754_sqrt+0x32>
 8008384:	b141      	cbz	r1, 8008398 <__ieee754_sqrt+0x5c>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	f7f7 feed 	bl	8000168 <__aeabi_dsub>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	f7f8 f9cb 	bl	800072c <__aeabi_ddiv>
 8008396:	e7e8      	b.n	800836a <__ieee754_sqrt+0x2e>
 8008398:	1521      	asrs	r1, r4, #20
 800839a:	d075      	beq.n	8008488 <__ieee754_sqrt+0x14c>
 800839c:	07cc      	lsls	r4, r1, #31
 800839e:	f04f 0400 	mov.w	r4, #0
 80083a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80083a6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80083aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80083ae:	bf5e      	ittt	pl
 80083b0:	0fd9      	lsrpl	r1, r3, #31
 80083b2:	005b      	lslpl	r3, r3, #1
 80083b4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80083b8:	0fd9      	lsrs	r1, r3, #31
 80083ba:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80083be:	2516      	movs	r5, #22
 80083c0:	4620      	mov	r0, r4
 80083c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083c6:	107f      	asrs	r7, r7, #1
 80083c8:	005b      	lsls	r3, r3, #1
 80083ca:	1846      	adds	r6, r0, r1
 80083cc:	4296      	cmp	r6, r2
 80083ce:	bfde      	ittt	le
 80083d0:	1b92      	suble	r2, r2, r6
 80083d2:	1870      	addle	r0, r6, r1
 80083d4:	1864      	addle	r4, r4, r1
 80083d6:	0052      	lsls	r2, r2, #1
 80083d8:	3d01      	subs	r5, #1
 80083da:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80083de:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80083e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80083e6:	d1f0      	bne.n	80083ca <__ieee754_sqrt+0x8e>
 80083e8:	4629      	mov	r1, r5
 80083ea:	f04f 0e20 	mov.w	lr, #32
 80083ee:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80083f2:	4282      	cmp	r2, r0
 80083f4:	eb06 0c05 	add.w	ip, r6, r5
 80083f8:	dc02      	bgt.n	8008400 <__ieee754_sqrt+0xc4>
 80083fa:	d113      	bne.n	8008424 <__ieee754_sqrt+0xe8>
 80083fc:	459c      	cmp	ip, r3
 80083fe:	d811      	bhi.n	8008424 <__ieee754_sqrt+0xe8>
 8008400:	f1bc 0f00 	cmp.w	ip, #0
 8008404:	eb0c 0506 	add.w	r5, ip, r6
 8008408:	da43      	bge.n	8008492 <__ieee754_sqrt+0x156>
 800840a:	2d00      	cmp	r5, #0
 800840c:	db41      	blt.n	8008492 <__ieee754_sqrt+0x156>
 800840e:	f100 0801 	add.w	r8, r0, #1
 8008412:	1a12      	subs	r2, r2, r0
 8008414:	4640      	mov	r0, r8
 8008416:	459c      	cmp	ip, r3
 8008418:	bf88      	it	hi
 800841a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800841e:	eba3 030c 	sub.w	r3, r3, ip
 8008422:	4431      	add	r1, r6
 8008424:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008428:	f1be 0e01 	subs.w	lr, lr, #1
 800842c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8008430:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008434:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008438:	d1db      	bne.n	80083f2 <__ieee754_sqrt+0xb6>
 800843a:	4313      	orrs	r3, r2
 800843c:	d006      	beq.n	800844c <__ieee754_sqrt+0x110>
 800843e:	1c48      	adds	r0, r1, #1
 8008440:	bf0b      	itete	eq
 8008442:	4671      	moveq	r1, lr
 8008444:	3101      	addne	r1, #1
 8008446:	3401      	addeq	r4, #1
 8008448:	f021 0101 	bicne.w	r1, r1, #1
 800844c:	1063      	asrs	r3, r4, #1
 800844e:	0849      	lsrs	r1, r1, #1
 8008450:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008454:	07e2      	lsls	r2, r4, #31
 8008456:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800845a:	bf48      	it	mi
 800845c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008460:	460e      	mov	r6, r1
 8008462:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008466:	e782      	b.n	800836e <__ieee754_sqrt+0x32>
 8008468:	0ada      	lsrs	r2, r3, #11
 800846a:	3815      	subs	r0, #21
 800846c:	055b      	lsls	r3, r3, #21
 800846e:	2a00      	cmp	r2, #0
 8008470:	d0fa      	beq.n	8008468 <__ieee754_sqrt+0x12c>
 8008472:	02d5      	lsls	r5, r2, #11
 8008474:	d50a      	bpl.n	800848c <__ieee754_sqrt+0x150>
 8008476:	f1c1 0420 	rsb	r4, r1, #32
 800847a:	fa23 f404 	lsr.w	r4, r3, r4
 800847e:	1e4d      	subs	r5, r1, #1
 8008480:	408b      	lsls	r3, r1
 8008482:	4322      	orrs	r2, r4
 8008484:	1b41      	subs	r1, r0, r5
 8008486:	e789      	b.n	800839c <__ieee754_sqrt+0x60>
 8008488:	4608      	mov	r0, r1
 800848a:	e7f0      	b.n	800846e <__ieee754_sqrt+0x132>
 800848c:	0052      	lsls	r2, r2, #1
 800848e:	3101      	adds	r1, #1
 8008490:	e7ef      	b.n	8008472 <__ieee754_sqrt+0x136>
 8008492:	4680      	mov	r8, r0
 8008494:	e7bd      	b.n	8008412 <__ieee754_sqrt+0xd6>
 8008496:	bf00      	nop
 8008498:	7ff00000 	.word	0x7ff00000

0800849c <_init>:
 800849c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849e:	bf00      	nop
 80084a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a2:	bc08      	pop	{r3}
 80084a4:	469e      	mov	lr, r3
 80084a6:	4770      	bx	lr

080084a8 <_fini>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	bf00      	nop
 80084ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ae:	bc08      	pop	{r3}
 80084b0:	469e      	mov	lr, r3
 80084b2:	4770      	bx	lr
